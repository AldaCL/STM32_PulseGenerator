
4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c04  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ac8  08006dd8  08006dd8  00016dd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078a0  080078a0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  080078a0  080078a0  000178a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078a8  080078a8  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078a8  080078a8  000178a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078ac  080078ac  000178ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080078b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  200001e8  08007a98  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  08007a98  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dbb0  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e8b  00000000  00000000  0002ddc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e30  00000000  00000000  0002fc58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00022245  00000000  00000000  00030a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000a996  00000000  00000000  00052ccd  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000d1e89  00000000  00000000  0005d663  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0012f4ec  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000d20  00000000  00000000  0012f568  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00004640  00000000  00000000  00130288  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006dbc 	.word	0x08006dbc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	08006dbc 	.word	0x08006dbc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b972 	b.w	8000fc4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4688      	mov	r8, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14b      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4615      	mov	r5, r2
 8000d0a:	d967      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0720 	rsb	r7, r2, #32
 8000d16:	fa01 f302 	lsl.w	r3, r1, r2
 8000d1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d1e:	4095      	lsls	r5, r2
 8000d20:	ea47 0803 	orr.w	r8, r7, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d30:	fa1f fc85 	uxth.w	ip, r5
 8000d34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d4a:	f080 811b 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8118 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d54:	3f02      	subs	r7, #2
 8000d56:	442b      	add	r3, r5
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6c:	45a4      	cmp	ip, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	192c      	adds	r4, r5, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d80:	3802      	subs	r0, #2
 8000d82:	442c      	add	r4, r5
 8000d84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d88:	eba4 040c 	sub.w	r4, r4, ip
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	b11e      	cbz	r6, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c6 4300 	strd	r4, r3, [r6]
 8000d98:	4639      	mov	r1, r7
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0xbe>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80eb 	beq.w	8000f7e <__udivmoddi4+0x286>
 8000da8:	2700      	movs	r7, #0
 8000daa:	e9c6 0100 	strd	r0, r1, [r6]
 8000dae:	4638      	mov	r0, r7
 8000db0:	4639      	mov	r1, r7
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f783 	clz	r7, r3
 8000dba:	2f00      	cmp	r7, #0
 8000dbc:	d147      	bne.n	8000e4e <__udivmoddi4+0x156>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0xd0>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80fa 	bhi.w	8000fbc <__udivmoddi4+0x2c4>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0303 	sbc.w	r3, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d0e0      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000dd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dda:	e7dd      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000ddc:	b902      	cbnz	r2, 8000de0 <__udivmoddi4+0xe8>
 8000dde:	deff      	udf	#255	; 0xff
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f040 808f 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000dea:	1b49      	subs	r1, r1, r5
 8000dec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df0:	fa1f f885 	uxth.w	r8, r5
 8000df4:	2701      	movs	r7, #1
 8000df6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dfa:	0c23      	lsrs	r3, r4, #16
 8000dfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb08 f10c 	mul.w	r1, r8, ip
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0c:	18eb      	adds	r3, r5, r3
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	f200 80cd 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x14c>
 8000e34:	192c      	adds	r4, r5, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x14a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80b6 	bhi.w	8000fae <__udivmoddi4+0x2b6>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e79f      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e52:	40bb      	lsls	r3, r7
 8000e54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e6c:	4325      	orrs	r5, r4
 8000e6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e72:	0c2c      	lsrs	r4, r5, #16
 8000e74:	fb08 3319 	mls	r3, r8, r9, r3
 8000e78:	fa1f fa8e 	uxth.w	sl, lr
 8000e7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e80:	fb09 f40a 	mul.w	r4, r9, sl
 8000e84:	429c      	cmp	r4, r3
 8000e86:	fa02 f207 	lsl.w	r2, r2, r7
 8000e8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1e 0303 	adds.w	r3, lr, r3
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e98:	f080 8087 	bcs.w	8000faa <__udivmoddi4+0x2b2>
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	f240 8084 	bls.w	8000faa <__udivmoddi4+0x2b2>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4473      	add	r3, lr
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	b2ad      	uxth	r5, r5
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000eb4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000eb8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ebc:	45a2      	cmp	sl, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ec8:	d26b      	bcs.n	8000fa2 <__udivmoddi4+0x2aa>
 8000eca:	45a2      	cmp	sl, r4
 8000ecc:	d969      	bls.n	8000fa2 <__udivmoddi4+0x2aa>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4474      	add	r4, lr
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	eba4 040a 	sub.w	r4, r4, sl
 8000ede:	454c      	cmp	r4, r9
 8000ee0:	46c2      	mov	sl, r8
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	d354      	bcc.n	8000f90 <__udivmoddi4+0x298>
 8000ee6:	d051      	beq.n	8000f8c <__udivmoddi4+0x294>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d069      	beq.n	8000fc0 <__udivmoddi4+0x2c8>
 8000eec:	ebb1 050a 	subs.w	r5, r1, sl
 8000ef0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ef4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ef8:	40fd      	lsrs	r5, r7
 8000efa:	40fc      	lsrs	r4, r7
 8000efc:	ea4c 0505 	orr.w	r5, ip, r5
 8000f00:	e9c6 5400 	strd	r5, r4, [r6]
 8000f04:	2700      	movs	r7, #0
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f08:	f1c2 0320 	rsb	r3, r2, #32
 8000f0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f10:	4095      	lsls	r5, r2
 8000f12:	fa01 f002 	lsl.w	r0, r1, r2
 8000f16:	fa21 f303 	lsr.w	r3, r1, r3
 8000f1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	0c01      	lsrs	r1, r0, #16
 8000f22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f26:	fa1f f885 	uxth.w	r8, r5
 8000f2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb07 f308 	mul.w	r3, r7, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	fa04 f402 	lsl.w	r4, r4, r2
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x256>
 8000f3e:	1869      	adds	r1, r5, r1
 8000f40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f44:	d22f      	bcs.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d92d      	bls.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f4a:	3f02      	subs	r7, #2
 8000f4c:	4429      	add	r1, r5
 8000f4e:	1acb      	subs	r3, r1, r3
 8000f50:	b281      	uxth	r1, r0
 8000f52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5e:	fb00 f308 	mul.w	r3, r0, r8
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x27e>
 8000f66:	1869      	adds	r1, r5, r1
 8000f68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f6c:	d217      	bcs.n	8000f9e <__udivmoddi4+0x2a6>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d915      	bls.n	8000f9e <__udivmoddi4+0x2a6>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4429      	add	r1, r5
 8000f76:	1ac9      	subs	r1, r1, r3
 8000f78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f7c:	e73b      	b.n	8000df6 <__udivmoddi4+0xfe>
 8000f7e:	4637      	mov	r7, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e709      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f84:	4607      	mov	r7, r0
 8000f86:	e6e7      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f88:	4618      	mov	r0, r3
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f8c:	4541      	cmp	r1, r8
 8000f8e:	d2ab      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f94:	eb69 020e 	sbc.w	r2, r9, lr
 8000f98:	3801      	subs	r0, #1
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	e7a4      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f9e:	4660      	mov	r0, ip
 8000fa0:	e7e9      	b.n	8000f76 <__udivmoddi4+0x27e>
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	e795      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa6:	4667      	mov	r7, ip
 8000fa8:	e7d1      	b.n	8000f4e <__udivmoddi4+0x256>
 8000faa:	4681      	mov	r9, r0
 8000fac:	e77c      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fae:	3802      	subs	r0, #2
 8000fb0:	442c      	add	r4, r5
 8000fb2:	e747      	b.n	8000e44 <__udivmoddi4+0x14c>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	442b      	add	r3, r5
 8000fba:	e72f      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fbc:	4638      	mov	r0, r7
 8000fbe:	e708      	b.n	8000dd2 <__udivmoddi4+0xda>
 8000fc0:	4637      	mov	r7, r6
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0xa0>

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc8:	b590      	push	{r4, r7, lr}
 8000fca:	b095      	sub	sp, #84	; 0x54
 8000fcc:	af04      	add	r7, sp, #16

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */



	HAL_Init();
 8000fce:	f001 fa21 	bl	8002414 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd2:	f000 fbef 	bl	80017b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd6:	f000 fd61 	bl	8001a9c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000fda:	f000 fc59 	bl	8001890 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000fde:	f000 fc8d 	bl	80018fc <MX_TIM1_Init>
  MX_TIM10_Init();
 8000fe2:	f000 fce3 	bl	80019ac <MX_TIM10_Init>
  MX_USART2_UART_Init();
 8000fe6:	f000 fd2f 	bl	8001a48 <MX_USART2_UART_Init>
  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8000fea:	2100      	movs	r1, #0
 8000fec:	488b      	ldr	r0, [pc, #556]	; (800121c <main+0x254>)
 8000fee:	f002 fd07 	bl	8003a00 <HAL_TIM_PWM_Start>
    //HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1);
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1);
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	488a      	ldr	r0, [pc, #552]	; (8001220 <main+0x258>)
 8000ff6:	f002 fdd3 	bl	8003ba0 <HAL_TIM_Encoder_Start>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 8000ffa:	f000 feb5 	bl	8001d68 <ST7735_Init>
  ST7735_FillScreen(ST7735_BLACK);
 8000ffe:	2000      	movs	r0, #0
 8001000:	f001 f800 	bl	8002004 <ST7735_FillScreen>
  int duty = 40;
 8001004:	2328      	movs	r3, #40	; 0x28
 8001006:	63fb      	str	r3, [r7, #60]	; 0x3c
  int freq = 200;
 8001008:	23c8      	movs	r3, #200	; 0xc8
 800100a:	63bb      	str	r3, [r7, #56]	; 0x38
  int printDD = 40;
 800100c:	2328      	movs	r3, #40	; 0x28
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
  float mess = 40;
 8001010:	4b84      	ldr	r3, [pc, #528]	; (8001224 <main+0x25c>)
 8001012:	637b      	str	r3, [r7, #52]	; 0x34
  float cycle = 0.0;
 8001014:	f04f 0300 	mov.w	r3, #0
 8001018:	62bb      	str	r3, [r7, #40]	; 0x28
  float pwidth = 0.0;
 800101a:	f04f 0300 	mov.w	r3, #0
 800101e:	627b      	str	r3, [r7, #36]	; 0x24

  htim10.Instance->CCR1 = 40;
 8001020:	4b7e      	ldr	r3, [pc, #504]	; (800121c <main+0x254>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2228      	movs	r2, #40	; 0x28
 8001026:	635a      	str	r2, [r3, #52]	; 0x34
  htim10.Instance->ARR = freq;
 8001028:	4b7c      	ldr	r3, [pc, #496]	; (800121c <main+0x254>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800102e:	62da      	str	r2, [r3, #44]	; 0x2c

  float realFreq = 84000/((htim10.Instance->ARR)+1);
 8001030:	4b7a      	ldr	r3, [pc, #488]	; (800121c <main+0x254>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001036:	3301      	adds	r3, #1
 8001038:	4a7b      	ldr	r2, [pc, #492]	; (8001228 <main+0x260>)
 800103a:	fbb2 f3f3 	udiv	r3, r2, r3
 800103e:	ee07 3a90 	vmov	s15, r3
 8001042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001046:	edc7 7a08 	vstr	s15, [r7, #32]

  //uint8_t
  ST7735_FillRectangle(5, 8, 160, 30, ST7735_BLUE);
 800104a:	231f      	movs	r3, #31
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	231e      	movs	r3, #30
 8001050:	22a0      	movs	r2, #160	; 0xa0
 8001052:	2108      	movs	r1, #8
 8001054:	2005      	movs	r0, #5
 8001056:	f000 ff61 	bl	8001f1c <ST7735_FillRectangle>
  ST7735_WriteString(7, 10, "Frequency=        kHz", Font_7x10, ST7735_WHITE, ST7735_BLUE);
 800105a:	4b74      	ldr	r3, [pc, #464]	; (800122c <main+0x264>)
 800105c:	221f      	movs	r2, #31
 800105e:	9202      	str	r2, [sp, #8]
 8001060:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001064:	9201      	str	r2, [sp, #4]
 8001066:	685a      	ldr	r2, [r3, #4]
 8001068:	9200      	str	r2, [sp, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a70      	ldr	r2, [pc, #448]	; (8001230 <main+0x268>)
 800106e:	210a      	movs	r1, #10
 8001070:	2007      	movs	r0, #7
 8001072:	f000 ff09 	bl	8001e88 <ST7735_WriteString>
  ST7735_WriteString(7, 25, "Pulse W. =         ns", Font_7x10, ST7735_WHITE, ST7735_BLUE);
 8001076:	4b6d      	ldr	r3, [pc, #436]	; (800122c <main+0x264>)
 8001078:	221f      	movs	r2, #31
 800107a:	9202      	str	r2, [sp, #8]
 800107c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001080:	9201      	str	r2, [sp, #4]
 8001082:	685a      	ldr	r2, [r3, #4]
 8001084:	9200      	str	r2, [sp, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a6a      	ldr	r2, [pc, #424]	; (8001234 <main+0x26c>)
 800108a:	2119      	movs	r1, #25
 800108c:	2007      	movs	r0, #7
 800108e:	f000 fefb 	bl	8001e88 <ST7735_WriteString>

  ST7735_WriteString(1, 45, "3.3v", Font_7x10, ST7735_YELLOW, ST7735_BLACK);
 8001092:	4b66      	ldr	r3, [pc, #408]	; (800122c <main+0x264>)
 8001094:	2200      	movs	r2, #0
 8001096:	9202      	str	r2, [sp, #8]
 8001098:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800109c:	9201      	str	r2, [sp, #4]
 800109e:	685a      	ldr	r2, [r3, #4]
 80010a0:	9200      	str	r2, [sp, #0]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a64      	ldr	r2, [pc, #400]	; (8001238 <main+0x270>)
 80010a6:	212d      	movs	r1, #45	; 0x2d
 80010a8:	2001      	movs	r0, #1
 80010aa:	f000 feed 	bl	8001e88 <ST7735_WriteString>
  ST7735_FillRectangle(2, 60, 1, 40, ST7735_RED);
 80010ae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2328      	movs	r3, #40	; 0x28
 80010b6:	2201      	movs	r2, #1
 80010b8:	213c      	movs	r1, #60	; 0x3c
 80010ba:	2002      	movs	r0, #2
 80010bc:	f000 ff2e 	bl	8001f1c <ST7735_FillRectangle>
  ST7735_FillRectangle(0, 100,5, 1, ST7735_RED);
 80010c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2301      	movs	r3, #1
 80010c8:	2205      	movs	r2, #5
 80010ca:	2164      	movs	r1, #100	; 0x64
 80010cc:	2000      	movs	r0, #0
 80010ce:	f000 ff25 	bl	8001f1c <ST7735_FillRectangle>
  ST7735_FillRectangle(0, 60 ,5 ,1, ST7735_RED);
 80010d2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2301      	movs	r3, #1
 80010da:	2205      	movs	r2, #5
 80010dc:	213c      	movs	r1, #60	; 0x3c
 80010de:	2000      	movs	r0, #0
 80010e0:	f000 ff1c 	bl	8001f1c <ST7735_FillRectangle>

  ST7735_FillRectangle(10, 60, 1, 40,ST7735_WHITE );
 80010e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	2328      	movs	r3, #40	; 0x28
 80010ec:	2201      	movs	r2, #1
 80010ee:	213c      	movs	r1, #60	; 0x3c
 80010f0:	200a      	movs	r0, #10
 80010f2:	f000 ff13 	bl	8001f1c <ST7735_FillRectangle>
  ST7735_FillRectangle(10, 60, 45, 1, ST7735_WHITE);
 80010f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2301      	movs	r3, #1
 80010fe:	222d      	movs	r2, #45	; 0x2d
 8001100:	213c      	movs	r1, #60	; 0x3c
 8001102:	200a      	movs	r0, #10
 8001104:	f000 ff0a 	bl	8001f1c <ST7735_FillRectangle>
  //ST7735_FillRectangle(55, 70, 1, 40,ST7735_WHITE);
  ST7735_FillRectangle(55, 100, 50, 1, ST7735_WHITE);
 8001108:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	2301      	movs	r3, #1
 8001110:	2232      	movs	r2, #50	; 0x32
 8001112:	2164      	movs	r1, #100	; 0x64
 8001114:	2037      	movs	r0, #55	; 0x37
 8001116:	f000 ff01 	bl	8001f1c <ST7735_FillRectangle>
  ST7735_FillRectangle(105, 60, 1, 40,ST7735_WHITE );
 800111a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2328      	movs	r3, #40	; 0x28
 8001122:	2201      	movs	r2, #1
 8001124:	213c      	movs	r1, #60	; 0x3c
 8001126:	2069      	movs	r0, #105	; 0x69
 8001128:	f000 fef8 	bl	8001f1c <ST7735_FillRectangle>
  ST7735_FillRectangle(105, 60, 20, 1, ST7735_WHITE);
 800112c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	2301      	movs	r3, #1
 8001134:	2214      	movs	r2, #20
 8001136:	213c      	movs	r1, #60	; 0x3c
 8001138:	2069      	movs	r0, #105	; 0x69
 800113a:	f000 feef 	bl	8001f1c <ST7735_FillRectangle>
  //ST7735_FillRectangle(10, 115, 45, 1, ST7735_CYAN);
  //ST7735_FillRectangle(10, 113, 1, 4, ST7735_CYAN);
  //ST7735_FillRectangle(55, 113, 1, 4, ST7735_CYAN);
  //ST7735_WriteString(26, 118, "1us", Font_7x10, ST7735_WHITE, ST7735_BLACK);

  ST7735_WriteString(35, 118, "Duty=      %", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800113e:	4b3b      	ldr	r3, [pc, #236]	; (800122c <main+0x264>)
 8001140:	2200      	movs	r2, #0
 8001142:	9202      	str	r2, [sp, #8]
 8001144:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001148:	9201      	str	r2, [sp, #4]
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	9200      	str	r2, [sp, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a3a      	ldr	r2, [pc, #232]	; (800123c <main+0x274>)
 8001152:	2176      	movs	r1, #118	; 0x76
 8001154:	2023      	movs	r0, #35	; 0x23
 8001156:	f000 fe97 	bl	8001e88 <ST7735_WriteString>


//  for(int y = ST7735_HEIGHT/2; y< ){
//
//  }
  bool press = true;
 800115a:	2301      	movs	r3, #1
 800115c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))){
 8001160:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001164:	4836      	ldr	r0, [pc, #216]	; (8001240 <main+0x278>)
 8001166:	f001 fc61 	bl	8002a2c <HAL_GPIO_ReadPin>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d127      	bne.n	80011c0 <main+0x1f8>
		  while(!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)));
 8001170:	bf00      	nop
 8001172:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001176:	4832      	ldr	r0, [pc, #200]	; (8001240 <main+0x278>)
 8001178:	f001 fc58 	bl	8002a2c <HAL_GPIO_ReadPin>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d0f7      	beq.n	8001172 <main+0x1aa>

		  press = !press;
 8001182:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001186:	2b00      	cmp	r3, #0
 8001188:	bf14      	ite	ne
 800118a:	2301      	movne	r3, #1
 800118c:	2300      	moveq	r3, #0
 800118e:	b2db      	uxtb	r3, r3
 8001190:	f083 0301 	eor.w	r3, r3, #1
 8001194:	b2db      	uxtb	r3, r3
 8001196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800119a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		  if(press){
 80011a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d004      	beq.n	80011b8 <main+0x1f0>
			  TIM1->CNT = printDD*4;
 80011ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b0:	009a      	lsls	r2, r3, #2
 80011b2:	4b24      	ldr	r3, [pc, #144]	; (8001244 <main+0x27c>)
 80011b4:	625a      	str	r2, [r3, #36]	; 0x24
 80011b6:	e003      	b.n	80011c0 <main+0x1f8>
		  		  }else{
		  			TIM1->CNT =freq*4;
 80011b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011ba:	009a      	lsls	r2, r3, #2
 80011bc:	4b21      	ldr	r3, [pc, #132]	; (8001244 <main+0x27c>)
 80011be:	625a      	str	r2, [r3, #36]	; 0x24
		  		  }
	  }

	  int EncVal = TIM1->CNT;
 80011c0:	4b20      	ldr	r3, [pc, #128]	; (8001244 <main+0x27c>)
 80011c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c4:	61fb      	str	r3, [r7, #28]
//	  	  }

	  //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // PORTA, PA5


	  if(press == true){
 80011c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f000 823a 	beq.w	8001644 <main+0x67c>
		  mess = EncVal/4;
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	da00      	bge.n	80011d8 <main+0x210>
 80011d6:	3303      	adds	r3, #3
 80011d8:	109b      	asrs	r3, r3, #2
 80011da:	ee07 3a90 	vmov	s15, r3
 80011de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		  //duty = refactorScale(mess, 1, 100, 1, 180);
		  //int mess2 = EncVal/4;
		  //duty = (100*(printDD/(freq)));
		  //duty = duty%200;

		  duty = ((mess/freq)*100);
 80011e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011e8:	ee07 3a90 	vmov	s15, r3
 80011ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011f0:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80011f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011f8:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001248 <main+0x280>
 80011fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001200:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001204:	ee17 3a90 	vmov	r3, s15
 8001208:	63fb      	str	r3, [r7, #60]	; 0x3c
		  		  if (duty >100){
 800120a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800120c:	2b64      	cmp	r3, #100	; 0x64
 800120e:	dd1d      	ble.n	800124c <main+0x284>
		  			  duty = 99;
 8001210:	2363      	movs	r3, #99	; 0x63
 8001212:	63fb      	str	r3, [r7, #60]	; 0x3c
		  			  //htim10.Instance->CCR1 = 1;
		  			TIM1->CNT = 1;
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <main+0x27c>)
 8001216:	2201      	movs	r2, #1
 8001218:	625a      	str	r2, [r3, #36]	; 0x24
 800121a:	e020      	b.n	800125e <main+0x296>
 800121c:	20000210 	.word	0x20000210
 8001220:	20000250 	.word	0x20000250
 8001224:	42200000 	.word	0x42200000
 8001228:	00014820 	.word	0x00014820
 800122c:	20000000 	.word	0x20000000
 8001230:	08006dd8 	.word	0x08006dd8
 8001234:	08006df0 	.word	0x08006df0
 8001238:	08006e08 	.word	0x08006e08
 800123c:	08006e10 	.word	0x08006e10
 8001240:	40020800 	.word	0x40020800
 8001244:	40010000 	.word	0x40010000
 8001248:	42c80000 	.word	0x42c80000
		  		  }else{

		  			  htim10.Instance->CCR1 = mess;
 800124c:	4bda      	ldr	r3, [pc, #872]	; (80015b8 <main+0x5f0>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001258:	ee17 2a90 	vmov	r2, s15
 800125c:	635a      	str	r2, [r3, #52]	; 0x34
		  		  }

		  //

		  //UPPER LINES
		  ST7735_FillRectangle(10, 60, duty*0.92, 1, ST7735_WHITE);
 800125e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001260:	f7ff f980 	bl	8000564 <__aeabi_i2d>
 8001264:	a3ce      	add	r3, pc, #824	; (adr r3, 80015a0 <main+0x5d8>)
 8001266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126a:	f7ff f9e5 	bl	8000638 <__aeabi_dmul>
 800126e:	4603      	mov	r3, r0
 8001270:	460c      	mov	r4, r1
 8001272:	4618      	mov	r0, r3
 8001274:	4621      	mov	r1, r4
 8001276:	f7ff fcb7 	bl	8000be8 <__aeabi_d2uiz>
 800127a:	4603      	mov	r3, r0
 800127c:	b29a      	uxth	r2, r3
 800127e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	2301      	movs	r3, #1
 8001286:	213c      	movs	r1, #60	; 0x3c
 8001288:	200a      	movs	r0, #10
 800128a:	f000 fe47 	bl	8001f1c <ST7735_FillRectangle>
		  ST7735_FillRectangle(11+(duty*0.92), 60, 95-(duty*0.92) , 1, ST7735_BLACK);
 800128e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001290:	f7ff f968 	bl	8000564 <__aeabi_i2d>
 8001294:	a3c2      	add	r3, pc, #776	; (adr r3, 80015a0 <main+0x5d8>)
 8001296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129a:	f7ff f9cd 	bl	8000638 <__aeabi_dmul>
 800129e:	4603      	mov	r3, r0
 80012a0:	460c      	mov	r4, r1
 80012a2:	4618      	mov	r0, r3
 80012a4:	4621      	mov	r1, r4
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	4bc4      	ldr	r3, [pc, #784]	; (80015bc <main+0x5f4>)
 80012ac:	f7ff f80e 	bl	80002cc <__adddf3>
 80012b0:	4603      	mov	r3, r0
 80012b2:	460c      	mov	r4, r1
 80012b4:	4618      	mov	r0, r3
 80012b6:	4621      	mov	r1, r4
 80012b8:	f7ff fc96 	bl	8000be8 <__aeabi_d2uiz>
 80012bc:	4603      	mov	r3, r0
 80012be:	b29c      	uxth	r4, r3
 80012c0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80012c2:	f7ff f94f 	bl	8000564 <__aeabi_i2d>
 80012c6:	a3b6      	add	r3, pc, #728	; (adr r3, 80015a0 <main+0x5d8>)
 80012c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012cc:	f7ff f9b4 	bl	8000638 <__aeabi_dmul>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	a1b4      	add	r1, pc, #720	; (adr r1, 80015a8 <main+0x5e0>)
 80012d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012da:	f7fe fff5 	bl	80002c8 <__aeabi_dsub>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4610      	mov	r0, r2
 80012e4:	4619      	mov	r1, r3
 80012e6:	f7ff fc7f 	bl	8000be8 <__aeabi_d2uiz>
 80012ea:	4603      	mov	r3, r0
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	2300      	movs	r3, #0
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	2301      	movs	r3, #1
 80012f4:	213c      	movs	r1, #60	; 0x3c
 80012f6:	4620      	mov	r0, r4
 80012f8:	f000 fe10 	bl	8001f1c <ST7735_FillRectangle>
		  //DOWN LINES

		  ST7735_FillRectangle(11+(duty*0.92), 100, 95-(duty*0.92), 1, ST7735_WHITE);
 80012fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80012fe:	f7ff f931 	bl	8000564 <__aeabi_i2d>
 8001302:	a3a7      	add	r3, pc, #668	; (adr r3, 80015a0 <main+0x5d8>)
 8001304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001308:	f7ff f996 	bl	8000638 <__aeabi_dmul>
 800130c:	4603      	mov	r3, r0
 800130e:	460c      	mov	r4, r1
 8001310:	4618      	mov	r0, r3
 8001312:	4621      	mov	r1, r4
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	4ba8      	ldr	r3, [pc, #672]	; (80015bc <main+0x5f4>)
 800131a:	f7fe ffd7 	bl	80002cc <__adddf3>
 800131e:	4603      	mov	r3, r0
 8001320:	460c      	mov	r4, r1
 8001322:	4618      	mov	r0, r3
 8001324:	4621      	mov	r1, r4
 8001326:	f7ff fc5f 	bl	8000be8 <__aeabi_d2uiz>
 800132a:	4603      	mov	r3, r0
 800132c:	b29c      	uxth	r4, r3
 800132e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001330:	f7ff f918 	bl	8000564 <__aeabi_i2d>
 8001334:	a39a      	add	r3, pc, #616	; (adr r3, 80015a0 <main+0x5d8>)
 8001336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133a:	f7ff f97d 	bl	8000638 <__aeabi_dmul>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	a199      	add	r1, pc, #612	; (adr r1, 80015a8 <main+0x5e0>)
 8001344:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001348:	f7fe ffbe 	bl	80002c8 <__aeabi_dsub>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f7ff fc48 	bl	8000be8 <__aeabi_d2uiz>
 8001358:	4603      	mov	r3, r0
 800135a:	b29a      	uxth	r2, r3
 800135c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	2301      	movs	r3, #1
 8001364:	2164      	movs	r1, #100	; 0x64
 8001366:	4620      	mov	r0, r4
 8001368:	f000 fdd8 	bl	8001f1c <ST7735_FillRectangle>
		  ST7735_FillRectangle(10, 100, duty*0.92, 1, ST7735_BLACK);
 800136c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800136e:	f7ff f8f9 	bl	8000564 <__aeabi_i2d>
 8001372:	a38b      	add	r3, pc, #556	; (adr r3, 80015a0 <main+0x5d8>)
 8001374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001378:	f7ff f95e 	bl	8000638 <__aeabi_dmul>
 800137c:	4603      	mov	r3, r0
 800137e:	460c      	mov	r4, r1
 8001380:	4618      	mov	r0, r3
 8001382:	4621      	mov	r1, r4
 8001384:	f7ff fc30 	bl	8000be8 <__aeabi_d2uiz>
 8001388:	4603      	mov	r3, r0
 800138a:	b29a      	uxth	r2, r3
 800138c:	2300      	movs	r3, #0
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	2301      	movs	r3, #1
 8001392:	2164      	movs	r1, #100	; 0x64
 8001394:	200a      	movs	r0, #10
 8001396:	f000 fdc1 	bl	8001f1c <ST7735_FillRectangle>
		  //ST7735_FillRectangle(10, 110, duty*0.9, 1, ST7735_BLACK);
		 // ST7735_FillRectangle(11+(duty*0.9), 70, 95-(duty*0.9) , 1, ST7735_WHITE);

		  //VERTICAL LINE
		  ST7735_FillRectangle(10+(duty*0.92), 60, 1, 40,ST7735_WHITE);
 800139a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800139c:	f7ff f8e2 	bl	8000564 <__aeabi_i2d>
 80013a0:	a37f      	add	r3, pc, #508	; (adr r3, 80015a0 <main+0x5d8>)
 80013a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a6:	f7ff f947 	bl	8000638 <__aeabi_dmul>
 80013aa:	4603      	mov	r3, r0
 80013ac:	460c      	mov	r4, r1
 80013ae:	4618      	mov	r0, r3
 80013b0:	4621      	mov	r1, r4
 80013b2:	f04f 0200 	mov.w	r2, #0
 80013b6:	4b82      	ldr	r3, [pc, #520]	; (80015c0 <main+0x5f8>)
 80013b8:	f7fe ff88 	bl	80002cc <__adddf3>
 80013bc:	4603      	mov	r3, r0
 80013be:	460c      	mov	r4, r1
 80013c0:	4618      	mov	r0, r3
 80013c2:	4621      	mov	r1, r4
 80013c4:	f7ff fc10 	bl	8000be8 <__aeabi_d2uiz>
 80013c8:	4603      	mov	r3, r0
 80013ca:	b298      	uxth	r0, r3
 80013cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	2328      	movs	r3, #40	; 0x28
 80013d4:	2201      	movs	r2, #1
 80013d6:	213c      	movs	r1, #60	; 0x3c
 80013d8:	f000 fda0 	bl	8001f1c <ST7735_FillRectangle>
		  ST7735_FillRectangle(9+(duty*0.92), 61, 1, 39,ST7735_BLACK);
 80013dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80013de:	f7ff f8c1 	bl	8000564 <__aeabi_i2d>
 80013e2:	a36f      	add	r3, pc, #444	; (adr r3, 80015a0 <main+0x5d8>)
 80013e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e8:	f7ff f926 	bl	8000638 <__aeabi_dmul>
 80013ec:	4603      	mov	r3, r0
 80013ee:	460c      	mov	r4, r1
 80013f0:	4618      	mov	r0, r3
 80013f2:	4621      	mov	r1, r4
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	4b72      	ldr	r3, [pc, #456]	; (80015c4 <main+0x5fc>)
 80013fa:	f7fe ff67 	bl	80002cc <__adddf3>
 80013fe:	4603      	mov	r3, r0
 8001400:	460c      	mov	r4, r1
 8001402:	4618      	mov	r0, r3
 8001404:	4621      	mov	r1, r4
 8001406:	f7ff fbef 	bl	8000be8 <__aeabi_d2uiz>
 800140a:	4603      	mov	r3, r0
 800140c:	b298      	uxth	r0, r3
 800140e:	2300      	movs	r3, #0
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	2327      	movs	r3, #39	; 0x27
 8001414:	2201      	movs	r2, #1
 8001416:	213d      	movs	r1, #61	; 0x3d
 8001418:	f000 fd80 	bl	8001f1c <ST7735_FillRectangle>
		  //ST7735_FillRectangle(11+(duty*0.92), 71, 1, 39,ST7735_BLACK);
		  //ST7735_FillRectangle(9+(duty*0.94), 71, 1, 39,ST7735_BLACK);
		  ST7735_FillRectangle(11+(duty*0.94), 61, 1, 39,ST7735_BLACK);
 800141c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800141e:	f7ff f8a1 	bl	8000564 <__aeabi_i2d>
 8001422:	a363      	add	r3, pc, #396	; (adr r3, 80015b0 <main+0x5e8>)
 8001424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001428:	f7ff f906 	bl	8000638 <__aeabi_dmul>
 800142c:	4603      	mov	r3, r0
 800142e:	460c      	mov	r4, r1
 8001430:	4618      	mov	r0, r3
 8001432:	4621      	mov	r1, r4
 8001434:	f04f 0200 	mov.w	r2, #0
 8001438:	4b60      	ldr	r3, [pc, #384]	; (80015bc <main+0x5f4>)
 800143a:	f7fe ff47 	bl	80002cc <__adddf3>
 800143e:	4603      	mov	r3, r0
 8001440:	460c      	mov	r4, r1
 8001442:	4618      	mov	r0, r3
 8001444:	4621      	mov	r1, r4
 8001446:	f7ff fbcf 	bl	8000be8 <__aeabi_d2uiz>
 800144a:	4603      	mov	r3, r0
 800144c:	b298      	uxth	r0, r3
 800144e:	2300      	movs	r3, #0
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	2327      	movs	r3, #39	; 0x27
 8001454:	2201      	movs	r2, #1
 8001456:	213d      	movs	r1, #61	; 0x3d
 8001458:	f000 fd60 	bl	8001f1c <ST7735_FillRectangle>

		  //ST7735_FillRectangle(9+(duty*0.92), 71, 1, 39,ST7735_BLACK);

		  //ST7735_FillRectangle(11+(duty*0.95), 71, 1, 39,ST7735_BLACK);
		  ST7735_FillRectangle(101, 61, 2, 39,ST7735_BLACK);
 800145c:	2300      	movs	r3, #0
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	2327      	movs	r3, #39	; 0x27
 8001462:	2202      	movs	r2, #2
 8001464:	213d      	movs	r1, #61	; 0x3d
 8001466:	2065      	movs	r0, #101	; 0x65
 8001468:	f000 fd58 	bl	8001f1c <ST7735_FillRectangle>
		  ST7735_FillRectangle(10, 60, 1, 40,ST7735_WHITE );
 800146c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	2328      	movs	r3, #40	; 0x28
 8001474:	2201      	movs	r2, #1
 8001476:	213c      	movs	r1, #60	; 0x3c
 8001478:	200a      	movs	r0, #10
 800147a:	f000 fd4f 	bl	8001f1c <ST7735_FillRectangle>
		//  ST7735_FillRectangle(55, 110, 50, 1, ST7735_WHITE);


		  //Time
		  //ST7735_FillRectangle(10+(duty*0.92), 115, 45, 1, ST7735_CYAN);
		  ST7735_FillRectangle(10, 105, duty*0.92, 1, ST7735_CYAN);
 800147e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001480:	f7ff f870 	bl	8000564 <__aeabi_i2d>
 8001484:	a346      	add	r3, pc, #280	; (adr r3, 80015a0 <main+0x5d8>)
 8001486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148a:	f7ff f8d5 	bl	8000638 <__aeabi_dmul>
 800148e:	4603      	mov	r3, r0
 8001490:	460c      	mov	r4, r1
 8001492:	4618      	mov	r0, r3
 8001494:	4621      	mov	r1, r4
 8001496:	f7ff fba7 	bl	8000be8 <__aeabi_d2uiz>
 800149a:	4603      	mov	r3, r0
 800149c:	b29a      	uxth	r2, r3
 800149e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	2301      	movs	r3, #1
 80014a6:	2169      	movs	r1, #105	; 0x69
 80014a8:	200a      	movs	r0, #10
 80014aa:	f000 fd37 	bl	8001f1c <ST7735_FillRectangle>
		  //ST7735_FillRectangle(55, 113, 1, 4, ST7735_CYAN);
		  ST7735_FillRectangle(10+(duty*0.92), 103, 1,4,ST7735_CYAN);
 80014ae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80014b0:	f7ff f858 	bl	8000564 <__aeabi_i2d>
 80014b4:	a33a      	add	r3, pc, #232	; (adr r3, 80015a0 <main+0x5d8>)
 80014b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ba:	f7ff f8bd 	bl	8000638 <__aeabi_dmul>
 80014be:	4603      	mov	r3, r0
 80014c0:	460c      	mov	r4, r1
 80014c2:	4618      	mov	r0, r3
 80014c4:	4621      	mov	r1, r4
 80014c6:	f04f 0200 	mov.w	r2, #0
 80014ca:	4b3d      	ldr	r3, [pc, #244]	; (80015c0 <main+0x5f8>)
 80014cc:	f7fe fefe 	bl	80002cc <__adddf3>
 80014d0:	4603      	mov	r3, r0
 80014d2:	460c      	mov	r4, r1
 80014d4:	4618      	mov	r0, r3
 80014d6:	4621      	mov	r1, r4
 80014d8:	f7ff fb86 	bl	8000be8 <__aeabi_d2uiz>
 80014dc:	4603      	mov	r3, r0
 80014de:	b298      	uxth	r0, r3
 80014e0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	2304      	movs	r3, #4
 80014e8:	2201      	movs	r2, #1
 80014ea:	2167      	movs	r1, #103	; 0x67
 80014ec:	f000 fd16 	bl	8001f1c <ST7735_FillRectangle>
		  ST7735_FillRectangle(9+(duty*0.92), 103, 1, 4,ST7735_BLACK);
 80014f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80014f2:	f7ff f837 	bl	8000564 <__aeabi_i2d>
 80014f6:	a32a      	add	r3, pc, #168	; (adr r3, 80015a0 <main+0x5d8>)
 80014f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fc:	f7ff f89c 	bl	8000638 <__aeabi_dmul>
 8001500:	4603      	mov	r3, r0
 8001502:	460c      	mov	r4, r1
 8001504:	4618      	mov	r0, r3
 8001506:	4621      	mov	r1, r4
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	4b2d      	ldr	r3, [pc, #180]	; (80015c4 <main+0x5fc>)
 800150e:	f7fe fedd 	bl	80002cc <__adddf3>
 8001512:	4603      	mov	r3, r0
 8001514:	460c      	mov	r4, r1
 8001516:	4618      	mov	r0, r3
 8001518:	4621      	mov	r1, r4
 800151a:	f7ff fb65 	bl	8000be8 <__aeabi_d2uiz>
 800151e:	4603      	mov	r3, r0
 8001520:	b298      	uxth	r0, r3
 8001522:	2300      	movs	r3, #0
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	2304      	movs	r3, #4
 8001528:	2201      	movs	r2, #1
 800152a:	2167      	movs	r1, #103	; 0x67
 800152c:	f000 fcf6 	bl	8001f1c <ST7735_FillRectangle>
		  ST7735_FillRectangle(11+(duty*0.92), 103, 1, 4,ST7735_BLACK);
 8001530:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001532:	f7ff f817 	bl	8000564 <__aeabi_i2d>
 8001536:	a31a      	add	r3, pc, #104	; (adr r3, 80015a0 <main+0x5d8>)
 8001538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153c:	f7ff f87c 	bl	8000638 <__aeabi_dmul>
 8001540:	4603      	mov	r3, r0
 8001542:	460c      	mov	r4, r1
 8001544:	4618      	mov	r0, r3
 8001546:	4621      	mov	r1, r4
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <main+0x5f4>)
 800154e:	f7fe febd 	bl	80002cc <__adddf3>
 8001552:	4603      	mov	r3, r0
 8001554:	460c      	mov	r4, r1
 8001556:	4618      	mov	r0, r3
 8001558:	4621      	mov	r1, r4
 800155a:	f7ff fb45 	bl	8000be8 <__aeabi_d2uiz>
 800155e:	4603      	mov	r3, r0
 8001560:	b298      	uxth	r0, r3
 8001562:	2300      	movs	r3, #0
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	2304      	movs	r3, #4
 8001568:	2201      	movs	r2, #1
 800156a:	2167      	movs	r1, #103	; 0x67
 800156c:	f000 fcd6 	bl	8001f1c <ST7735_FillRectangle>

		  ST7735_FillRectangle(102, 103, 2, 4,ST7735_BLACK);
 8001570:	2300      	movs	r3, #0
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	2304      	movs	r3, #4
 8001576:	2202      	movs	r2, #2
 8001578:	2167      	movs	r1, #103	; 0x67
 800157a:	2066      	movs	r0, #102	; 0x66
 800157c:	f000 fcce 	bl	8001f1c <ST7735_FillRectangle>

		  ST7735_FillRectangle(10, 103, 1, 4, ST7735_CYAN);
 8001580:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	2304      	movs	r3, #4
 8001588:	2201      	movs	r2, #1
 800158a:	2167      	movs	r1, #103	; 0x67
 800158c:	200a      	movs	r0, #10
 800158e:	f000 fcc5 	bl	8001f1c <ST7735_FillRectangle>

		  ST7735_FillRectangle(11+(duty*0.92), 105, 95-(duty*0.92), 1, ST7735_BLACK);
 8001592:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001594:	f7fe ffe6 	bl	8000564 <__aeabi_i2d>
 8001598:	e016      	b.n	80015c8 <main+0x600>
 800159a:	bf00      	nop
 800159c:	f3af 8000 	nop.w
 80015a0:	d70a3d71 	.word	0xd70a3d71
 80015a4:	3fed70a3 	.word	0x3fed70a3
 80015a8:	00000000 	.word	0x00000000
 80015ac:	4057c000 	.word	0x4057c000
 80015b0:	e147ae14 	.word	0xe147ae14
 80015b4:	3fee147a 	.word	0x3fee147a
 80015b8:	20000210 	.word	0x20000210
 80015bc:	40260000 	.word	0x40260000
 80015c0:	40240000 	.word	0x40240000
 80015c4:	40220000 	.word	0x40220000
 80015c8:	a36b      	add	r3, pc, #428	; (adr r3, 8001778 <main+0x7b0>)
 80015ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ce:	f7ff f833 	bl	8000638 <__aeabi_dmul>
 80015d2:	4603      	mov	r3, r0
 80015d4:	460c      	mov	r4, r1
 80015d6:	4618      	mov	r0, r3
 80015d8:	4621      	mov	r1, r4
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	4b6c      	ldr	r3, [pc, #432]	; (8001790 <main+0x7c8>)
 80015e0:	f7fe fe74 	bl	80002cc <__adddf3>
 80015e4:	4603      	mov	r3, r0
 80015e6:	460c      	mov	r4, r1
 80015e8:	4618      	mov	r0, r3
 80015ea:	4621      	mov	r1, r4
 80015ec:	f7ff fafc 	bl	8000be8 <__aeabi_d2uiz>
 80015f0:	4603      	mov	r3, r0
 80015f2:	b29c      	uxth	r4, r3
 80015f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80015f6:	f7fe ffb5 	bl	8000564 <__aeabi_i2d>
 80015fa:	a35f      	add	r3, pc, #380	; (adr r3, 8001778 <main+0x7b0>)
 80015fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001600:	f7ff f81a 	bl	8000638 <__aeabi_dmul>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	a15d      	add	r1, pc, #372	; (adr r1, 8001780 <main+0x7b8>)
 800160a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800160e:	f7fe fe5b 	bl	80002c8 <__aeabi_dsub>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	f7ff fae5 	bl	8000be8 <__aeabi_d2uiz>
 800161e:	4603      	mov	r3, r0
 8001620:	b29a      	uxth	r2, r3
 8001622:	2300      	movs	r3, #0
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	2301      	movs	r3, #1
 8001628:	2169      	movs	r1, #105	; 0x69
 800162a:	4620      	mov	r0, r4
 800162c:	f000 fc76 	bl	8001f1c <ST7735_FillRectangle>


		  //Final line
		  ST7735_FillRectangle(105, 60, 1, 40,ST7735_WHITE );
 8001630:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	2328      	movs	r3, #40	; 0x28
 8001638:	2201      	movs	r2, #1
 800163a:	213c      	movs	r1, #60	; 0x3c
 800163c:	2069      	movs	r0, #105	; 0x69
 800163e:	f000 fc6d 	bl	8001f1c <ST7735_FillRectangle>
 8001642:	e009      	b.n	8001658 <main+0x690>



	  }else {

		  freq = EncVal/4;
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	2b00      	cmp	r3, #0
 8001648:	da00      	bge.n	800164c <main+0x684>
 800164a:	3303      	adds	r3, #3
 800164c:	109b      	asrs	r3, r3, #2
 800164e:	63bb      	str	r3, [r7, #56]	; 0x38
		  htim10.Instance->ARR = freq ;
 8001650:	4b50      	ldr	r3, [pc, #320]	; (8001794 <main+0x7cc>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001656:	62da      	str	r2, [r3, #44]	; 0x2c

//	  HAL_Delay(500);
	  //nLoop++;
	  //itoa(EncVal,snum,10);
	  //int i = 247593;
	  realFreq = 84000.0/((htim10.Instance->ARR)+1);
 8001658:	4b4e      	ldr	r3, [pc, #312]	; (8001794 <main+0x7cc>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165e:	3301      	adds	r3, #1
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe ff6f 	bl	8000544 <__aeabi_ui2d>
 8001666:	4603      	mov	r3, r0
 8001668:	460c      	mov	r4, r1
 800166a:	461a      	mov	r2, r3
 800166c:	4623      	mov	r3, r4
 800166e:	a146      	add	r1, pc, #280	; (adr r1, 8001788 <main+0x7c0>)
 8001670:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001674:	f7ff f90a 	bl	800088c <__aeabi_ddiv>
 8001678:	4603      	mov	r3, r0
 800167a:	460c      	mov	r4, r1
 800167c:	4618      	mov	r0, r3
 800167e:	4621      	mov	r1, r4
 8001680:	f7ff fad2 	bl	8000c28 <__aeabi_d2f>
 8001684:	4603      	mov	r3, r0
 8001686:	623b      	str	r3, [r7, #32]

	  char strEnc[6];
	  //print("{:0>8.4f}".format(2.02))
	  sprintf(strEnc, "%07.1f", realFreq);
 8001688:	6a38      	ldr	r0, [r7, #32]
 800168a:	f7fe ff7d 	bl	8000588 <__aeabi_f2d>
 800168e:	4603      	mov	r3, r0
 8001690:	460c      	mov	r4, r1
 8001692:	f107 0014 	add.w	r0, r7, #20
 8001696:	461a      	mov	r2, r3
 8001698:	4623      	mov	r3, r4
 800169a:	493f      	ldr	r1, [pc, #252]	; (8001798 <main+0x7d0>)
 800169c:	f003 fec8 	bl	8005430 <siprintf>
	  //sprintf(strEnc,realFreq);
	  //"{:0>6.2f}".format(strEnc);
	  ST7735_WriteString(80, 10, strEnc, Font_7x10,
 80016a0:	4b3e      	ldr	r3, [pc, #248]	; (800179c <main+0x7d4>)
 80016a2:	f107 0114 	add.w	r1, r7, #20
 80016a6:	221f      	movs	r2, #31
 80016a8:	9202      	str	r2, [sp, #8]
 80016aa:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80016ae:	9201      	str	r2, [sp, #4]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	9200      	str	r2, [sp, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	460a      	mov	r2, r1
 80016b8:	210a      	movs	r1, #10
 80016ba:	2050      	movs	r0, #80	; 0x50
 80016bc:	f000 fbe4 	bl	8001e88 <ST7735_WriteString>
	  	                         ST7735_CYAN, ST7735_BLUE);
	  cycle = ((mess/freq)*100);
 80016c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016c2:	ee07 3a90 	vmov	s15, r3
 80016c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ca:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80016ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016d2:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80017a0 <main+0x7d8>
 80016d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016da:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	  cycle = fmodf(cycle,100);
 80016de:	eddf 0a30 	vldr	s1, [pc, #192]	; 80017a0 <main+0x7d8>
 80016e2:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80016e6:	f005 fa83 	bl	8006bf0 <fmodf>
 80016ea:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28

	  char strCycle[6];
	  sprintf(strCycle, "%0.2f", cycle);
 80016ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80016f0:	f7fe ff4a 	bl	8000588 <__aeabi_f2d>
 80016f4:	4603      	mov	r3, r0
 80016f6:	460c      	mov	r4, r1
 80016f8:	f107 000c 	add.w	r0, r7, #12
 80016fc:	461a      	mov	r2, r3
 80016fe:	4623      	mov	r3, r4
 8001700:	4928      	ldr	r1, [pc, #160]	; (80017a4 <main+0x7dc>)
 8001702:	f003 fe95 	bl	8005430 <siprintf>
	  ST7735_WriteString(75, 118, strCycle, Font_7x10, ST7735_CYAN, ST7735_BLACK);
 8001706:	4b25      	ldr	r3, [pc, #148]	; (800179c <main+0x7d4>)
 8001708:	f107 010c 	add.w	r1, r7, #12
 800170c:	2200      	movs	r2, #0
 800170e:	9202      	str	r2, [sp, #8]
 8001710:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001714:	9201      	str	r2, [sp, #4]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	9200      	str	r2, [sp, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	460a      	mov	r2, r1
 800171e:	2176      	movs	r1, #118	; 0x76
 8001720:	204b      	movs	r0, #75	; 0x4b
 8001722:	f000 fbb1 	bl	8001e88 <ST7735_WriteString>


	  pwidth =((mess)/84000)*1000000;
 8001726:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800172a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80017a8 <main+0x7e0>
 800172e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001732:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80017ac <main+0x7e4>
 8001736:	ee67 7a87 	vmul.f32	s15, s15, s14
 800173a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	 char stringCCR[7];

	 sprintf(stringCCR, "%07.2f", pwidth);
 800173e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001740:	f7fe ff22 	bl	8000588 <__aeabi_f2d>
 8001744:	4603      	mov	r3, r0
 8001746:	460c      	mov	r4, r1
 8001748:	1d38      	adds	r0, r7, #4
 800174a:	461a      	mov	r2, r3
 800174c:	4623      	mov	r3, r4
 800174e:	4918      	ldr	r1, [pc, #96]	; (80017b0 <main+0x7e8>)
 8001750:	f003 fe6e 	bl	8005430 <siprintf>
	 ST7735_WriteString(80, 25, stringCCR, Font_7x10,
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <main+0x7d4>)
 8001756:	1d39      	adds	r1, r7, #4
 8001758:	221f      	movs	r2, #31
 800175a:	9202      	str	r2, [sp, #8]
 800175c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001760:	9201      	str	r2, [sp, #4]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	9200      	str	r2, [sp, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	460a      	mov	r2, r1
 800176a:	2119      	movs	r1, #25
 800176c:	2050      	movs	r0, #80	; 0x50
 800176e:	f000 fb8b 	bl	8001e88 <ST7735_WriteString>
  {
 8001772:	e4f5      	b.n	8001160 <main+0x198>
 8001774:	f3af 8000 	nop.w
 8001778:	d70a3d71 	.word	0xd70a3d71
 800177c:	3fed70a3 	.word	0x3fed70a3
 8001780:	00000000 	.word	0x00000000
 8001784:	4057c000 	.word	0x4057c000
 8001788:	00000000 	.word	0x00000000
 800178c:	40f48200 	.word	0x40f48200
 8001790:	40260000 	.word	0x40260000
 8001794:	20000210 	.word	0x20000210
 8001798:	08006e20 	.word	0x08006e20
 800179c:	20000000 	.word	0x20000000
 80017a0:	42c80000 	.word	0x42c80000
 80017a4:	08006e28 	.word	0x08006e28
 80017a8:	47a41000 	.word	0x47a41000
 80017ac:	49742400 	.word	0x49742400
 80017b0:	08006e30 	.word	0x08006e30

080017b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b094      	sub	sp, #80	; 0x50
 80017b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ba:	f107 031c 	add.w	r3, r7, #28
 80017be:	2234      	movs	r2, #52	; 0x34
 80017c0:	2100      	movs	r1, #0
 80017c2:	4618      	mov	r0, r3
 80017c4:	f003 f9d0 	bl	8004b68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017c8:	f107 0308 	add.w	r3, r7, #8
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d8:	2300      	movs	r3, #0
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	4b2a      	ldr	r3, [pc, #168]	; (8001888 <SystemClock_Config+0xd4>)
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	4a29      	ldr	r2, [pc, #164]	; (8001888 <SystemClock_Config+0xd4>)
 80017e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e6:	6413      	str	r3, [r2, #64]	; 0x40
 80017e8:	4b27      	ldr	r3, [pc, #156]	; (8001888 <SystemClock_Config+0xd4>)
 80017ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80017f4:	2300      	movs	r3, #0
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	4b24      	ldr	r3, [pc, #144]	; (800188c <SystemClock_Config+0xd8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001800:	4a22      	ldr	r2, [pc, #136]	; (800188c <SystemClock_Config+0xd8>)
 8001802:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	4b20      	ldr	r3, [pc, #128]	; (800188c <SystemClock_Config+0xd8>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001810:	603b      	str	r3, [r7, #0]
 8001812:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001814:	2302      	movs	r3, #2
 8001816:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001818:	2301      	movs	r3, #1
 800181a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800181c:	2310      	movs	r3, #16
 800181e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001820:	2302      	movs	r3, #2
 8001822:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001824:	2300      	movs	r3, #0
 8001826:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001828:	2310      	movs	r3, #16
 800182a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800182c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001830:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001832:	2304      	movs	r3, #4
 8001834:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001836:	2302      	movs	r3, #2
 8001838:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800183a:	2302      	movs	r3, #2
 800183c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800183e:	f107 031c 	add.w	r3, r7, #28
 8001842:	4618      	mov	r0, r3
 8001844:	f001 fbde 	bl	8003004 <HAL_RCC_OscConfig>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800184e:	f000 f9a7 	bl	8001ba0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001852:	230f      	movs	r3, #15
 8001854:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001856:	2302      	movs	r3, #2
 8001858:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800185e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001862:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001864:	2300      	movs	r3, #0
 8001866:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001868:	f107 0308 	add.w	r3, r7, #8
 800186c:	2102      	movs	r1, #2
 800186e:	4618      	mov	r0, r3
 8001870:	f001 f90e 	bl	8002a90 <HAL_RCC_ClockConfig>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800187a:	f000 f991 	bl	8001ba0 <Error_Handler>
  }
}
 800187e:	bf00      	nop
 8001880:	3750      	adds	r7, #80	; 0x50
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40023800 	.word	0x40023800
 800188c:	40007000 	.word	0x40007000

08001890 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001894:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <MX_SPI1_Init+0x64>)
 8001896:	4a18      	ldr	r2, [pc, #96]	; (80018f8 <MX_SPI1_Init+0x68>)
 8001898:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800189a:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <MX_SPI1_Init+0x64>)
 800189c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018a2:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018ae:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018b4:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018ba:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018c2:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018c8:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018d4:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018dc:	220a      	movs	r2, #10
 80018de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018e0:	4804      	ldr	r0, [pc, #16]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018e2:	f001 fde9 	bl	80034b8 <HAL_SPI_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018ec:	f000 f958 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000290 	.word	0x20000290
 80018f8:	40013000 	.word	0x40013000

080018fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08c      	sub	sp, #48	; 0x30
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001902:	f107 030c 	add.w	r3, r7, #12
 8001906:	2224      	movs	r2, #36	; 0x24
 8001908:	2100      	movs	r1, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f003 f92c 	bl	8004b68 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001918:	4b22      	ldr	r3, [pc, #136]	; (80019a4 <MX_TIM1_Init+0xa8>)
 800191a:	4a23      	ldr	r2, [pc, #140]	; (80019a8 <MX_TIM1_Init+0xac>)
 800191c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800191e:	4b21      	ldr	r3, [pc, #132]	; (80019a4 <MX_TIM1_Init+0xa8>)
 8001920:	2200      	movs	r2, #0
 8001922:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001924:	4b1f      	ldr	r3, [pc, #124]	; (80019a4 <MX_TIM1_Init+0xa8>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 800192a:	4b1e      	ldr	r3, [pc, #120]	; (80019a4 <MX_TIM1_Init+0xa8>)
 800192c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001930:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001932:	4b1c      	ldr	r3, [pc, #112]	; (80019a4 <MX_TIM1_Init+0xa8>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001938:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <MX_TIM1_Init+0xa8>)
 800193a:	2200      	movs	r2, #0
 800193c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800193e:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <MX_TIM1_Init+0xa8>)
 8001940:	2200      	movs	r2, #0
 8001942:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001944:	2303      	movs	r3, #3
 8001946:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001948:	2300      	movs	r3, #0
 800194a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800194c:	2301      	movs	r3, #1
 800194e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001950:	2300      	movs	r3, #0
 8001952:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8001954:	2305      	movs	r3, #5
 8001956:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001958:	2300      	movs	r3, #0
 800195a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800195c:	2301      	movs	r3, #1
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001960:	2300      	movs	r3, #0
 8001962:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 5;
 8001964:	2305      	movs	r3, #5
 8001966:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	4619      	mov	r1, r3
 800196e:	480d      	ldr	r0, [pc, #52]	; (80019a4 <MX_TIM1_Init+0xa8>)
 8001970:	f002 f884 	bl	8003a7c <HAL_TIM_Encoder_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800197a:	f000 f911 	bl	8001ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800197e:	2300      	movs	r3, #0
 8001980:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001986:	1d3b      	adds	r3, r7, #4
 8001988:	4619      	mov	r1, r3
 800198a:	4806      	ldr	r0, [pc, #24]	; (80019a4 <MX_TIM1_Init+0xa8>)
 800198c:	f002 fc7c 	bl	8004288 <HAL_TIMEx_MasterConfigSynchronization>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001996:	f000 f903 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800199a:	bf00      	nop
 800199c:	3730      	adds	r7, #48	; 0x30
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000250 	.word	0x20000250
 80019a8:	40010000 	.word	0x40010000

080019ac <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80019b2:	1d3b      	adds	r3, r7, #4
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
 80019c0:	615a      	str	r2, [r3, #20]
 80019c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80019c4:	4b1e      	ldr	r3, [pc, #120]	; (8001a40 <MX_TIM10_Init+0x94>)
 80019c6:	4a1f      	ldr	r2, [pc, #124]	; (8001a44 <MX_TIM10_Init+0x98>)
 80019c8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1-1;
 80019ca:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <MX_TIM10_Init+0x94>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d0:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <MX_TIM10_Init+0x94>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 5000;
 80019d6:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <MX_TIM10_Init+0x94>)
 80019d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019dc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019de:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <MX_TIM10_Init+0x94>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e4:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <MX_TIM10_Init+0x94>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80019ea:	4815      	ldr	r0, [pc, #84]	; (8001a40 <MX_TIM10_Init+0x94>)
 80019ec:	f001 ffa8 	bl	8003940 <HAL_TIM_Base_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80019f6:	f000 f8d3 	bl	8001ba0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80019fa:	4811      	ldr	r0, [pc, #68]	; (8001a40 <MX_TIM10_Init+0x94>)
 80019fc:	f001 ffcb 	bl	8003996 <HAL_TIM_PWM_Init>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001a06:	f000 f8cb 	bl	8001ba0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a0a:	2360      	movs	r3, #96	; 0x60
 8001a0c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001a16:	2304      	movs	r3, #4
 8001a18:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a1a:	1d3b      	adds	r3, r7, #4
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4807      	ldr	r0, [pc, #28]	; (8001a40 <MX_TIM10_Init+0x94>)
 8001a22:	f002 f8f5 	bl	8003c10 <HAL_TIM_PWM_ConfigChannel>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001a2c:	f000 f8b8 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001a30:	4803      	ldr	r0, [pc, #12]	; (8001a40 <MX_TIM10_Init+0x94>)
 8001a32:	f000 fbd3 	bl	80021dc <HAL_TIM_MspPostInit>

}
 8001a36:	bf00      	nop
 8001a38:	3720      	adds	r7, #32
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000210 	.word	0x20000210
 8001a44:	40014400 	.word	0x40014400

08001a48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a4c:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a4e:	4a12      	ldr	r2, [pc, #72]	; (8001a98 <MX_USART2_UART_Init+0x50>)
 8001a50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a66:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a6c:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a6e:	220c      	movs	r2, #12
 8001a70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a72:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a7e:	4805      	ldr	r0, [pc, #20]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a80:	f002 fc7e 	bl	8004380 <HAL_UART_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a8a:	f000 f889 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	200002e8 	.word	0x200002e8
 8001a98:	40004400 	.word	0x40004400

08001a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	; 0x28
 8001aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa2:	f107 0314 	add.w	r3, r7, #20
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]
 8001aae:	60da      	str	r2, [r3, #12]
 8001ab0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	4b36      	ldr	r3, [pc, #216]	; (8001b90 <MX_GPIO_Init+0xf4>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a35      	ldr	r2, [pc, #212]	; (8001b90 <MX_GPIO_Init+0xf4>)
 8001abc:	f043 0304 	orr.w	r3, r3, #4
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4b33      	ldr	r3, [pc, #204]	; (8001b90 <MX_GPIO_Init+0xf4>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	613b      	str	r3, [r7, #16]
 8001acc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	4b2f      	ldr	r3, [pc, #188]	; (8001b90 <MX_GPIO_Init+0xf4>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a2e      	ldr	r2, [pc, #184]	; (8001b90 <MX_GPIO_Init+0xf4>)
 8001ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b2c      	ldr	r3, [pc, #176]	; (8001b90 <MX_GPIO_Init+0xf4>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	4b28      	ldr	r3, [pc, #160]	; (8001b90 <MX_GPIO_Init+0xf4>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a27      	ldr	r2, [pc, #156]	; (8001b90 <MX_GPIO_Init+0xf4>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b25      	ldr	r3, [pc, #148]	; (8001b90 <MX_GPIO_Init+0xf4>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	4b21      	ldr	r3, [pc, #132]	; (8001b90 <MX_GPIO_Init+0xf4>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a20      	ldr	r2, [pc, #128]	; (8001b90 <MX_GPIO_Init+0xf4>)
 8001b10:	f043 0302 	orr.w	r3, r3, #2
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b1e      	ldr	r3, [pc, #120]	; (8001b90 <MX_GPIO_Init+0xf4>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_RESET);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2180      	movs	r1, #128	; 0x80
 8001b26:	481b      	ldr	r0, [pc, #108]	; (8001b94 <MX_GPIO_Init+0xf8>)
 8001b28:	f000 ff98 	bl	8002a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DC_Pin|CS_Pin, GPIO_PIN_RESET);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2160      	movs	r1, #96	; 0x60
 8001b30:	4819      	ldr	r0, [pc, #100]	; (8001b98 <MX_GPIO_Init+0xfc>)
 8001b32:	f000 ff93 	bl	8002a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b3c:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <MX_GPIO_Init+0x100>)
 8001b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4812      	ldr	r0, [pc, #72]	; (8001b94 <MX_GPIO_Init+0xf8>)
 8001b4c:	f000 fddc 	bl	8002708 <HAL_GPIO_Init>

  /*Configure GPIO pin : RES_Pin */
  GPIO_InitStruct.Pin = RES_Pin;
 8001b50:	2380      	movs	r3, #128	; 0x80
 8001b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b54:	2301      	movs	r3, #1
 8001b56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	4619      	mov	r1, r3
 8001b66:	480b      	ldr	r0, [pc, #44]	; (8001b94 <MX_GPIO_Init+0xf8>)
 8001b68:	f000 fdce 	bl	8002708 <HAL_GPIO_Init>

  /*Configure GPIO pins : DC_Pin CS_Pin */
  GPIO_InitStruct.Pin = DC_Pin|CS_Pin;
 8001b6c:	2360      	movs	r3, #96	; 0x60
 8001b6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b70:	2301      	movs	r3, #1
 8001b72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7c:	f107 0314 	add.w	r3, r7, #20
 8001b80:	4619      	mov	r1, r3
 8001b82:	4805      	ldr	r0, [pc, #20]	; (8001b98 <MX_GPIO_Init+0xfc>)
 8001b84:	f000 fdc0 	bl	8002708 <HAL_GPIO_Init>

}
 8001b88:	bf00      	nop
 8001b8a:	3728      	adds	r7, #40	; 0x28
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40020800 	.word	0x40020800
 8001b98:	40020400 	.word	0x40020400
 8001b9c:	10210000 	.word	0x10210000

08001ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2140      	movs	r1, #64	; 0x40
 8001bb8:	4802      	ldr	r0, [pc, #8]	; (8001bc4 <ST7735_Select+0x14>)
 8001bba:	f000 ff4f 	bl	8002a5c <HAL_GPIO_WritePin>
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40020400 	.word	0x40020400

08001bc8 <ST7735_Unselect>:

void ST7735_Unselect() {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8001bcc:	2201      	movs	r2, #1
 8001bce:	2140      	movs	r1, #64	; 0x40
 8001bd0:	4802      	ldr	r0, [pc, #8]	; (8001bdc <ST7735_Unselect+0x14>)
 8001bd2:	f000 ff43 	bl	8002a5c <HAL_GPIO_WritePin>
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40020400 	.word	0x40020400

08001be0 <ST7735_Reset>:

static void ST7735_Reset() {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8001be4:	2200      	movs	r2, #0
 8001be6:	2180      	movs	r1, #128	; 0x80
 8001be8:	4806      	ldr	r0, [pc, #24]	; (8001c04 <ST7735_Reset+0x24>)
 8001bea:	f000 ff37 	bl	8002a5c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001bee:	2005      	movs	r0, #5
 8001bf0:	f000 fc82 	bl	80024f8 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	2180      	movs	r1, #128	; 0x80
 8001bf8:	4802      	ldr	r0, [pc, #8]	; (8001c04 <ST7735_Reset+0x24>)
 8001bfa:	f000 ff2f 	bl	8002a5c <HAL_GPIO_WritePin>
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40020800 	.word	0x40020800

08001c08 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2120      	movs	r1, #32
 8001c16:	4807      	ldr	r0, [pc, #28]	; (8001c34 <ST7735_WriteCommand+0x2c>)
 8001c18:	f000 ff20 	bl	8002a5c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001c1c:	1df9      	adds	r1, r7, #7
 8001c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c22:	2201      	movs	r2, #1
 8001c24:	4804      	ldr	r0, [pc, #16]	; (8001c38 <ST7735_WriteCommand+0x30>)
 8001c26:	f001 fcab 	bl	8003580 <HAL_SPI_Transmit>
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40020400 	.word	0x40020400
 8001c38:	20000290 	.word	0x20000290

08001c3c <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001c46:	2201      	movs	r2, #1
 8001c48:	2120      	movs	r1, #32
 8001c4a:	4807      	ldr	r0, [pc, #28]	; (8001c68 <ST7735_WriteData+0x2c>)
 8001c4c:	f000 ff06 	bl	8002a5c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	f04f 33ff 	mov.w	r3, #4294967295
 8001c58:	6879      	ldr	r1, [r7, #4]
 8001c5a:	4804      	ldr	r0, [pc, #16]	; (8001c6c <ST7735_WriteData+0x30>)
 8001c5c:	f001 fc90 	bl	8003580 <HAL_SPI_Transmit>
}
 8001c60:	bf00      	nop
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40020400 	.word	0x40020400
 8001c6c:	20000290 	.word	0x20000290

08001c70 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	1c5a      	adds	r2, r3, #1
 8001c7c:	607a      	str	r2, [r7, #4]
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8001c82:	e034      	b.n	8001cee <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	607a      	str	r2, [r7, #4]
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8001c8e:	7afb      	ldrb	r3, [r7, #11]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff ffb9 	bl	8001c08 <ST7735_WriteCommand>

        numArgs = *addr++;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	1c5a      	adds	r2, r3, #1
 8001c9a:	607a      	str	r2, [r7, #4]
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001ca0:	7abb      	ldrb	r3, [r7, #10]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca8:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8001caa:	7abb      	ldrb	r3, [r7, #10]
 8001cac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cb0:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8001cb2:	7abb      	ldrb	r3, [r7, #10]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d008      	beq.n	8001cca <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001cb8:	7abb      	ldrb	r3, [r7, #10]
 8001cba:	4619      	mov	r1, r3
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff ffbd 	bl	8001c3c <ST7735_WriteData>
            addr += numArgs;
 8001cc2:	7abb      	ldrb	r3, [r7, #10]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001cca:	89bb      	ldrh	r3, [r7, #12]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d00e      	beq.n	8001cee <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	607a      	str	r2, [r7, #4]
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8001cda:	89bb      	ldrh	r3, [r7, #12]
 8001cdc:	2bff      	cmp	r3, #255	; 0xff
 8001cde:	d102      	bne.n	8001ce6 <ST7735_ExecuteCommandList+0x76>
 8001ce0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ce4:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8001ce6:	89bb      	ldrh	r3, [r7, #12]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f000 fc05 	bl	80024f8 <HAL_Delay>
    while(numCommands--) {
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	1e5a      	subs	r2, r3, #1
 8001cf2:	73fa      	strb	r2, [r7, #15]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1c5      	bne.n	8001c84 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8001cf8:	bf00      	nop
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8001d00:	b590      	push	{r4, r7, lr}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4604      	mov	r4, r0
 8001d08:	4608      	mov	r0, r1
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4623      	mov	r3, r4
 8001d10:	71fb      	strb	r3, [r7, #7]
 8001d12:	4603      	mov	r3, r0
 8001d14:	71bb      	strb	r3, [r7, #6]
 8001d16:	460b      	mov	r3, r1
 8001d18:	717b      	strb	r3, [r7, #5]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001d1e:	202a      	movs	r0, #42	; 0x2a
 8001d20:	f7ff ff72 	bl	8001c08 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8001d24:	2300      	movs	r3, #0
 8001d26:	733b      	strb	r3, [r7, #12]
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	737b      	strb	r3, [r7, #13]
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	73bb      	strb	r3, [r7, #14]
 8001d30:	797b      	ldrb	r3, [r7, #5]
 8001d32:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001d34:	f107 030c 	add.w	r3, r7, #12
 8001d38:	2104      	movs	r1, #4
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff ff7e 	bl	8001c3c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001d40:	202b      	movs	r0, #43	; 0x2b
 8001d42:	f7ff ff61 	bl	8001c08 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8001d46:	79bb      	ldrb	r3, [r7, #6]
 8001d48:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8001d4a:	793b      	ldrb	r3, [r7, #4]
 8001d4c:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001d4e:	f107 030c 	add.w	r3, r7, #12
 8001d52:	2104      	movs	r1, #4
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff71 	bl	8001c3c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001d5a:	202c      	movs	r0, #44	; 0x2c
 8001d5c:	f7ff ff54 	bl	8001c08 <ST7735_WriteCommand>
}
 8001d60:	bf00      	nop
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd90      	pop	{r4, r7, pc}

08001d68 <ST7735_Init>:

void ST7735_Init() {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
    ST7735_Select();
 8001d6c:	f7ff ff20 	bl	8001bb0 <ST7735_Select>
    ST7735_Reset();
 8001d70:	f7ff ff36 	bl	8001be0 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8001d74:	4806      	ldr	r0, [pc, #24]	; (8001d90 <ST7735_Init+0x28>)
 8001d76:	f7ff ff7b 	bl	8001c70 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8001d7a:	4806      	ldr	r0, [pc, #24]	; (8001d94 <ST7735_Init+0x2c>)
 8001d7c:	f7ff ff78 	bl	8001c70 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8001d80:	4805      	ldr	r0, [pc, #20]	; (8001d98 <ST7735_Init+0x30>)
 8001d82:	f7ff ff75 	bl	8001c70 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8001d86:	f7ff ff1f 	bl	8001bc8 <ST7735_Unselect>
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	080075a4 	.word	0x080075a4
 8001d94:	080075e0 	.word	0x080075e0
 8001d98:	080075f0 	.word	0x080075f0

08001d9c <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	b590      	push	{r4, r7, lr}
 8001da0:	b089      	sub	sp, #36	; 0x24
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	637b      	str	r3, [r7, #52]	; 0x34
 8001da6:	4603      	mov	r3, r0
 8001da8:	80fb      	strh	r3, [r7, #6]
 8001daa:	460b      	mov	r3, r1
 8001dac:	80bb      	strh	r3, [r7, #4]
 8001dae:	4613      	mov	r3, r2
 8001db0:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8001db2:	88fb      	ldrh	r3, [r7, #6]
 8001db4:	b2d8      	uxtb	r0, r3
 8001db6:	88bb      	ldrh	r3, [r7, #4]
 8001db8:	b2d9      	uxtb	r1, r3
 8001dba:	88fb      	ldrh	r3, [r7, #6]
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001dc2:	4413      	add	r3, r2
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	b2dc      	uxtb	r4, r3
 8001dca:	88bb      	ldrh	r3, [r7, #4]
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001dd2:	4413      	add	r3, r2
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	4622      	mov	r2, r4
 8001ddc:	f7ff ff90 	bl	8001d00 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001de0:	2300      	movs	r3, #0
 8001de2:	61fb      	str	r3, [r7, #28]
 8001de4:	e043      	b.n	8001e6e <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8001de6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001de8:	78fb      	ldrb	r3, [r7, #3]
 8001dea:	3b20      	subs	r3, #32
 8001dec:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001df0:	fb01 f303 	mul.w	r3, r1, r3
 8001df4:	4619      	mov	r1, r3
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	440b      	add	r3, r1
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	4413      	add	r3, r2
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001e02:	2300      	movs	r3, #0
 8001e04:	61bb      	str	r3, [r7, #24]
 8001e06:	e029      	b.n	8001e5c <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00e      	beq.n	8001e36 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001e18:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001e1a:	0a1b      	lsrs	r3, r3, #8
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	743b      	strb	r3, [r7, #16]
 8001e22:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001e28:	f107 0310 	add.w	r3, r7, #16
 8001e2c:	2102      	movs	r1, #2
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff ff04 	bl	8001c3c <ST7735_WriteData>
 8001e34:	e00f      	b.n	8001e56 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001e36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e3a:	0a1b      	lsrs	r3, r3, #8
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	733b      	strb	r3, [r7, #12]
 8001e42:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8001e4a:	f107 030c 	add.w	r3, r7, #12
 8001e4e:	2102      	movs	r1, #2
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff fef3 	bl	8001c3c <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	61bb      	str	r3, [r7, #24]
 8001e5c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001e60:	461a      	mov	r2, r3
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d3cf      	bcc.n	8001e08 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	61fb      	str	r3, [r7, #28]
 8001e6e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001e72:	461a      	mov	r2, r3
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d3b5      	bcc.n	8001de6 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8001e7a:	bf00      	nop
 8001e7c:	3724      	adds	r7, #36	; 0x24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001e84:	b002      	add	sp, #8
 8001e86:	4770      	bx	lr

08001e88 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001e88:	b082      	sub	sp, #8
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b086      	sub	sp, #24
 8001e8e:	af04      	add	r7, sp, #16
 8001e90:	603a      	str	r2, [r7, #0]
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	4603      	mov	r3, r0
 8001e96:	80fb      	strh	r3, [r7, #6]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8001e9c:	f7ff fe88 	bl	8001bb0 <ST7735_Select>

    while(*str) {
 8001ea0:	e02d      	b.n	8001efe <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8001ea2:	88fb      	ldrh	r3, [r7, #6]
 8001ea4:	7d3a      	ldrb	r2, [r7, #20]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	2b9f      	cmp	r3, #159	; 0x9f
 8001eaa:	dd13      	ble.n	8001ed4 <ST7735_WriteString+0x4c>
            x = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8001eb0:	7d7b      	ldrb	r3, [r7, #21]
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	88bb      	ldrh	r3, [r7, #4]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8001eba:	88bb      	ldrh	r3, [r7, #4]
 8001ebc:	7d7a      	ldrb	r2, [r7, #21]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	2b7f      	cmp	r3, #127	; 0x7f
 8001ec2:	dc21      	bgt.n	8001f08 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b20      	cmp	r3, #32
 8001eca:	d103      	bne.n	8001ed4 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	603b      	str	r3, [r7, #0]
                continue;
 8001ed2:	e014      	b.n	8001efe <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	781a      	ldrb	r2, [r3, #0]
 8001ed8:	88b9      	ldrh	r1, [r7, #4]
 8001eda:	88f8      	ldrh	r0, [r7, #6]
 8001edc:	8c3b      	ldrh	r3, [r7, #32]
 8001ede:	9302      	str	r3, [sp, #8]
 8001ee0:	8bbb      	ldrh	r3, [r7, #28]
 8001ee2:	9301      	str	r3, [sp, #4]
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	f7ff ff57 	bl	8001d9c <ST7735_WriteChar>
        x += font.width;
 8001eee:	7d3b      	ldrb	r3, [r7, #20]
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	88fb      	ldrh	r3, [r7, #6]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	80fb      	strh	r3, [r7, #6]
        str++;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	3301      	adds	r3, #1
 8001efc:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1cd      	bne.n	8001ea2 <ST7735_WriteString+0x1a>
 8001f06:	e000      	b.n	8001f0a <ST7735_WriteString+0x82>
                break;
 8001f08:	bf00      	nop
    }

    ST7735_Unselect();
 8001f0a:	f7ff fe5d 	bl	8001bc8 <ST7735_Unselect>
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f18:	b002      	add	sp, #8
 8001f1a:	4770      	bx	lr

08001f1c <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001f1c:	b590      	push	{r4, r7, lr}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4604      	mov	r4, r0
 8001f24:	4608      	mov	r0, r1
 8001f26:	4611      	mov	r1, r2
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4623      	mov	r3, r4
 8001f2c:	80fb      	strh	r3, [r7, #6]
 8001f2e:	4603      	mov	r3, r0
 8001f30:	80bb      	strh	r3, [r7, #4]
 8001f32:	460b      	mov	r3, r1
 8001f34:	807b      	strh	r3, [r7, #2]
 8001f36:	4613      	mov	r3, r2
 8001f38:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001f3a:	88fb      	ldrh	r3, [r7, #6]
 8001f3c:	2b9f      	cmp	r3, #159	; 0x9f
 8001f3e:	d859      	bhi.n	8001ff4 <ST7735_FillRectangle+0xd8>
 8001f40:	88bb      	ldrh	r3, [r7, #4]
 8001f42:	2b7f      	cmp	r3, #127	; 0x7f
 8001f44:	d856      	bhi.n	8001ff4 <ST7735_FillRectangle+0xd8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8001f46:	88fa      	ldrh	r2, [r7, #6]
 8001f48:	887b      	ldrh	r3, [r7, #2]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	2b9f      	cmp	r3, #159	; 0x9f
 8001f50:	dd03      	ble.n	8001f5a <ST7735_FillRectangle+0x3e>
 8001f52:	88fb      	ldrh	r3, [r7, #6]
 8001f54:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8001f58:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8001f5a:	88ba      	ldrh	r2, [r7, #4]
 8001f5c:	883b      	ldrh	r3, [r7, #0]
 8001f5e:	4413      	add	r3, r2
 8001f60:	3b01      	subs	r3, #1
 8001f62:	2b7f      	cmp	r3, #127	; 0x7f
 8001f64:	dd03      	ble.n	8001f6e <ST7735_FillRectangle+0x52>
 8001f66:	88bb      	ldrh	r3, [r7, #4]
 8001f68:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001f6c:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001f6e:	f7ff fe1f 	bl	8001bb0 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001f72:	88fb      	ldrh	r3, [r7, #6]
 8001f74:	b2d8      	uxtb	r0, r3
 8001f76:	88bb      	ldrh	r3, [r7, #4]
 8001f78:	b2d9      	uxtb	r1, r3
 8001f7a:	88fb      	ldrh	r3, [r7, #6]
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	887b      	ldrh	r3, [r7, #2]
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	4413      	add	r3, r2
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	3b01      	subs	r3, #1
 8001f88:	b2dc      	uxtb	r4, r3
 8001f8a:	88bb      	ldrh	r3, [r7, #4]
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	883b      	ldrh	r3, [r7, #0]
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	4413      	add	r3, r2
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	3b01      	subs	r3, #1
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	4622      	mov	r2, r4
 8001f9c:	f7ff feb0 	bl	8001d00 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001fa0:	8c3b      	ldrh	r3, [r7, #32]
 8001fa2:	0a1b      	lsrs	r3, r3, #8
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	733b      	strb	r3, [r7, #12]
 8001faa:	8c3b      	ldrh	r3, [r7, #32]
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	2120      	movs	r1, #32
 8001fb4:	4811      	ldr	r0, [pc, #68]	; (8001ffc <ST7735_FillRectangle+0xe0>)
 8001fb6:	f000 fd51 	bl	8002a5c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001fba:	883b      	ldrh	r3, [r7, #0]
 8001fbc:	80bb      	strh	r3, [r7, #4]
 8001fbe:	e013      	b.n	8001fe8 <ST7735_FillRectangle+0xcc>
        for(x = w; x > 0; x--) {
 8001fc0:	887b      	ldrh	r3, [r7, #2]
 8001fc2:	80fb      	strh	r3, [r7, #6]
 8001fc4:	e00a      	b.n	8001fdc <ST7735_FillRectangle+0xc0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001fc6:	f107 010c 	add.w	r1, r7, #12
 8001fca:	f04f 33ff 	mov.w	r3, #4294967295
 8001fce:	2202      	movs	r2, #2
 8001fd0:	480b      	ldr	r0, [pc, #44]	; (8002000 <ST7735_FillRectangle+0xe4>)
 8001fd2:	f001 fad5 	bl	8003580 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001fd6:	88fb      	ldrh	r3, [r7, #6]
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	80fb      	strh	r3, [r7, #6]
 8001fdc:	88fb      	ldrh	r3, [r7, #6]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f1      	bne.n	8001fc6 <ST7735_FillRectangle+0xaa>
    for(y = h; y > 0; y--) {
 8001fe2:	88bb      	ldrh	r3, [r7, #4]
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	80bb      	strh	r3, [r7, #4]
 8001fe8:	88bb      	ldrh	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1e8      	bne.n	8001fc0 <ST7735_FillRectangle+0xa4>
        }
    }

    ST7735_Unselect();
 8001fee:	f7ff fdeb 	bl	8001bc8 <ST7735_Unselect>
 8001ff2:	e000      	b.n	8001ff6 <ST7735_FillRectangle+0xda>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001ff4:	bf00      	nop
}
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd90      	pop	{r4, r7, pc}
 8001ffc:	40020400 	.word	0x40020400
 8002000:	20000290 	.word	0x20000290

08002004 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af02      	add	r7, sp, #8
 800200a:	4603      	mov	r3, r0
 800200c:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 800200e:	88fb      	ldrh	r3, [r7, #6]
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	2380      	movs	r3, #128	; 0x80
 8002014:	22a0      	movs	r2, #160	; 0xa0
 8002016:	2100      	movs	r1, #0
 8002018:	2000      	movs	r0, #0
 800201a:	f7ff ff7f 	bl	8001f1c <ST7735_FillRectangle>
}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	607b      	str	r3, [r7, #4]
 8002032:	4b10      	ldr	r3, [pc, #64]	; (8002074 <HAL_MspInit+0x4c>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	4a0f      	ldr	r2, [pc, #60]	; (8002074 <HAL_MspInit+0x4c>)
 8002038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800203c:	6453      	str	r3, [r2, #68]	; 0x44
 800203e:	4b0d      	ldr	r3, [pc, #52]	; (8002074 <HAL_MspInit+0x4c>)
 8002040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002046:	607b      	str	r3, [r7, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	603b      	str	r3, [r7, #0]
 800204e:	4b09      	ldr	r3, [pc, #36]	; (8002074 <HAL_MspInit+0x4c>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	4a08      	ldr	r2, [pc, #32]	; (8002074 <HAL_MspInit+0x4c>)
 8002054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002058:	6413      	str	r3, [r2, #64]	; 0x40
 800205a:	4b06      	ldr	r3, [pc, #24]	; (8002074 <HAL_MspInit+0x4c>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002062:	603b      	str	r3, [r7, #0]
 8002064:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002066:	2007      	movs	r0, #7
 8002068:	f000 fb1a 	bl	80026a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40023800 	.word	0x40023800

08002078 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08a      	sub	sp, #40	; 0x28
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002080:	f107 0314 	add.w	r3, r7, #20
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a19      	ldr	r2, [pc, #100]	; (80020fc <HAL_SPI_MspInit+0x84>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d12b      	bne.n	80020f2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	4b18      	ldr	r3, [pc, #96]	; (8002100 <HAL_SPI_MspInit+0x88>)
 80020a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a2:	4a17      	ldr	r2, [pc, #92]	; (8002100 <HAL_SPI_MspInit+0x88>)
 80020a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020a8:	6453      	str	r3, [r2, #68]	; 0x44
 80020aa:	4b15      	ldr	r3, [pc, #84]	; (8002100 <HAL_SPI_MspInit+0x88>)
 80020ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	4b11      	ldr	r3, [pc, #68]	; (8002100 <HAL_SPI_MspInit+0x88>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	4a10      	ldr	r2, [pc, #64]	; (8002100 <HAL_SPI_MspInit+0x88>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	6313      	str	r3, [r2, #48]	; 0x30
 80020c6:	4b0e      	ldr	r3, [pc, #56]	; (8002100 <HAL_SPI_MspInit+0x88>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80020d2:	23a0      	movs	r3, #160	; 0xa0
 80020d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d6:	2302      	movs	r3, #2
 80020d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020de:	2303      	movs	r3, #3
 80020e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020e2:	2305      	movs	r3, #5
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e6:	f107 0314 	add.w	r3, r7, #20
 80020ea:	4619      	mov	r1, r3
 80020ec:	4805      	ldr	r0, [pc, #20]	; (8002104 <HAL_SPI_MspInit+0x8c>)
 80020ee:	f000 fb0b 	bl	8002708 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80020f2:	bf00      	nop
 80020f4:	3728      	adds	r7, #40	; 0x28
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40013000 	.word	0x40013000
 8002100:	40023800 	.word	0x40023800
 8002104:	40020000 	.word	0x40020000

08002108 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08a      	sub	sp, #40	; 0x28
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002110:	f107 0314 	add.w	r3, r7, #20
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a19      	ldr	r2, [pc, #100]	; (800218c <HAL_TIM_Encoder_MspInit+0x84>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d12c      	bne.n	8002184 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	4b18      	ldr	r3, [pc, #96]	; (8002190 <HAL_TIM_Encoder_MspInit+0x88>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	4a17      	ldr	r2, [pc, #92]	; (8002190 <HAL_TIM_Encoder_MspInit+0x88>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	6453      	str	r3, [r2, #68]	; 0x44
 800213a:	4b15      	ldr	r3, [pc, #84]	; (8002190 <HAL_TIM_Encoder_MspInit+0x88>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	4b11      	ldr	r3, [pc, #68]	; (8002190 <HAL_TIM_Encoder_MspInit+0x88>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	4a10      	ldr	r2, [pc, #64]	; (8002190 <HAL_TIM_Encoder_MspInit+0x88>)
 8002150:	f043 0301 	orr.w	r3, r3, #1
 8002154:	6313      	str	r3, [r2, #48]	; 0x30
 8002156:	4b0e      	ldr	r3, [pc, #56]	; (8002190 <HAL_TIM_Encoder_MspInit+0x88>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002162:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002168:	2302      	movs	r3, #2
 800216a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002170:	2300      	movs	r3, #0
 8002172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002174:	2301      	movs	r3, #1
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002178:	f107 0314 	add.w	r3, r7, #20
 800217c:	4619      	mov	r1, r3
 800217e:	4805      	ldr	r0, [pc, #20]	; (8002194 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002180:	f000 fac2 	bl	8002708 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002184:	bf00      	nop
 8002186:	3728      	adds	r7, #40	; 0x28
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40010000 	.word	0x40010000
 8002190:	40023800 	.word	0x40023800
 8002194:	40020000 	.word	0x40020000

08002198 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0b      	ldr	r2, [pc, #44]	; (80021d4 <HAL_TIM_Base_MspInit+0x3c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d10d      	bne.n	80021c6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	4b0a      	ldr	r3, [pc, #40]	; (80021d8 <HAL_TIM_Base_MspInit+0x40>)
 80021b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b2:	4a09      	ldr	r2, [pc, #36]	; (80021d8 <HAL_TIM_Base_MspInit+0x40>)
 80021b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ba:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <HAL_TIM_Base_MspInit+0x40>)
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80021c6:	bf00      	nop
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40014400 	.word	0x40014400
 80021d8:	40023800 	.word	0x40023800

080021dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b088      	sub	sp, #32
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e4:	f107 030c 	add.w	r3, r7, #12
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]
 80021f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM10)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a12      	ldr	r2, [pc, #72]	; (8002244 <HAL_TIM_MspPostInit+0x68>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d11e      	bne.n	800223c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM10_MspPostInit 0 */

  /* USER CODE END TIM10_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	4b11      	ldr	r3, [pc, #68]	; (8002248 <HAL_TIM_MspPostInit+0x6c>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	4a10      	ldr	r2, [pc, #64]	; (8002248 <HAL_TIM_MspPostInit+0x6c>)
 8002208:	f043 0302 	orr.w	r3, r3, #2
 800220c:	6313      	str	r3, [r2, #48]	; 0x30
 800220e:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <HAL_TIM_MspPostInit+0x6c>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	68bb      	ldr	r3, [r7, #8]
    /**TIM10 GPIO Configuration    
    PB8     ------> TIM10_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800221a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800221e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002220:	2302      	movs	r3, #2
 8002222:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002228:	2300      	movs	r3, #0
 800222a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800222c:	2303      	movs	r3, #3
 800222e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002230:	f107 030c 	add.w	r3, r7, #12
 8002234:	4619      	mov	r1, r3
 8002236:	4805      	ldr	r0, [pc, #20]	; (800224c <HAL_TIM_MspPostInit+0x70>)
 8002238:	f000 fa66 	bl	8002708 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 800223c:	bf00      	nop
 800223e:	3720      	adds	r7, #32
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40014400 	.word	0x40014400
 8002248:	40023800 	.word	0x40023800
 800224c:	40020400 	.word	0x40020400

08002250 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b08a      	sub	sp, #40	; 0x28
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002258:	f107 0314 	add.w	r3, r7, #20
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a19      	ldr	r2, [pc, #100]	; (80022d4 <HAL_UART_MspInit+0x84>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d12b      	bne.n	80022ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <HAL_UART_MspInit+0x88>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	4a17      	ldr	r2, [pc, #92]	; (80022d8 <HAL_UART_MspInit+0x88>)
 800227c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002280:	6413      	str	r3, [r2, #64]	; 0x40
 8002282:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <HAL_UART_MspInit+0x88>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <HAL_UART_MspInit+0x88>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	4a10      	ldr	r2, [pc, #64]	; (80022d8 <HAL_UART_MspInit+0x88>)
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	6313      	str	r3, [r2, #48]	; 0x30
 800229e:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <HAL_UART_MspInit+0x88>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022aa:	230c      	movs	r3, #12
 80022ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ae:	2302      	movs	r3, #2
 80022b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b6:	2303      	movs	r3, #3
 80022b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022ba:	2307      	movs	r3, #7
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022be:	f107 0314 	add.w	r3, r7, #20
 80022c2:	4619      	mov	r1, r3
 80022c4:	4805      	ldr	r0, [pc, #20]	; (80022dc <HAL_UART_MspInit+0x8c>)
 80022c6:	f000 fa1f 	bl	8002708 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80022ca:	bf00      	nop
 80022cc:	3728      	adds	r7, #40	; 0x28
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40004400 	.word	0x40004400
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40020000 	.word	0x40020000

080022e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80022e4:	bf00      	nop
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ee:	b480      	push	{r7}
 80022f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022f2:	e7fe      	b.n	80022f2 <HardFault_Handler+0x4>

080022f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022f8:	e7fe      	b.n	80022f8 <MemManage_Handler+0x4>

080022fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022fa:	b480      	push	{r7}
 80022fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022fe:	e7fe      	b.n	80022fe <BusFault_Handler+0x4>

08002300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002304:	e7fe      	b.n	8002304 <UsageFault_Handler+0x4>

08002306 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002306:	b480      	push	{r7}
 8002308:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002322:	b480      	push	{r7}
 8002324:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002334:	f000 f8c0 	bl	80024b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002338:	bf00      	nop
 800233a:	bd80      	pop	{r7, pc}

0800233c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002344:	4b11      	ldr	r3, [pc, #68]	; (800238c <_sbrk+0x50>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d102      	bne.n	8002352 <_sbrk+0x16>
		heap_end = &end;
 800234c:	4b0f      	ldr	r3, [pc, #60]	; (800238c <_sbrk+0x50>)
 800234e:	4a10      	ldr	r2, [pc, #64]	; (8002390 <_sbrk+0x54>)
 8002350:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002352:	4b0e      	ldr	r3, [pc, #56]	; (800238c <_sbrk+0x50>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002358:	4b0c      	ldr	r3, [pc, #48]	; (800238c <_sbrk+0x50>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4413      	add	r3, r2
 8002360:	466a      	mov	r2, sp
 8002362:	4293      	cmp	r3, r2
 8002364:	d907      	bls.n	8002376 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002366:	f002 fbd5 	bl	8004b14 <__errno>
 800236a:	4602      	mov	r2, r0
 800236c:	230c      	movs	r3, #12
 800236e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002370:	f04f 33ff 	mov.w	r3, #4294967295
 8002374:	e006      	b.n	8002384 <_sbrk+0x48>
	}

	heap_end += incr;
 8002376:	4b05      	ldr	r3, [pc, #20]	; (800238c <_sbrk+0x50>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4413      	add	r3, r2
 800237e:	4a03      	ldr	r2, [pc, #12]	; (800238c <_sbrk+0x50>)
 8002380:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002382:	68fb      	ldr	r3, [r7, #12]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20000204 	.word	0x20000204
 8002390:	20000330 	.word	0x20000330

08002394 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002398:	4b08      	ldr	r3, [pc, #32]	; (80023bc <SystemInit+0x28>)
 800239a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239e:	4a07      	ldr	r2, [pc, #28]	; (80023bc <SystemInit+0x28>)
 80023a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023a8:	4b04      	ldr	r3, [pc, #16]	; (80023bc <SystemInit+0x28>)
 80023aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023ae:	609a      	str	r2, [r3, #8]
#endif
}
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80023c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80023c6:	e003      	b.n	80023d0 <LoopCopyDataInit>

080023c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80023ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80023cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80023ce:	3104      	adds	r1, #4

080023d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80023d0:	480b      	ldr	r0, [pc, #44]	; (8002400 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80023d2:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80023d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80023d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80023d8:	d3f6      	bcc.n	80023c8 <CopyDataInit>
  ldr  r2, =_sbss
 80023da:	4a0b      	ldr	r2, [pc, #44]	; (8002408 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80023dc:	e002      	b.n	80023e4 <LoopFillZerobss>

080023de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80023de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80023e0:	f842 3b04 	str.w	r3, [r2], #4

080023e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80023e4:	4b09      	ldr	r3, [pc, #36]	; (800240c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80023e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80023e8:	d3f9      	bcc.n	80023de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023ea:	f7ff ffd3 	bl	8002394 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023ee:	f002 fb97 	bl	8004b20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023f2:	f7fe fde9 	bl	8000fc8 <main>
  bx  lr    
 80023f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023f8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80023fc:	080078b0 	.word	0x080078b0
  ldr  r0, =_sdata
 8002400:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002404:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 8002408:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 800240c:	20000330 	.word	0x20000330

08002410 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002410:	e7fe      	b.n	8002410 <ADC_IRQHandler>
	...

08002414 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002418:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <HAL_Init+0x40>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a0d      	ldr	r2, [pc, #52]	; (8002454 <HAL_Init+0x40>)
 800241e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002422:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002424:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <HAL_Init+0x40>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a0a      	ldr	r2, [pc, #40]	; (8002454 <HAL_Init+0x40>)
 800242a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800242e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002430:	4b08      	ldr	r3, [pc, #32]	; (8002454 <HAL_Init+0x40>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a07      	ldr	r2, [pc, #28]	; (8002454 <HAL_Init+0x40>)
 8002436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800243a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800243c:	2003      	movs	r0, #3
 800243e:	f000 f92f 	bl	80026a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002442:	2000      	movs	r0, #0
 8002444:	f000 f808 	bl	8002458 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002448:	f7ff fdee 	bl	8002028 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40023c00 	.word	0x40023c00

08002458 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002460:	4b12      	ldr	r3, [pc, #72]	; (80024ac <HAL_InitTick+0x54>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <HAL_InitTick+0x58>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	4619      	mov	r1, r3
 800246a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800246e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002472:	fbb2 f3f3 	udiv	r3, r2, r3
 8002476:	4618      	mov	r0, r3
 8002478:	f000 f939 	bl	80026ee <HAL_SYSTICK_Config>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e00e      	b.n	80024a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b0f      	cmp	r3, #15
 800248a:	d80a      	bhi.n	80024a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800248c:	2200      	movs	r2, #0
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	f04f 30ff 	mov.w	r0, #4294967295
 8002494:	f000 f90f 	bl	80026b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002498:	4a06      	ldr	r2, [pc, #24]	; (80024b4 <HAL_InitTick+0x5c>)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800249e:	2300      	movs	r3, #0
 80024a0:	e000      	b.n	80024a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	20000008 	.word	0x20000008
 80024b0:	20000010 	.word	0x20000010
 80024b4:	2000000c 	.word	0x2000000c

080024b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024bc:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_IncTick+0x20>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	461a      	mov	r2, r3
 80024c2:	4b06      	ldr	r3, [pc, #24]	; (80024dc <HAL_IncTick+0x24>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4413      	add	r3, r2
 80024c8:	4a04      	ldr	r2, [pc, #16]	; (80024dc <HAL_IncTick+0x24>)
 80024ca:	6013      	str	r3, [r2, #0]
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	20000010 	.word	0x20000010
 80024dc:	20000328 	.word	0x20000328

080024e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return uwTick;
 80024e4:	4b03      	ldr	r3, [pc, #12]	; (80024f4 <HAL_GetTick+0x14>)
 80024e6:	681b      	ldr	r3, [r3, #0]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	20000328 	.word	0x20000328

080024f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002500:	f7ff ffee 	bl	80024e0 <HAL_GetTick>
 8002504:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002510:	d005      	beq.n	800251e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002512:	4b09      	ldr	r3, [pc, #36]	; (8002538 <HAL_Delay+0x40>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4413      	add	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800251e:	bf00      	nop
 8002520:	f7ff ffde 	bl	80024e0 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	429a      	cmp	r2, r3
 800252e:	d8f7      	bhi.n	8002520 <HAL_Delay+0x28>
  {
  }
}
 8002530:	bf00      	nop
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	20000010 	.word	0x20000010

0800253c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800254c:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <__NVIC_SetPriorityGrouping+0x44>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002558:	4013      	ands	r3, r2
 800255a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800256c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800256e:	4a04      	ldr	r2, [pc, #16]	; (8002580 <__NVIC_SetPriorityGrouping+0x44>)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	60d3      	str	r3, [r2, #12]
}
 8002574:	bf00      	nop
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002588:	4b04      	ldr	r3, [pc, #16]	; (800259c <__NVIC_GetPriorityGrouping+0x18>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	0a1b      	lsrs	r3, r3, #8
 800258e:	f003 0307 	and.w	r3, r3, #7
}
 8002592:	4618      	mov	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	6039      	str	r1, [r7, #0]
 80025aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	db0a      	blt.n	80025ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	490c      	ldr	r1, [pc, #48]	; (80025ec <__NVIC_SetPriority+0x4c>)
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	0112      	lsls	r2, r2, #4
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	440b      	add	r3, r1
 80025c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025c8:	e00a      	b.n	80025e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	4908      	ldr	r1, [pc, #32]	; (80025f0 <__NVIC_SetPriority+0x50>)
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	3b04      	subs	r3, #4
 80025d8:	0112      	lsls	r2, r2, #4
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	440b      	add	r3, r1
 80025de:	761a      	strb	r2, [r3, #24]
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	e000e100 	.word	0xe000e100
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b089      	sub	sp, #36	; 0x24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f1c3 0307 	rsb	r3, r3, #7
 800260e:	2b04      	cmp	r3, #4
 8002610:	bf28      	it	cs
 8002612:	2304      	movcs	r3, #4
 8002614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	3304      	adds	r3, #4
 800261a:	2b06      	cmp	r3, #6
 800261c:	d902      	bls.n	8002624 <NVIC_EncodePriority+0x30>
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3b03      	subs	r3, #3
 8002622:	e000      	b.n	8002626 <NVIC_EncodePriority+0x32>
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002628:	f04f 32ff 	mov.w	r2, #4294967295
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43da      	mvns	r2, r3
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	401a      	ands	r2, r3
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800263c:	f04f 31ff 	mov.w	r1, #4294967295
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	fa01 f303 	lsl.w	r3, r1, r3
 8002646:	43d9      	mvns	r1, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800264c:	4313      	orrs	r3, r2
         );
}
 800264e:	4618      	mov	r0, r3
 8002650:	3724      	adds	r7, #36	; 0x24
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
	...

0800265c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3b01      	subs	r3, #1
 8002668:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800266c:	d301      	bcc.n	8002672 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800266e:	2301      	movs	r3, #1
 8002670:	e00f      	b.n	8002692 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002672:	4a0a      	ldr	r2, [pc, #40]	; (800269c <SysTick_Config+0x40>)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3b01      	subs	r3, #1
 8002678:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800267a:	210f      	movs	r1, #15
 800267c:	f04f 30ff 	mov.w	r0, #4294967295
 8002680:	f7ff ff8e 	bl	80025a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002684:	4b05      	ldr	r3, [pc, #20]	; (800269c <SysTick_Config+0x40>)
 8002686:	2200      	movs	r2, #0
 8002688:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800268a:	4b04      	ldr	r3, [pc, #16]	; (800269c <SysTick_Config+0x40>)
 800268c:	2207      	movs	r2, #7
 800268e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	e000e010 	.word	0xe000e010

080026a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f7ff ff47 	bl	800253c <__NVIC_SetPriorityGrouping>
}
 80026ae:	bf00      	nop
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b086      	sub	sp, #24
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	4603      	mov	r3, r0
 80026be:	60b9      	str	r1, [r7, #8]
 80026c0:	607a      	str	r2, [r7, #4]
 80026c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026c8:	f7ff ff5c 	bl	8002584 <__NVIC_GetPriorityGrouping>
 80026cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	68b9      	ldr	r1, [r7, #8]
 80026d2:	6978      	ldr	r0, [r7, #20]
 80026d4:	f7ff ff8e 	bl	80025f4 <NVIC_EncodePriority>
 80026d8:	4602      	mov	r2, r0
 80026da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026de:	4611      	mov	r1, r2
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff ff5d 	bl	80025a0 <__NVIC_SetPriority>
}
 80026e6:	bf00      	nop
 80026e8:	3718      	adds	r7, #24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b082      	sub	sp, #8
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff ffb0 	bl	800265c <SysTick_Config>
 80026fc:	4603      	mov	r3, r0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002708:	b480      	push	{r7}
 800270a:	b089      	sub	sp, #36	; 0x24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002716:	2300      	movs	r3, #0
 8002718:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800271a:	2300      	movs	r3, #0
 800271c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800271e:	2300      	movs	r3, #0
 8002720:	61fb      	str	r3, [r7, #28]
 8002722:	e165      	b.n	80029f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002724:	2201      	movs	r2, #1
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	4013      	ands	r3, r2
 8002736:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	429a      	cmp	r2, r3
 800273e:	f040 8154 	bne.w	80029ea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d00b      	beq.n	8002762 <HAL_GPIO_Init+0x5a>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b02      	cmp	r3, #2
 8002750:	d007      	beq.n	8002762 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002756:	2b11      	cmp	r3, #17
 8002758:	d003      	beq.n	8002762 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b12      	cmp	r3, #18
 8002760:	d130      	bne.n	80027c4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	2203      	movs	r2, #3
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43db      	mvns	r3, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4013      	ands	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002798:	2201      	movs	r2, #1
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	43db      	mvns	r3, r3
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4013      	ands	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	091b      	lsrs	r3, r3, #4
 80027ae:	f003 0201 	and.w	r2, r3, #1
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	2203      	movs	r2, #3
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4013      	ands	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d003      	beq.n	8002804 <HAL_GPIO_Init+0xfc>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b12      	cmp	r3, #18
 8002802:	d123      	bne.n	800284c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	08da      	lsrs	r2, r3, #3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3208      	adds	r2, #8
 800280c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002810:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	220f      	movs	r2, #15
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	691a      	ldr	r2, [r3, #16]
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	08da      	lsrs	r2, r3, #3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	3208      	adds	r2, #8
 8002846:	69b9      	ldr	r1, [r7, #24]
 8002848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	2203      	movs	r2, #3
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	43db      	mvns	r3, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4013      	ands	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 0203 	and.w	r2, r3, #3
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 80ae 	beq.w	80029ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	4b5c      	ldr	r3, [pc, #368]	; (8002a04 <HAL_GPIO_Init+0x2fc>)
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	4a5b      	ldr	r2, [pc, #364]	; (8002a04 <HAL_GPIO_Init+0x2fc>)
 8002898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800289c:	6453      	str	r3, [r2, #68]	; 0x44
 800289e:	4b59      	ldr	r3, [pc, #356]	; (8002a04 <HAL_GPIO_Init+0x2fc>)
 80028a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028aa:	4a57      	ldr	r2, [pc, #348]	; (8002a08 <HAL_GPIO_Init+0x300>)
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	089b      	lsrs	r3, r3, #2
 80028b0:	3302      	adds	r3, #2
 80028b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	220f      	movs	r2, #15
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43db      	mvns	r3, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4013      	ands	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a4e      	ldr	r2, [pc, #312]	; (8002a0c <HAL_GPIO_Init+0x304>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d025      	beq.n	8002922 <HAL_GPIO_Init+0x21a>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a4d      	ldr	r2, [pc, #308]	; (8002a10 <HAL_GPIO_Init+0x308>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d01f      	beq.n	800291e <HAL_GPIO_Init+0x216>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a4c      	ldr	r2, [pc, #304]	; (8002a14 <HAL_GPIO_Init+0x30c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d019      	beq.n	800291a <HAL_GPIO_Init+0x212>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a4b      	ldr	r2, [pc, #300]	; (8002a18 <HAL_GPIO_Init+0x310>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d013      	beq.n	8002916 <HAL_GPIO_Init+0x20e>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a4a      	ldr	r2, [pc, #296]	; (8002a1c <HAL_GPIO_Init+0x314>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d00d      	beq.n	8002912 <HAL_GPIO_Init+0x20a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a49      	ldr	r2, [pc, #292]	; (8002a20 <HAL_GPIO_Init+0x318>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d007      	beq.n	800290e <HAL_GPIO_Init+0x206>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a48      	ldr	r2, [pc, #288]	; (8002a24 <HAL_GPIO_Init+0x31c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d101      	bne.n	800290a <HAL_GPIO_Init+0x202>
 8002906:	2306      	movs	r3, #6
 8002908:	e00c      	b.n	8002924 <HAL_GPIO_Init+0x21c>
 800290a:	2307      	movs	r3, #7
 800290c:	e00a      	b.n	8002924 <HAL_GPIO_Init+0x21c>
 800290e:	2305      	movs	r3, #5
 8002910:	e008      	b.n	8002924 <HAL_GPIO_Init+0x21c>
 8002912:	2304      	movs	r3, #4
 8002914:	e006      	b.n	8002924 <HAL_GPIO_Init+0x21c>
 8002916:	2303      	movs	r3, #3
 8002918:	e004      	b.n	8002924 <HAL_GPIO_Init+0x21c>
 800291a:	2302      	movs	r3, #2
 800291c:	e002      	b.n	8002924 <HAL_GPIO_Init+0x21c>
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <HAL_GPIO_Init+0x21c>
 8002922:	2300      	movs	r3, #0
 8002924:	69fa      	ldr	r2, [r7, #28]
 8002926:	f002 0203 	and.w	r2, r2, #3
 800292a:	0092      	lsls	r2, r2, #2
 800292c:	4093      	lsls	r3, r2
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4313      	orrs	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002934:	4934      	ldr	r1, [pc, #208]	; (8002a08 <HAL_GPIO_Init+0x300>)
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	089b      	lsrs	r3, r3, #2
 800293a:	3302      	adds	r3, #2
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002942:	4b39      	ldr	r3, [pc, #228]	; (8002a28 <HAL_GPIO_Init+0x320>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	43db      	mvns	r3, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4013      	ands	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002966:	4a30      	ldr	r2, [pc, #192]	; (8002a28 <HAL_GPIO_Init+0x320>)
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800296c:	4b2e      	ldr	r3, [pc, #184]	; (8002a28 <HAL_GPIO_Init+0x320>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	43db      	mvns	r3, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	4313      	orrs	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002990:	4a25      	ldr	r2, [pc, #148]	; (8002a28 <HAL_GPIO_Init+0x320>)
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002996:	4b24      	ldr	r3, [pc, #144]	; (8002a28 <HAL_GPIO_Init+0x320>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	43db      	mvns	r3, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4013      	ands	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029ba:	4a1b      	ldr	r2, [pc, #108]	; (8002a28 <HAL_GPIO_Init+0x320>)
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029c0:	4b19      	ldr	r3, [pc, #100]	; (8002a28 <HAL_GPIO_Init+0x320>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029e4:	4a10      	ldr	r2, [pc, #64]	; (8002a28 <HAL_GPIO_Init+0x320>)
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3301      	adds	r3, #1
 80029ee:	61fb      	str	r3, [r7, #28]
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	2b0f      	cmp	r3, #15
 80029f4:	f67f ae96 	bls.w	8002724 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029f8:	bf00      	nop
 80029fa:	3724      	adds	r7, #36	; 0x24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	40023800 	.word	0x40023800
 8002a08:	40013800 	.word	0x40013800
 8002a0c:	40020000 	.word	0x40020000
 8002a10:	40020400 	.word	0x40020400
 8002a14:	40020800 	.word	0x40020800
 8002a18:	40020c00 	.word	0x40020c00
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	40021400 	.word	0x40021400
 8002a24:	40021800 	.word	0x40021800
 8002a28:	40013c00 	.word	0x40013c00

08002a2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691a      	ldr	r2, [r3, #16]
 8002a3c:	887b      	ldrh	r3, [r7, #2]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d002      	beq.n	8002a4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a44:	2301      	movs	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
 8002a48:	e001      	b.n	8002a4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	807b      	strh	r3, [r7, #2]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a6c:	787b      	ldrb	r3, [r7, #1]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a72:	887a      	ldrh	r2, [r7, #2]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a78:	e003      	b.n	8002a82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a7a:	887b      	ldrh	r3, [r7, #2]
 8002a7c:	041a      	lsls	r2, r3, #16
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	619a      	str	r2, [r3, #24]
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
	...

08002a90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e0cc      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa4:	4b68      	ldr	r3, [pc, #416]	; (8002c48 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 030f 	and.w	r3, r3, #15
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d90c      	bls.n	8002acc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab2:	4b65      	ldr	r3, [pc, #404]	; (8002c48 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aba:	4b63      	ldr	r3, [pc, #396]	; (8002c48 <HAL_RCC_ClockConfig+0x1b8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e0b8      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d020      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d005      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ae4:	4b59      	ldr	r3, [pc, #356]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	4a58      	ldr	r2, [pc, #352]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002aee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0308 	and.w	r3, r3, #8
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d005      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002afc:	4b53      	ldr	r3, [pc, #332]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	4a52      	ldr	r2, [pc, #328]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b08:	4b50      	ldr	r3, [pc, #320]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	494d      	ldr	r1, [pc, #308]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d044      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d107      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2e:	4b47      	ldr	r3, [pc, #284]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d119      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e07f      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d003      	beq.n	8002b4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b4a:	2b03      	cmp	r3, #3
 8002b4c:	d107      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b4e:	4b3f      	ldr	r3, [pc, #252]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d109      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e06f      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5e:	4b3b      	ldr	r3, [pc, #236]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e067      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b6e:	4b37      	ldr	r3, [pc, #220]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f023 0203 	bic.w	r2, r3, #3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	4934      	ldr	r1, [pc, #208]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b80:	f7ff fcae 	bl	80024e0 <HAL_GetTick>
 8002b84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b86:	e00a      	b.n	8002b9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b88:	f7ff fcaa 	bl	80024e0 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e04f      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b9e:	4b2b      	ldr	r3, [pc, #172]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 020c 	and.w	r2, r3, #12
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d1eb      	bne.n	8002b88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bb0:	4b25      	ldr	r3, [pc, #148]	; (8002c48 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 030f 	and.w	r3, r3, #15
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d20c      	bcs.n	8002bd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bbe:	4b22      	ldr	r3, [pc, #136]	; (8002c48 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc6:	4b20      	ldr	r3, [pc, #128]	; (8002c48 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d001      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e032      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d008      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002be4:	4b19      	ldr	r3, [pc, #100]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	4916      	ldr	r1, [pc, #88]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d009      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c02:	4b12      	ldr	r3, [pc, #72]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	490e      	ldr	r1, [pc, #56]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c16:	f000 f855 	bl	8002cc4 <HAL_RCC_GetSysClockFreq>
 8002c1a:	4601      	mov	r1, r0
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	091b      	lsrs	r3, r3, #4
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	4a0a      	ldr	r2, [pc, #40]	; (8002c50 <HAL_RCC_ClockConfig+0x1c0>)
 8002c28:	5cd3      	ldrb	r3, [r2, r3]
 8002c2a:	fa21 f303 	lsr.w	r3, r1, r3
 8002c2e:	4a09      	ldr	r2, [pc, #36]	; (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c32:	4b09      	ldr	r3, [pc, #36]	; (8002c58 <HAL_RCC_ClockConfig+0x1c8>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff fc0e 	bl	8002458 <HAL_InitTick>

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40023c00 	.word	0x40023c00
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	0800761c 	.word	0x0800761c
 8002c54:	20000008 	.word	0x20000008
 8002c58:	2000000c 	.word	0x2000000c

08002c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c60:	4b03      	ldr	r3, [pc, #12]	; (8002c70 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c62:	681b      	ldr	r3, [r3, #0]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	20000008 	.word	0x20000008

08002c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c78:	f7ff fff0 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
 8002c7c:	4601      	mov	r1, r0
 8002c7e:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	0a9b      	lsrs	r3, r3, #10
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	4a03      	ldr	r2, [pc, #12]	; (8002c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c8a:	5cd3      	ldrb	r3, [r2, r3]
 8002c8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40023800 	.word	0x40023800
 8002c98:	0800762c 	.word	0x0800762c

08002c9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ca0:	f7ff ffdc 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
 8002ca4:	4601      	mov	r1, r0
 8002ca6:	4b05      	ldr	r3, [pc, #20]	; (8002cbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	0b5b      	lsrs	r3, r3, #13
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	4a03      	ldr	r2, [pc, #12]	; (8002cc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cb2:	5cd3      	ldrb	r3, [r2, r3]
 8002cb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	0800762c 	.word	0x0800762c

08002cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cde:	4bc6      	ldr	r3, [pc, #792]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
 8002ce6:	2b0c      	cmp	r3, #12
 8002ce8:	f200 817e 	bhi.w	8002fe8 <HAL_RCC_GetSysClockFreq+0x324>
 8002cec:	a201      	add	r2, pc, #4	; (adr r2, 8002cf4 <HAL_RCC_GetSysClockFreq+0x30>)
 8002cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf2:	bf00      	nop
 8002cf4:	08002d29 	.word	0x08002d29
 8002cf8:	08002fe9 	.word	0x08002fe9
 8002cfc:	08002fe9 	.word	0x08002fe9
 8002d00:	08002fe9 	.word	0x08002fe9
 8002d04:	08002d2f 	.word	0x08002d2f
 8002d08:	08002fe9 	.word	0x08002fe9
 8002d0c:	08002fe9 	.word	0x08002fe9
 8002d10:	08002fe9 	.word	0x08002fe9
 8002d14:	08002d35 	.word	0x08002d35
 8002d18:	08002fe9 	.word	0x08002fe9
 8002d1c:	08002fe9 	.word	0x08002fe9
 8002d20:	08002fe9 	.word	0x08002fe9
 8002d24:	08002e91 	.word	0x08002e91
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d28:	4bb4      	ldr	r3, [pc, #720]	; (8002ffc <HAL_RCC_GetSysClockFreq+0x338>)
 8002d2a:	613b      	str	r3, [r7, #16]
       break;
 8002d2c:	e15f      	b.n	8002fee <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d2e:	4bb4      	ldr	r3, [pc, #720]	; (8003000 <HAL_RCC_GetSysClockFreq+0x33c>)
 8002d30:	613b      	str	r3, [r7, #16]
      break;
 8002d32:	e15c      	b.n	8002fee <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d34:	4bb0      	ldr	r3, [pc, #704]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d3c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d3e:	4bae      	ldr	r3, [pc, #696]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d04a      	beq.n	8002de0 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d4a:	4bab      	ldr	r3, [pc, #684]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	099b      	lsrs	r3, r3, #6
 8002d50:	f04f 0400 	mov.w	r4, #0
 8002d54:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d58:	f04f 0200 	mov.w	r2, #0
 8002d5c:	ea03 0501 	and.w	r5, r3, r1
 8002d60:	ea04 0602 	and.w	r6, r4, r2
 8002d64:	4629      	mov	r1, r5
 8002d66:	4632      	mov	r2, r6
 8002d68:	f04f 0300 	mov.w	r3, #0
 8002d6c:	f04f 0400 	mov.w	r4, #0
 8002d70:	0154      	lsls	r4, r2, #5
 8002d72:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d76:	014b      	lsls	r3, r1, #5
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4622      	mov	r2, r4
 8002d7c:	1b49      	subs	r1, r1, r5
 8002d7e:	eb62 0206 	sbc.w	r2, r2, r6
 8002d82:	f04f 0300 	mov.w	r3, #0
 8002d86:	f04f 0400 	mov.w	r4, #0
 8002d8a:	0194      	lsls	r4, r2, #6
 8002d8c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d90:	018b      	lsls	r3, r1, #6
 8002d92:	1a5b      	subs	r3, r3, r1
 8002d94:	eb64 0402 	sbc.w	r4, r4, r2
 8002d98:	f04f 0100 	mov.w	r1, #0
 8002d9c:	f04f 0200 	mov.w	r2, #0
 8002da0:	00e2      	lsls	r2, r4, #3
 8002da2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002da6:	00d9      	lsls	r1, r3, #3
 8002da8:	460b      	mov	r3, r1
 8002daa:	4614      	mov	r4, r2
 8002dac:	195b      	adds	r3, r3, r5
 8002dae:	eb44 0406 	adc.w	r4, r4, r6
 8002db2:	f04f 0100 	mov.w	r1, #0
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	0262      	lsls	r2, r4, #9
 8002dbc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002dc0:	0259      	lsls	r1, r3, #9
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4614      	mov	r4, r2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	4621      	mov	r1, r4
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f04f 0400 	mov.w	r4, #0
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4623      	mov	r3, r4
 8002dd4:	f7fd ff78 	bl	8000cc8 <__aeabi_uldivmod>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	460c      	mov	r4, r1
 8002ddc:	617b      	str	r3, [r7, #20]
 8002dde:	e049      	b.n	8002e74 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002de0:	4b85      	ldr	r3, [pc, #532]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	099b      	lsrs	r3, r3, #6
 8002de6:	f04f 0400 	mov.w	r4, #0
 8002dea:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	ea03 0501 	and.w	r5, r3, r1
 8002df6:	ea04 0602 	and.w	r6, r4, r2
 8002dfa:	4629      	mov	r1, r5
 8002dfc:	4632      	mov	r2, r6
 8002dfe:	f04f 0300 	mov.w	r3, #0
 8002e02:	f04f 0400 	mov.w	r4, #0
 8002e06:	0154      	lsls	r4, r2, #5
 8002e08:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e0c:	014b      	lsls	r3, r1, #5
 8002e0e:	4619      	mov	r1, r3
 8002e10:	4622      	mov	r2, r4
 8002e12:	1b49      	subs	r1, r1, r5
 8002e14:	eb62 0206 	sbc.w	r2, r2, r6
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	f04f 0400 	mov.w	r4, #0
 8002e20:	0194      	lsls	r4, r2, #6
 8002e22:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e26:	018b      	lsls	r3, r1, #6
 8002e28:	1a5b      	subs	r3, r3, r1
 8002e2a:	eb64 0402 	sbc.w	r4, r4, r2
 8002e2e:	f04f 0100 	mov.w	r1, #0
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	00e2      	lsls	r2, r4, #3
 8002e38:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e3c:	00d9      	lsls	r1, r3, #3
 8002e3e:	460b      	mov	r3, r1
 8002e40:	4614      	mov	r4, r2
 8002e42:	195b      	adds	r3, r3, r5
 8002e44:	eb44 0406 	adc.w	r4, r4, r6
 8002e48:	f04f 0100 	mov.w	r1, #0
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	02a2      	lsls	r2, r4, #10
 8002e52:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002e56:	0299      	lsls	r1, r3, #10
 8002e58:	460b      	mov	r3, r1
 8002e5a:	4614      	mov	r4, r2
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	4621      	mov	r1, r4
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f04f 0400 	mov.w	r4, #0
 8002e66:	461a      	mov	r2, r3
 8002e68:	4623      	mov	r3, r4
 8002e6a:	f7fd ff2d 	bl	8000cc8 <__aeabi_uldivmod>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	460c      	mov	r4, r1
 8002e72:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e74:	4b60      	ldr	r3, [pc, #384]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	0c1b      	lsrs	r3, r3, #16
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	3301      	adds	r3, #1
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8c:	613b      	str	r3, [r7, #16]
      break;
 8002e8e:	e0ae      	b.n	8002fee <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e90:	4b59      	ldr	r3, [pc, #356]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e98:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e9a:	4b57      	ldr	r3, [pc, #348]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d04a      	beq.n	8002f3c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ea6:	4b54      	ldr	r3, [pc, #336]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	099b      	lsrs	r3, r3, #6
 8002eac:	f04f 0400 	mov.w	r4, #0
 8002eb0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002eb4:	f04f 0200 	mov.w	r2, #0
 8002eb8:	ea03 0501 	and.w	r5, r3, r1
 8002ebc:	ea04 0602 	and.w	r6, r4, r2
 8002ec0:	4629      	mov	r1, r5
 8002ec2:	4632      	mov	r2, r6
 8002ec4:	f04f 0300 	mov.w	r3, #0
 8002ec8:	f04f 0400 	mov.w	r4, #0
 8002ecc:	0154      	lsls	r4, r2, #5
 8002ece:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ed2:	014b      	lsls	r3, r1, #5
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4622      	mov	r2, r4
 8002ed8:	1b49      	subs	r1, r1, r5
 8002eda:	eb62 0206 	sbc.w	r2, r2, r6
 8002ede:	f04f 0300 	mov.w	r3, #0
 8002ee2:	f04f 0400 	mov.w	r4, #0
 8002ee6:	0194      	lsls	r4, r2, #6
 8002ee8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002eec:	018b      	lsls	r3, r1, #6
 8002eee:	1a5b      	subs	r3, r3, r1
 8002ef0:	eb64 0402 	sbc.w	r4, r4, r2
 8002ef4:	f04f 0100 	mov.w	r1, #0
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	00e2      	lsls	r2, r4, #3
 8002efe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f02:	00d9      	lsls	r1, r3, #3
 8002f04:	460b      	mov	r3, r1
 8002f06:	4614      	mov	r4, r2
 8002f08:	195b      	adds	r3, r3, r5
 8002f0a:	eb44 0406 	adc.w	r4, r4, r6
 8002f0e:	f04f 0100 	mov.w	r1, #0
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	0262      	lsls	r2, r4, #9
 8002f18:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002f1c:	0259      	lsls	r1, r3, #9
 8002f1e:	460b      	mov	r3, r1
 8002f20:	4614      	mov	r4, r2
 8002f22:	4618      	mov	r0, r3
 8002f24:	4621      	mov	r1, r4
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f04f 0400 	mov.w	r4, #0
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	4623      	mov	r3, r4
 8002f30:	f7fd feca 	bl	8000cc8 <__aeabi_uldivmod>
 8002f34:	4603      	mov	r3, r0
 8002f36:	460c      	mov	r4, r1
 8002f38:	617b      	str	r3, [r7, #20]
 8002f3a:	e049      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f3c:	4b2e      	ldr	r3, [pc, #184]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	099b      	lsrs	r3, r3, #6
 8002f42:	f04f 0400 	mov.w	r4, #0
 8002f46:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f4a:	f04f 0200 	mov.w	r2, #0
 8002f4e:	ea03 0501 	and.w	r5, r3, r1
 8002f52:	ea04 0602 	and.w	r6, r4, r2
 8002f56:	4629      	mov	r1, r5
 8002f58:	4632      	mov	r2, r6
 8002f5a:	f04f 0300 	mov.w	r3, #0
 8002f5e:	f04f 0400 	mov.w	r4, #0
 8002f62:	0154      	lsls	r4, r2, #5
 8002f64:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f68:	014b      	lsls	r3, r1, #5
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4622      	mov	r2, r4
 8002f6e:	1b49      	subs	r1, r1, r5
 8002f70:	eb62 0206 	sbc.w	r2, r2, r6
 8002f74:	f04f 0300 	mov.w	r3, #0
 8002f78:	f04f 0400 	mov.w	r4, #0
 8002f7c:	0194      	lsls	r4, r2, #6
 8002f7e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002f82:	018b      	lsls	r3, r1, #6
 8002f84:	1a5b      	subs	r3, r3, r1
 8002f86:	eb64 0402 	sbc.w	r4, r4, r2
 8002f8a:	f04f 0100 	mov.w	r1, #0
 8002f8e:	f04f 0200 	mov.w	r2, #0
 8002f92:	00e2      	lsls	r2, r4, #3
 8002f94:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f98:	00d9      	lsls	r1, r3, #3
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4614      	mov	r4, r2
 8002f9e:	195b      	adds	r3, r3, r5
 8002fa0:	eb44 0406 	adc.w	r4, r4, r6
 8002fa4:	f04f 0100 	mov.w	r1, #0
 8002fa8:	f04f 0200 	mov.w	r2, #0
 8002fac:	02a2      	lsls	r2, r4, #10
 8002fae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002fb2:	0299      	lsls	r1, r3, #10
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	4614      	mov	r4, r2
 8002fb8:	4618      	mov	r0, r3
 8002fba:	4621      	mov	r1, r4
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f04f 0400 	mov.w	r4, #0
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	4623      	mov	r3, r4
 8002fc6:	f7fd fe7f 	bl	8000cc8 <__aeabi_uldivmod>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	460c      	mov	r4, r1
 8002fce:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002fd0:	4b09      	ldr	r3, [pc, #36]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	0f1b      	lsrs	r3, r3, #28
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe4:	613b      	str	r3, [r7, #16]
      break;
 8002fe6:	e002      	b.n	8002fee <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fe8:	4b04      	ldr	r3, [pc, #16]	; (8002ffc <HAL_RCC_GetSysClockFreq+0x338>)
 8002fea:	613b      	str	r3, [r7, #16]
      break;
 8002fec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fee:	693b      	ldr	r3, [r7, #16]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	371c      	adds	r7, #28
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	00f42400 	.word	0x00f42400
 8003000:	007a1200 	.word	0x007a1200

08003004 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800300c:	2300      	movs	r3, #0
 800300e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 8083 	beq.w	8003124 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800301e:	4b95      	ldr	r3, [pc, #596]	; (8003274 <HAL_RCC_OscConfig+0x270>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 030c 	and.w	r3, r3, #12
 8003026:	2b04      	cmp	r3, #4
 8003028:	d019      	beq.n	800305e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800302a:	4b92      	ldr	r3, [pc, #584]	; (8003274 <HAL_RCC_OscConfig+0x270>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003032:	2b08      	cmp	r3, #8
 8003034:	d106      	bne.n	8003044 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003036:	4b8f      	ldr	r3, [pc, #572]	; (8003274 <HAL_RCC_OscConfig+0x270>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800303e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003042:	d00c      	beq.n	800305e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003044:	4b8b      	ldr	r3, [pc, #556]	; (8003274 <HAL_RCC_OscConfig+0x270>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800304c:	2b0c      	cmp	r3, #12
 800304e:	d112      	bne.n	8003076 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003050:	4b88      	ldr	r3, [pc, #544]	; (8003274 <HAL_RCC_OscConfig+0x270>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003058:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800305c:	d10b      	bne.n	8003076 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800305e:	4b85      	ldr	r3, [pc, #532]	; (8003274 <HAL_RCC_OscConfig+0x270>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d05b      	beq.n	8003122 <HAL_RCC_OscConfig+0x11e>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d157      	bne.n	8003122 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e216      	b.n	80034a4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800307e:	d106      	bne.n	800308e <HAL_RCC_OscConfig+0x8a>
 8003080:	4b7c      	ldr	r3, [pc, #496]	; (8003274 <HAL_RCC_OscConfig+0x270>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a7b      	ldr	r2, [pc, #492]	; (8003274 <HAL_RCC_OscConfig+0x270>)
 8003086:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800308a:	6013      	str	r3, [r2, #0]
 800308c:	e01d      	b.n	80030ca <HAL_RCC_OscConfig+0xc6>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003096:	d10c      	bne.n	80030b2 <HAL_RCC_OscConfig+0xae>
 8003098:	4b76      	ldr	r3, [pc, #472]	; (8003274 <HAL_RCC_OscConfig+0x270>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a75      	ldr	r2, [pc, #468]	; (8003274 <HAL_RCC_OscConfig+0x270>)
 800309e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030a2:	6013      	str	r3, [r2, #0]
 80030a4:	4b73      	ldr	r3, [pc, #460]	; (8003274 <HAL_RCC_OscConfig+0x270>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a72      	ldr	r2, [pc, #456]	; (8003274 <HAL_RCC_OscConfig+0x270>)
 80030aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	e00b      	b.n	80030ca <HAL_RCC_OscConfig+0xc6>
 80030b2:	4b70      	ldr	r3, [pc, #448]	; (8003274 <HAL_RCC_OscConfig+0x270>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a6f      	ldr	r2, [pc, #444]	; (8003274 <HAL_RCC_OscConfig+0x270>)
 80030b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	4b6d      	ldr	r3, [pc, #436]	; (8003274 <HAL_RCC_OscConfig+0x270>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a6c      	ldr	r2, [pc, #432]	; (8003274 <HAL_RCC_OscConfig+0x270>)
 80030c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030c8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d013      	beq.n	80030fa <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d2:	f7ff fa05 	bl	80024e0 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d8:	e008      	b.n	80030ec <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030da:	f7ff fa01 	bl	80024e0 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b64      	cmp	r3, #100	; 0x64
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e1db      	b.n	80034a4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ec:	4b61      	ldr	r3, [pc, #388]	; (8003274 <HAL_RCC_OscConfig+0x270>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0f0      	beq.n	80030da <HAL_RCC_OscConfig+0xd6>
 80030f8:	e014      	b.n	8003124 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fa:	f7ff f9f1 	bl	80024e0 <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003100:	e008      	b.n	8003114 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003102:	f7ff f9ed 	bl	80024e0 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b64      	cmp	r3, #100	; 0x64
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e1c7      	b.n	80034a4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003114:	4b57      	ldr	r3, [pc, #348]	; (8003274 <HAL_RCC_OscConfig+0x270>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1f0      	bne.n	8003102 <HAL_RCC_OscConfig+0xfe>
 8003120:	e000      	b.n	8003124 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003122:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d06f      	beq.n	8003210 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003130:	4b50      	ldr	r3, [pc, #320]	; (8003274 <HAL_RCC_OscConfig+0x270>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 030c 	and.w	r3, r3, #12
 8003138:	2b00      	cmp	r3, #0
 800313a:	d017      	beq.n	800316c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800313c:	4b4d      	ldr	r3, [pc, #308]	; (8003274 <HAL_RCC_OscConfig+0x270>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003144:	2b08      	cmp	r3, #8
 8003146:	d105      	bne.n	8003154 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003148:	4b4a      	ldr	r3, [pc, #296]	; (8003274 <HAL_RCC_OscConfig+0x270>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00b      	beq.n	800316c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003154:	4b47      	ldr	r3, [pc, #284]	; (8003274 <HAL_RCC_OscConfig+0x270>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800315c:	2b0c      	cmp	r3, #12
 800315e:	d11c      	bne.n	800319a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003160:	4b44      	ldr	r3, [pc, #272]	; (8003274 <HAL_RCC_OscConfig+0x270>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d116      	bne.n	800319a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800316c:	4b41      	ldr	r3, [pc, #260]	; (8003274 <HAL_RCC_OscConfig+0x270>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d005      	beq.n	8003184 <HAL_RCC_OscConfig+0x180>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d001      	beq.n	8003184 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e18f      	b.n	80034a4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003184:	4b3b      	ldr	r3, [pc, #236]	; (8003274 <HAL_RCC_OscConfig+0x270>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	4938      	ldr	r1, [pc, #224]	; (8003274 <HAL_RCC_OscConfig+0x270>)
 8003194:	4313      	orrs	r3, r2
 8003196:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003198:	e03a      	b.n	8003210 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d020      	beq.n	80031e4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031a2:	4b35      	ldr	r3, [pc, #212]	; (8003278 <HAL_RCC_OscConfig+0x274>)
 80031a4:	2201      	movs	r2, #1
 80031a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a8:	f7ff f99a 	bl	80024e0 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031b0:	f7ff f996 	bl	80024e0 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e170      	b.n	80034a4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c2:	4b2c      	ldr	r3, [pc, #176]	; (8003274 <HAL_RCC_OscConfig+0x270>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0f0      	beq.n	80031b0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ce:	4b29      	ldr	r3, [pc, #164]	; (8003274 <HAL_RCC_OscConfig+0x270>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	4925      	ldr	r1, [pc, #148]	; (8003274 <HAL_RCC_OscConfig+0x270>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	600b      	str	r3, [r1, #0]
 80031e2:	e015      	b.n	8003210 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031e4:	4b24      	ldr	r3, [pc, #144]	; (8003278 <HAL_RCC_OscConfig+0x274>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ea:	f7ff f979 	bl	80024e0 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031f2:	f7ff f975 	bl	80024e0 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e14f      	b.n	80034a4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003204:	4b1b      	ldr	r3, [pc, #108]	; (8003274 <HAL_RCC_OscConfig+0x270>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1f0      	bne.n	80031f2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0308 	and.w	r3, r3, #8
 8003218:	2b00      	cmp	r3, #0
 800321a:	d037      	beq.n	800328c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d016      	beq.n	8003252 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003224:	4b15      	ldr	r3, [pc, #84]	; (800327c <HAL_RCC_OscConfig+0x278>)
 8003226:	2201      	movs	r2, #1
 8003228:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322a:	f7ff f959 	bl	80024e0 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003232:	f7ff f955 	bl	80024e0 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e12f      	b.n	80034a4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003244:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <HAL_RCC_OscConfig+0x270>)
 8003246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0f0      	beq.n	8003232 <HAL_RCC_OscConfig+0x22e>
 8003250:	e01c      	b.n	800328c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003252:	4b0a      	ldr	r3, [pc, #40]	; (800327c <HAL_RCC_OscConfig+0x278>)
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003258:	f7ff f942 	bl	80024e0 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800325e:	e00f      	b.n	8003280 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003260:	f7ff f93e 	bl	80024e0 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d908      	bls.n	8003280 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e118      	b.n	80034a4 <HAL_RCC_OscConfig+0x4a0>
 8003272:	bf00      	nop
 8003274:	40023800 	.word	0x40023800
 8003278:	42470000 	.word	0x42470000
 800327c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003280:	4b8a      	ldr	r3, [pc, #552]	; (80034ac <HAL_RCC_OscConfig+0x4a8>)
 8003282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1e9      	bne.n	8003260 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0304 	and.w	r3, r3, #4
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 8097 	beq.w	80033c8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800329a:	2300      	movs	r3, #0
 800329c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800329e:	4b83      	ldr	r3, [pc, #524]	; (80034ac <HAL_RCC_OscConfig+0x4a8>)
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10f      	bne.n	80032ca <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032aa:	2300      	movs	r3, #0
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	4b7f      	ldr	r3, [pc, #508]	; (80034ac <HAL_RCC_OscConfig+0x4a8>)
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	4a7e      	ldr	r2, [pc, #504]	; (80034ac <HAL_RCC_OscConfig+0x4a8>)
 80032b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032b8:	6413      	str	r3, [r2, #64]	; 0x40
 80032ba:	4b7c      	ldr	r3, [pc, #496]	; (80034ac <HAL_RCC_OscConfig+0x4a8>)
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80032c6:	2301      	movs	r3, #1
 80032c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ca:	4b79      	ldr	r3, [pc, #484]	; (80034b0 <HAL_RCC_OscConfig+0x4ac>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d118      	bne.n	8003308 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032d6:	4b76      	ldr	r3, [pc, #472]	; (80034b0 <HAL_RCC_OscConfig+0x4ac>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a75      	ldr	r2, [pc, #468]	; (80034b0 <HAL_RCC_OscConfig+0x4ac>)
 80032dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032e2:	f7ff f8fd 	bl	80024e0 <HAL_GetTick>
 80032e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e8:	e008      	b.n	80032fc <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ea:	f7ff f8f9 	bl	80024e0 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e0d3      	b.n	80034a4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032fc:	4b6c      	ldr	r3, [pc, #432]	; (80034b0 <HAL_RCC_OscConfig+0x4ac>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003304:	2b00      	cmp	r3, #0
 8003306:	d0f0      	beq.n	80032ea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d106      	bne.n	800331e <HAL_RCC_OscConfig+0x31a>
 8003310:	4b66      	ldr	r3, [pc, #408]	; (80034ac <HAL_RCC_OscConfig+0x4a8>)
 8003312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003314:	4a65      	ldr	r2, [pc, #404]	; (80034ac <HAL_RCC_OscConfig+0x4a8>)
 8003316:	f043 0301 	orr.w	r3, r3, #1
 800331a:	6713      	str	r3, [r2, #112]	; 0x70
 800331c:	e01c      	b.n	8003358 <HAL_RCC_OscConfig+0x354>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	2b05      	cmp	r3, #5
 8003324:	d10c      	bne.n	8003340 <HAL_RCC_OscConfig+0x33c>
 8003326:	4b61      	ldr	r3, [pc, #388]	; (80034ac <HAL_RCC_OscConfig+0x4a8>)
 8003328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332a:	4a60      	ldr	r2, [pc, #384]	; (80034ac <HAL_RCC_OscConfig+0x4a8>)
 800332c:	f043 0304 	orr.w	r3, r3, #4
 8003330:	6713      	str	r3, [r2, #112]	; 0x70
 8003332:	4b5e      	ldr	r3, [pc, #376]	; (80034ac <HAL_RCC_OscConfig+0x4a8>)
 8003334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003336:	4a5d      	ldr	r2, [pc, #372]	; (80034ac <HAL_RCC_OscConfig+0x4a8>)
 8003338:	f043 0301 	orr.w	r3, r3, #1
 800333c:	6713      	str	r3, [r2, #112]	; 0x70
 800333e:	e00b      	b.n	8003358 <HAL_RCC_OscConfig+0x354>
 8003340:	4b5a      	ldr	r3, [pc, #360]	; (80034ac <HAL_RCC_OscConfig+0x4a8>)
 8003342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003344:	4a59      	ldr	r2, [pc, #356]	; (80034ac <HAL_RCC_OscConfig+0x4a8>)
 8003346:	f023 0301 	bic.w	r3, r3, #1
 800334a:	6713      	str	r3, [r2, #112]	; 0x70
 800334c:	4b57      	ldr	r3, [pc, #348]	; (80034ac <HAL_RCC_OscConfig+0x4a8>)
 800334e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003350:	4a56      	ldr	r2, [pc, #344]	; (80034ac <HAL_RCC_OscConfig+0x4a8>)
 8003352:	f023 0304 	bic.w	r3, r3, #4
 8003356:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d015      	beq.n	800338c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003360:	f7ff f8be 	bl	80024e0 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003366:	e00a      	b.n	800337e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003368:	f7ff f8ba 	bl	80024e0 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	f241 3288 	movw	r2, #5000	; 0x1388
 8003376:	4293      	cmp	r3, r2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e092      	b.n	80034a4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800337e:	4b4b      	ldr	r3, [pc, #300]	; (80034ac <HAL_RCC_OscConfig+0x4a8>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0ee      	beq.n	8003368 <HAL_RCC_OscConfig+0x364>
 800338a:	e014      	b.n	80033b6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800338c:	f7ff f8a8 	bl	80024e0 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003392:	e00a      	b.n	80033aa <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003394:	f7ff f8a4 	bl	80024e0 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e07c      	b.n	80034a4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033aa:	4b40      	ldr	r3, [pc, #256]	; (80034ac <HAL_RCC_OscConfig+0x4a8>)
 80033ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1ee      	bne.n	8003394 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033b6:	7dfb      	ldrb	r3, [r7, #23]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d105      	bne.n	80033c8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033bc:	4b3b      	ldr	r3, [pc, #236]	; (80034ac <HAL_RCC_OscConfig+0x4a8>)
 80033be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c0:	4a3a      	ldr	r2, [pc, #232]	; (80034ac <HAL_RCC_OscConfig+0x4a8>)
 80033c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d068      	beq.n	80034a2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033d0:	4b36      	ldr	r3, [pc, #216]	; (80034ac <HAL_RCC_OscConfig+0x4a8>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f003 030c 	and.w	r3, r3, #12
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d060      	beq.n	800349e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d145      	bne.n	8003470 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e4:	4b33      	ldr	r3, [pc, #204]	; (80034b4 <HAL_RCC_OscConfig+0x4b0>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ea:	f7ff f879 	bl	80024e0 <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033f0:	e008      	b.n	8003404 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f2:	f7ff f875 	bl	80024e0 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e04f      	b.n	80034a4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003404:	4b29      	ldr	r3, [pc, #164]	; (80034ac <HAL_RCC_OscConfig+0x4a8>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1f0      	bne.n	80033f2 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	69da      	ldr	r2, [r3, #28]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	431a      	orrs	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	019b      	lsls	r3, r3, #6
 8003420:	431a      	orrs	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003426:	085b      	lsrs	r3, r3, #1
 8003428:	3b01      	subs	r3, #1
 800342a:	041b      	lsls	r3, r3, #16
 800342c:	431a      	orrs	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003432:	061b      	lsls	r3, r3, #24
 8003434:	431a      	orrs	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343a:	071b      	lsls	r3, r3, #28
 800343c:	491b      	ldr	r1, [pc, #108]	; (80034ac <HAL_RCC_OscConfig+0x4a8>)
 800343e:	4313      	orrs	r3, r2
 8003440:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003442:	4b1c      	ldr	r3, [pc, #112]	; (80034b4 <HAL_RCC_OscConfig+0x4b0>)
 8003444:	2201      	movs	r2, #1
 8003446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003448:	f7ff f84a 	bl	80024e0 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003450:	f7ff f846 	bl	80024e0 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e020      	b.n	80034a4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003462:	4b12      	ldr	r3, [pc, #72]	; (80034ac <HAL_RCC_OscConfig+0x4a8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0f0      	beq.n	8003450 <HAL_RCC_OscConfig+0x44c>
 800346e:	e018      	b.n	80034a2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003470:	4b10      	ldr	r3, [pc, #64]	; (80034b4 <HAL_RCC_OscConfig+0x4b0>)
 8003472:	2200      	movs	r2, #0
 8003474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003476:	f7ff f833 	bl	80024e0 <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800347e:	f7ff f82f 	bl	80024e0 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e009      	b.n	80034a4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003490:	4b06      	ldr	r3, [pc, #24]	; (80034ac <HAL_RCC_OscConfig+0x4a8>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1f0      	bne.n	800347e <HAL_RCC_OscConfig+0x47a>
 800349c:	e001      	b.n	80034a2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e000      	b.n	80034a4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40023800 	.word	0x40023800
 80034b0:	40007000 	.word	0x40007000
 80034b4:	42470060 	.word	0x42470060

080034b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e056      	b.n	8003578 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d106      	bne.n	80034ea <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7fe fdc7 	bl	8002078 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2202      	movs	r2, #2
 80034ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003500:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	431a      	orrs	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	431a      	orrs	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	ea42 0103 	orr.w	r1, r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	0c1b      	lsrs	r3, r3, #16
 8003548:	f003 0104 	and.w	r1, r3, #4
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	69da      	ldr	r2, [r3, #28]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003566:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	603b      	str	r3, [r7, #0]
 800358c:	4613      	mov	r3, r2
 800358e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003590:	2300      	movs	r3, #0
 8003592:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800359a:	2b01      	cmp	r3, #1
 800359c:	d101      	bne.n	80035a2 <HAL_SPI_Transmit+0x22>
 800359e:	2302      	movs	r3, #2
 80035a0:	e11e      	b.n	80037e0 <HAL_SPI_Transmit+0x260>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035aa:	f7fe ff99 	bl	80024e0 <HAL_GetTick>
 80035ae:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80035b0:	88fb      	ldrh	r3, [r7, #6]
 80035b2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d002      	beq.n	80035c6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80035c0:	2302      	movs	r3, #2
 80035c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035c4:	e103      	b.n	80037ce <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <HAL_SPI_Transmit+0x52>
 80035cc:	88fb      	ldrh	r3, [r7, #6]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d102      	bne.n	80035d8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035d6:	e0fa      	b.n	80037ce <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2203      	movs	r2, #3
 80035dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	88fa      	ldrh	r2, [r7, #6]
 80035f0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	88fa      	ldrh	r2, [r7, #6]
 80035f6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800361e:	d107      	bne.n	8003630 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800362e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363a:	2b40      	cmp	r3, #64	; 0x40
 800363c:	d007      	beq.n	800364e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800364c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003656:	d14b      	bne.n	80036f0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d002      	beq.n	8003666 <HAL_SPI_Transmit+0xe6>
 8003660:	8afb      	ldrh	r3, [r7, #22]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d13e      	bne.n	80036e4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366a:	881a      	ldrh	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	1c9a      	adds	r2, r3, #2
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003680:	b29b      	uxth	r3, r3
 8003682:	3b01      	subs	r3, #1
 8003684:	b29a      	uxth	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800368a:	e02b      	b.n	80036e4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b02      	cmp	r3, #2
 8003698:	d112      	bne.n	80036c0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	881a      	ldrh	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036aa:	1c9a      	adds	r2, r3, #2
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	3b01      	subs	r3, #1
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	86da      	strh	r2, [r3, #54]	; 0x36
 80036be:	e011      	b.n	80036e4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036c0:	f7fe ff0e 	bl	80024e0 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d803      	bhi.n	80036d8 <HAL_SPI_Transmit+0x158>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d6:	d102      	bne.n	80036de <HAL_SPI_Transmit+0x15e>
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d102      	bne.n	80036e4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036e2:	e074      	b.n	80037ce <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1ce      	bne.n	800368c <HAL_SPI_Transmit+0x10c>
 80036ee:	e04c      	b.n	800378a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d002      	beq.n	80036fe <HAL_SPI_Transmit+0x17e>
 80036f8:	8afb      	ldrh	r3, [r7, #22]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d140      	bne.n	8003780 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	330c      	adds	r3, #12
 8003708:	7812      	ldrb	r2, [r2, #0]
 800370a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003710:	1c5a      	adds	r2, r3, #1
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800371a:	b29b      	uxth	r3, r3
 800371c:	3b01      	subs	r3, #1
 800371e:	b29a      	uxth	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003724:	e02c      	b.n	8003780 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b02      	cmp	r3, #2
 8003732:	d113      	bne.n	800375c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	330c      	adds	r3, #12
 800373e:	7812      	ldrb	r2, [r2, #0]
 8003740:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	1c5a      	adds	r2, r3, #1
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003750:	b29b      	uxth	r3, r3
 8003752:	3b01      	subs	r3, #1
 8003754:	b29a      	uxth	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	86da      	strh	r2, [r3, #54]	; 0x36
 800375a:	e011      	b.n	8003780 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800375c:	f7fe fec0 	bl	80024e0 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d803      	bhi.n	8003774 <HAL_SPI_Transmit+0x1f4>
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003772:	d102      	bne.n	800377a <HAL_SPI_Transmit+0x1fa>
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d102      	bne.n	8003780 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800377e:	e026      	b.n	80037ce <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003784:	b29b      	uxth	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1cd      	bne.n	8003726 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	6839      	ldr	r1, [r7, #0]
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 f894 	bl	80038bc <SPI_EndRxTxTransaction>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2220      	movs	r2, #32
 800379e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10a      	bne.n	80037be <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037a8:	2300      	movs	r3, #0
 80037aa:	613b      	str	r3, [r7, #16]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	613b      	str	r3, [r7, #16]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	613b      	str	r3, [r7, #16]
 80037bc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	77fb      	strb	r3, [r7, #31]
 80037ca:	e000      	b.n	80037ce <HAL_SPI_Transmit+0x24e>
  }

error:
 80037cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80037de:	7ffb      	ldrb	r3, [r7, #31]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3720      	adds	r7, #32
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	603b      	str	r3, [r7, #0]
 80037f4:	4613      	mov	r3, r2
 80037f6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037f8:	e04c      	b.n	8003894 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003800:	d048      	beq.n	8003894 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003802:	f7fe fe6d 	bl	80024e0 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d902      	bls.n	8003818 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d13d      	bne.n	8003894 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003826:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003830:	d111      	bne.n	8003856 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800383a:	d004      	beq.n	8003846 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003844:	d107      	bne.n	8003856 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003854:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800385e:	d10f      	bne.n	8003880 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800387e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e00f      	b.n	80038b4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	4013      	ands	r3, r2
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	bf0c      	ite	eq
 80038a4:	2301      	moveq	r3, #1
 80038a6:	2300      	movne	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	461a      	mov	r2, r3
 80038ac:	79fb      	ldrb	r3, [r7, #7]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d1a3      	bne.n	80037fa <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b088      	sub	sp, #32
 80038c0:	af02      	add	r7, sp, #8
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80038c8:	4b1b      	ldr	r3, [pc, #108]	; (8003938 <SPI_EndRxTxTransaction+0x7c>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a1b      	ldr	r2, [pc, #108]	; (800393c <SPI_EndRxTxTransaction+0x80>)
 80038ce:	fba2 2303 	umull	r2, r3, r2, r3
 80038d2:	0d5b      	lsrs	r3, r3, #21
 80038d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038d8:	fb02 f303 	mul.w	r3, r2, r3
 80038dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038e6:	d112      	bne.n	800390e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2200      	movs	r2, #0
 80038f0:	2180      	movs	r1, #128	; 0x80
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f7ff ff78 	bl	80037e8 <SPI_WaitFlagStateUntilTimeout>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d016      	beq.n	800392c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003902:	f043 0220 	orr.w	r2, r3, #32
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e00f      	b.n	800392e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00a      	beq.n	800392a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	3b01      	subs	r3, #1
 8003918:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003924:	2b80      	cmp	r3, #128	; 0x80
 8003926:	d0f2      	beq.n	800390e <SPI_EndRxTxTransaction+0x52>
 8003928:	e000      	b.n	800392c <SPI_EndRxTxTransaction+0x70>
        break;
 800392a:	bf00      	nop
  }

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	20000008 	.word	0x20000008
 800393c:	165e9f81 	.word	0x165e9f81

08003940 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e01d      	b.n	800398e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d106      	bne.n	800396c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7fe fc16 	bl	8002198 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3304      	adds	r3, #4
 800397c:	4619      	mov	r1, r3
 800397e:	4610      	mov	r0, r2
 8003980:	f000 fa0c 	bl	8003d9c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b082      	sub	sp, #8
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d101      	bne.n	80039a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e01d      	b.n	80039e4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d106      	bne.n	80039c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 f815 	bl	80039ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2202      	movs	r2, #2
 80039c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	3304      	adds	r3, #4
 80039d2:	4619      	mov	r1, r3
 80039d4:	4610      	mov	r0, r2
 80039d6:	f000 f9e1 	bl	8003d9c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	6839      	ldr	r1, [r7, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 fc12 	bl	800423c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a15      	ldr	r2, [pc, #84]	; (8003a74 <HAL_TIM_PWM_Start+0x74>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d004      	beq.n	8003a2c <HAL_TIM_PWM_Start+0x2c>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a14      	ldr	r2, [pc, #80]	; (8003a78 <HAL_TIM_PWM_Start+0x78>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d101      	bne.n	8003a30 <HAL_TIM_PWM_Start+0x30>
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e000      	b.n	8003a32 <HAL_TIM_PWM_Start+0x32>
 8003a30:	2300      	movs	r3, #0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d007      	beq.n	8003a46 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2b06      	cmp	r3, #6
 8003a56:	d007      	beq.n	8003a68 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0201 	orr.w	r2, r2, #1
 8003a66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	40010000 	.word	0x40010000
 8003a78:	40010400 	.word	0x40010400

08003a7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e083      	b.n	8003b98 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d106      	bne.n	8003aaa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f7fe fb2f 	bl	8002108 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2202      	movs	r2, #2
 8003aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6812      	ldr	r2, [r2, #0]
 8003abc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ac0:	f023 0307 	bic.w	r3, r3, #7
 8003ac4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	3304      	adds	r3, #4
 8003ace:	4619      	mov	r1, r3
 8003ad0:	4610      	mov	r0, r2
 8003ad2:	f000 f963 	bl	8003d9c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003afe:	f023 0303 	bic.w	r3, r3, #3
 8003b02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	021b      	lsls	r3, r3, #8
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003b1c:	f023 030c 	bic.w	r3, r3, #12
 8003b20:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	021b      	lsls	r3, r3, #8
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	011a      	lsls	r2, r3, #4
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	031b      	lsls	r3, r3, #12
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003b5a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003b62:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3718      	adds	r7, #24
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d002      	beq.n	8003bb6 <HAL_TIM_Encoder_Start+0x16>
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d008      	beq.n	8003bc6 <HAL_TIM_Encoder_Start+0x26>
 8003bb4:	e00f      	b.n	8003bd6 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 fb3c 	bl	800423c <TIM_CCxChannelCmd>
      break;
 8003bc4:	e016      	b.n	8003bf4 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	2104      	movs	r1, #4
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 fb34 	bl	800423c <TIM_CCxChannelCmd>
      break;
 8003bd4:	e00e      	b.n	8003bf4 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	2100      	movs	r1, #0
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 fb2c 	bl	800423c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2201      	movs	r2, #1
 8003bea:	2104      	movs	r1, #4
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 fb25 	bl	800423c <TIM_CCxChannelCmd>
      break;
 8003bf2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0201 	orr.w	r2, r2, #1
 8003c02:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
	...

08003c10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d101      	bne.n	8003c2a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003c26:	2302      	movs	r3, #2
 8003c28:	e0b4      	b.n	8003d94 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2202      	movs	r2, #2
 8003c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b0c      	cmp	r3, #12
 8003c3e:	f200 809f 	bhi.w	8003d80 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003c42:	a201      	add	r2, pc, #4	; (adr r2, 8003c48 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c48:	08003c7d 	.word	0x08003c7d
 8003c4c:	08003d81 	.word	0x08003d81
 8003c50:	08003d81 	.word	0x08003d81
 8003c54:	08003d81 	.word	0x08003d81
 8003c58:	08003cbd 	.word	0x08003cbd
 8003c5c:	08003d81 	.word	0x08003d81
 8003c60:	08003d81 	.word	0x08003d81
 8003c64:	08003d81 	.word	0x08003d81
 8003c68:	08003cff 	.word	0x08003cff
 8003c6c:	08003d81 	.word	0x08003d81
 8003c70:	08003d81 	.word	0x08003d81
 8003c74:	08003d81 	.word	0x08003d81
 8003c78:	08003d3f 	.word	0x08003d3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68b9      	ldr	r1, [r7, #8]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 f92a 	bl	8003edc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699a      	ldr	r2, [r3, #24]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0208 	orr.w	r2, r2, #8
 8003c96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699a      	ldr	r2, [r3, #24]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0204 	bic.w	r2, r2, #4
 8003ca6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6999      	ldr	r1, [r3, #24]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	691a      	ldr	r2, [r3, #16]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	619a      	str	r2, [r3, #24]
      break;
 8003cba:	e062      	b.n	8003d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68b9      	ldr	r1, [r7, #8]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 f97a 	bl	8003fbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	699a      	ldr	r2, [r3, #24]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	699a      	ldr	r2, [r3, #24]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ce6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6999      	ldr	r1, [r3, #24]
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	021a      	lsls	r2, r3, #8
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	619a      	str	r2, [r3, #24]
      break;
 8003cfc:	e041      	b.n	8003d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68b9      	ldr	r1, [r7, #8]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 f9cf 	bl	80040a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	69da      	ldr	r2, [r3, #28]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f042 0208 	orr.w	r2, r2, #8
 8003d18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	69da      	ldr	r2, [r3, #28]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0204 	bic.w	r2, r2, #4
 8003d28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	69d9      	ldr	r1, [r3, #28]
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	691a      	ldr	r2, [r3, #16]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	61da      	str	r2, [r3, #28]
      break;
 8003d3c:	e021      	b.n	8003d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68b9      	ldr	r1, [r7, #8]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 fa23 	bl	8004190 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	69da      	ldr	r2, [r3, #28]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	69da      	ldr	r2, [r3, #28]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	69d9      	ldr	r1, [r3, #28]
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	021a      	lsls	r2, r3, #8
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	61da      	str	r2, [r3, #28]
      break;
 8003d7e:	e000      	b.n	8003d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003d80:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a40      	ldr	r2, [pc, #256]	; (8003eb0 <TIM_Base_SetConfig+0x114>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d013      	beq.n	8003ddc <TIM_Base_SetConfig+0x40>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dba:	d00f      	beq.n	8003ddc <TIM_Base_SetConfig+0x40>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a3d      	ldr	r2, [pc, #244]	; (8003eb4 <TIM_Base_SetConfig+0x118>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d00b      	beq.n	8003ddc <TIM_Base_SetConfig+0x40>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a3c      	ldr	r2, [pc, #240]	; (8003eb8 <TIM_Base_SetConfig+0x11c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d007      	beq.n	8003ddc <TIM_Base_SetConfig+0x40>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a3b      	ldr	r2, [pc, #236]	; (8003ebc <TIM_Base_SetConfig+0x120>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d003      	beq.n	8003ddc <TIM_Base_SetConfig+0x40>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a3a      	ldr	r2, [pc, #232]	; (8003ec0 <TIM_Base_SetConfig+0x124>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d108      	bne.n	8003dee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a2f      	ldr	r2, [pc, #188]	; (8003eb0 <TIM_Base_SetConfig+0x114>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d02b      	beq.n	8003e4e <TIM_Base_SetConfig+0xb2>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dfc:	d027      	beq.n	8003e4e <TIM_Base_SetConfig+0xb2>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a2c      	ldr	r2, [pc, #176]	; (8003eb4 <TIM_Base_SetConfig+0x118>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d023      	beq.n	8003e4e <TIM_Base_SetConfig+0xb2>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a2b      	ldr	r2, [pc, #172]	; (8003eb8 <TIM_Base_SetConfig+0x11c>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d01f      	beq.n	8003e4e <TIM_Base_SetConfig+0xb2>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a2a      	ldr	r2, [pc, #168]	; (8003ebc <TIM_Base_SetConfig+0x120>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d01b      	beq.n	8003e4e <TIM_Base_SetConfig+0xb2>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a29      	ldr	r2, [pc, #164]	; (8003ec0 <TIM_Base_SetConfig+0x124>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d017      	beq.n	8003e4e <TIM_Base_SetConfig+0xb2>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a28      	ldr	r2, [pc, #160]	; (8003ec4 <TIM_Base_SetConfig+0x128>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d013      	beq.n	8003e4e <TIM_Base_SetConfig+0xb2>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a27      	ldr	r2, [pc, #156]	; (8003ec8 <TIM_Base_SetConfig+0x12c>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d00f      	beq.n	8003e4e <TIM_Base_SetConfig+0xb2>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a26      	ldr	r2, [pc, #152]	; (8003ecc <TIM_Base_SetConfig+0x130>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d00b      	beq.n	8003e4e <TIM_Base_SetConfig+0xb2>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a25      	ldr	r2, [pc, #148]	; (8003ed0 <TIM_Base_SetConfig+0x134>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d007      	beq.n	8003e4e <TIM_Base_SetConfig+0xb2>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a24      	ldr	r2, [pc, #144]	; (8003ed4 <TIM_Base_SetConfig+0x138>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d003      	beq.n	8003e4e <TIM_Base_SetConfig+0xb2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a23      	ldr	r2, [pc, #140]	; (8003ed8 <TIM_Base_SetConfig+0x13c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d108      	bne.n	8003e60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a0a      	ldr	r2, [pc, #40]	; (8003eb0 <TIM_Base_SetConfig+0x114>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d003      	beq.n	8003e94 <TIM_Base_SetConfig+0xf8>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a0c      	ldr	r2, [pc, #48]	; (8003ec0 <TIM_Base_SetConfig+0x124>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d103      	bne.n	8003e9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	691a      	ldr	r2, [r3, #16]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	615a      	str	r2, [r3, #20]
}
 8003ea2:	bf00      	nop
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	40010000 	.word	0x40010000
 8003eb4:	40000400 	.word	0x40000400
 8003eb8:	40000800 	.word	0x40000800
 8003ebc:	40000c00 	.word	0x40000c00
 8003ec0:	40010400 	.word	0x40010400
 8003ec4:	40014000 	.word	0x40014000
 8003ec8:	40014400 	.word	0x40014400
 8003ecc:	40014800 	.word	0x40014800
 8003ed0:	40001800 	.word	0x40001800
 8003ed4:	40001c00 	.word	0x40001c00
 8003ed8:	40002000 	.word	0x40002000

08003edc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b087      	sub	sp, #28
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	f023 0201 	bic.w	r2, r3, #1
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f023 0303 	bic.w	r3, r3, #3
 8003f12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f023 0302 	bic.w	r3, r3, #2
 8003f24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a20      	ldr	r2, [pc, #128]	; (8003fb4 <TIM_OC1_SetConfig+0xd8>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d003      	beq.n	8003f40 <TIM_OC1_SetConfig+0x64>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a1f      	ldr	r2, [pc, #124]	; (8003fb8 <TIM_OC1_SetConfig+0xdc>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d10c      	bne.n	8003f5a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	f023 0308 	bic.w	r3, r3, #8
 8003f46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f023 0304 	bic.w	r3, r3, #4
 8003f58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a15      	ldr	r2, [pc, #84]	; (8003fb4 <TIM_OC1_SetConfig+0xd8>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d003      	beq.n	8003f6a <TIM_OC1_SetConfig+0x8e>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a14      	ldr	r2, [pc, #80]	; (8003fb8 <TIM_OC1_SetConfig+0xdc>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d111      	bne.n	8003f8e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	621a      	str	r2, [r3, #32]
}
 8003fa8:	bf00      	nop
 8003faa:	371c      	adds	r7, #28
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	40010000 	.word	0x40010000
 8003fb8:	40010400 	.word	0x40010400

08003fbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	f023 0210 	bic.w	r2, r3, #16
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	021b      	lsls	r3, r3, #8
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f023 0320 	bic.w	r3, r3, #32
 8004006:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	011b      	lsls	r3, r3, #4
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	4313      	orrs	r3, r2
 8004012:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a22      	ldr	r2, [pc, #136]	; (80040a0 <TIM_OC2_SetConfig+0xe4>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d003      	beq.n	8004024 <TIM_OC2_SetConfig+0x68>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a21      	ldr	r2, [pc, #132]	; (80040a4 <TIM_OC2_SetConfig+0xe8>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d10d      	bne.n	8004040 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800402a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	011b      	lsls	r3, r3, #4
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	4313      	orrs	r3, r2
 8004036:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800403e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a17      	ldr	r2, [pc, #92]	; (80040a0 <TIM_OC2_SetConfig+0xe4>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d003      	beq.n	8004050 <TIM_OC2_SetConfig+0x94>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a16      	ldr	r2, [pc, #88]	; (80040a4 <TIM_OC2_SetConfig+0xe8>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d113      	bne.n	8004078 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004056:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800405e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	4313      	orrs	r3, r2
 800406a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4313      	orrs	r3, r2
 8004076:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	621a      	str	r2, [r3, #32]
}
 8004092:	bf00      	nop
 8004094:	371c      	adds	r7, #28
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	40010000 	.word	0x40010000
 80040a4:	40010400 	.word	0x40010400

080040a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f023 0303 	bic.w	r3, r3, #3
 80040de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	021b      	lsls	r3, r3, #8
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a21      	ldr	r2, [pc, #132]	; (8004188 <TIM_OC3_SetConfig+0xe0>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d003      	beq.n	800410e <TIM_OC3_SetConfig+0x66>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a20      	ldr	r2, [pc, #128]	; (800418c <TIM_OC3_SetConfig+0xe4>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d10d      	bne.n	800412a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004114:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	021b      	lsls	r3, r3, #8
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	4313      	orrs	r3, r2
 8004120:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004128:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a16      	ldr	r2, [pc, #88]	; (8004188 <TIM_OC3_SetConfig+0xe0>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d003      	beq.n	800413a <TIM_OC3_SetConfig+0x92>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a15      	ldr	r2, [pc, #84]	; (800418c <TIM_OC3_SetConfig+0xe4>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d113      	bne.n	8004162 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004140:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004148:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	011b      	lsls	r3, r3, #4
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	4313      	orrs	r3, r2
 8004154:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	4313      	orrs	r3, r2
 8004160:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	621a      	str	r2, [r3, #32]
}
 800417c:	bf00      	nop
 800417e:	371c      	adds	r7, #28
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	40010000 	.word	0x40010000
 800418c:	40010400 	.word	0x40010400

08004190 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004190:	b480      	push	{r7}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	021b      	lsls	r3, r3, #8
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	031b      	lsls	r3, r3, #12
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a12      	ldr	r2, [pc, #72]	; (8004234 <TIM_OC4_SetConfig+0xa4>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d003      	beq.n	80041f8 <TIM_OC4_SetConfig+0x68>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a11      	ldr	r2, [pc, #68]	; (8004238 <TIM_OC4_SetConfig+0xa8>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d109      	bne.n	800420c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	019b      	lsls	r3, r3, #6
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	4313      	orrs	r3, r2
 800420a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	621a      	str	r2, [r3, #32]
}
 8004226:	bf00      	nop
 8004228:	371c      	adds	r7, #28
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	40010000 	.word	0x40010000
 8004238:	40010400 	.word	0x40010400

0800423c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f003 031f 	and.w	r3, r3, #31
 800424e:	2201      	movs	r2, #1
 8004250:	fa02 f303 	lsl.w	r3, r2, r3
 8004254:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6a1a      	ldr	r2, [r3, #32]
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	43db      	mvns	r3, r3
 800425e:	401a      	ands	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6a1a      	ldr	r2, [r3, #32]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	f003 031f 	and.w	r3, r3, #31
 800426e:	6879      	ldr	r1, [r7, #4]
 8004270:	fa01 f303 	lsl.w	r3, r1, r3
 8004274:	431a      	orrs	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	621a      	str	r2, [r3, #32]
}
 800427a:	bf00      	nop
 800427c:	371c      	adds	r7, #28
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
	...

08004288 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004298:	2b01      	cmp	r3, #1
 800429a:	d101      	bne.n	80042a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800429c:	2302      	movs	r3, #2
 800429e:	e05a      	b.n	8004356 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2202      	movs	r2, #2
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a21      	ldr	r2, [pc, #132]	; (8004364 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d022      	beq.n	800432a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ec:	d01d      	beq.n	800432a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a1d      	ldr	r2, [pc, #116]	; (8004368 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d018      	beq.n	800432a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a1b      	ldr	r2, [pc, #108]	; (800436c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d013      	beq.n	800432a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a1a      	ldr	r2, [pc, #104]	; (8004370 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d00e      	beq.n	800432a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a18      	ldr	r2, [pc, #96]	; (8004374 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d009      	beq.n	800432a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a17      	ldr	r2, [pc, #92]	; (8004378 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d004      	beq.n	800432a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a15      	ldr	r2, [pc, #84]	; (800437c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d10c      	bne.n	8004344 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004330:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	4313      	orrs	r3, r2
 800433a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	40010000 	.word	0x40010000
 8004368:	40000400 	.word	0x40000400
 800436c:	40000800 	.word	0x40000800
 8004370:	40000c00 	.word	0x40000c00
 8004374:	40010400 	.word	0x40010400
 8004378:	40014000 	.word	0x40014000
 800437c:	40001800 	.word	0x40001800

08004380 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e03f      	b.n	8004412 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d106      	bne.n	80043ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7fd ff52 	bl	8002250 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2224      	movs	r2, #36	; 0x24
 80043b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 f829 	bl	800441c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	691a      	ldr	r2, [r3, #16]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695a      	ldr	r2, [r3, #20]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68da      	ldr	r2, [r3, #12]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2220      	movs	r2, #32
 8004404:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2220      	movs	r2, #32
 800440c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
	...

0800441c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800441c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004420:	b085      	sub	sp, #20
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68da      	ldr	r2, [r3, #12]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	430a      	orrs	r2, r1
 800443a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	431a      	orrs	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	4313      	orrs	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800445e:	f023 030c 	bic.w	r3, r3, #12
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6812      	ldr	r2, [r2, #0]
 8004466:	68f9      	ldr	r1, [r7, #12]
 8004468:	430b      	orrs	r3, r1
 800446a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	699a      	ldr	r2, [r3, #24]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800448a:	f040 818b 	bne.w	80047a4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4ac1      	ldr	r2, [pc, #772]	; (8004798 <UART_SetConfig+0x37c>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d005      	beq.n	80044a4 <UART_SetConfig+0x88>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4abf      	ldr	r2, [pc, #764]	; (800479c <UART_SetConfig+0x380>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	f040 80bd 	bne.w	800461e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044a4:	f7fe fbfa 	bl	8002c9c <HAL_RCC_GetPCLK2Freq>
 80044a8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	461d      	mov	r5, r3
 80044ae:	f04f 0600 	mov.w	r6, #0
 80044b2:	46a8      	mov	r8, r5
 80044b4:	46b1      	mov	r9, r6
 80044b6:	eb18 0308 	adds.w	r3, r8, r8
 80044ba:	eb49 0409 	adc.w	r4, r9, r9
 80044be:	4698      	mov	r8, r3
 80044c0:	46a1      	mov	r9, r4
 80044c2:	eb18 0805 	adds.w	r8, r8, r5
 80044c6:	eb49 0906 	adc.w	r9, r9, r6
 80044ca:	f04f 0100 	mov.w	r1, #0
 80044ce:	f04f 0200 	mov.w	r2, #0
 80044d2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80044d6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80044da:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80044de:	4688      	mov	r8, r1
 80044e0:	4691      	mov	r9, r2
 80044e2:	eb18 0005 	adds.w	r0, r8, r5
 80044e6:	eb49 0106 	adc.w	r1, r9, r6
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	461d      	mov	r5, r3
 80044f0:	f04f 0600 	mov.w	r6, #0
 80044f4:	196b      	adds	r3, r5, r5
 80044f6:	eb46 0406 	adc.w	r4, r6, r6
 80044fa:	461a      	mov	r2, r3
 80044fc:	4623      	mov	r3, r4
 80044fe:	f7fc fbe3 	bl	8000cc8 <__aeabi_uldivmod>
 8004502:	4603      	mov	r3, r0
 8004504:	460c      	mov	r4, r1
 8004506:	461a      	mov	r2, r3
 8004508:	4ba5      	ldr	r3, [pc, #660]	; (80047a0 <UART_SetConfig+0x384>)
 800450a:	fba3 2302 	umull	r2, r3, r3, r2
 800450e:	095b      	lsrs	r3, r3, #5
 8004510:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	461d      	mov	r5, r3
 8004518:	f04f 0600 	mov.w	r6, #0
 800451c:	46a9      	mov	r9, r5
 800451e:	46b2      	mov	sl, r6
 8004520:	eb19 0309 	adds.w	r3, r9, r9
 8004524:	eb4a 040a 	adc.w	r4, sl, sl
 8004528:	4699      	mov	r9, r3
 800452a:	46a2      	mov	sl, r4
 800452c:	eb19 0905 	adds.w	r9, r9, r5
 8004530:	eb4a 0a06 	adc.w	sl, sl, r6
 8004534:	f04f 0100 	mov.w	r1, #0
 8004538:	f04f 0200 	mov.w	r2, #0
 800453c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004540:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004544:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004548:	4689      	mov	r9, r1
 800454a:	4692      	mov	sl, r2
 800454c:	eb19 0005 	adds.w	r0, r9, r5
 8004550:	eb4a 0106 	adc.w	r1, sl, r6
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	461d      	mov	r5, r3
 800455a:	f04f 0600 	mov.w	r6, #0
 800455e:	196b      	adds	r3, r5, r5
 8004560:	eb46 0406 	adc.w	r4, r6, r6
 8004564:	461a      	mov	r2, r3
 8004566:	4623      	mov	r3, r4
 8004568:	f7fc fbae 	bl	8000cc8 <__aeabi_uldivmod>
 800456c:	4603      	mov	r3, r0
 800456e:	460c      	mov	r4, r1
 8004570:	461a      	mov	r2, r3
 8004572:	4b8b      	ldr	r3, [pc, #556]	; (80047a0 <UART_SetConfig+0x384>)
 8004574:	fba3 1302 	umull	r1, r3, r3, r2
 8004578:	095b      	lsrs	r3, r3, #5
 800457a:	2164      	movs	r1, #100	; 0x64
 800457c:	fb01 f303 	mul.w	r3, r1, r3
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	3332      	adds	r3, #50	; 0x32
 8004586:	4a86      	ldr	r2, [pc, #536]	; (80047a0 <UART_SetConfig+0x384>)
 8004588:	fba2 2303 	umull	r2, r3, r2, r3
 800458c:	095b      	lsrs	r3, r3, #5
 800458e:	005b      	lsls	r3, r3, #1
 8004590:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004594:	4498      	add	r8, r3
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	461d      	mov	r5, r3
 800459a:	f04f 0600 	mov.w	r6, #0
 800459e:	46a9      	mov	r9, r5
 80045a0:	46b2      	mov	sl, r6
 80045a2:	eb19 0309 	adds.w	r3, r9, r9
 80045a6:	eb4a 040a 	adc.w	r4, sl, sl
 80045aa:	4699      	mov	r9, r3
 80045ac:	46a2      	mov	sl, r4
 80045ae:	eb19 0905 	adds.w	r9, r9, r5
 80045b2:	eb4a 0a06 	adc.w	sl, sl, r6
 80045b6:	f04f 0100 	mov.w	r1, #0
 80045ba:	f04f 0200 	mov.w	r2, #0
 80045be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80045c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80045ca:	4689      	mov	r9, r1
 80045cc:	4692      	mov	sl, r2
 80045ce:	eb19 0005 	adds.w	r0, r9, r5
 80045d2:	eb4a 0106 	adc.w	r1, sl, r6
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	461d      	mov	r5, r3
 80045dc:	f04f 0600 	mov.w	r6, #0
 80045e0:	196b      	adds	r3, r5, r5
 80045e2:	eb46 0406 	adc.w	r4, r6, r6
 80045e6:	461a      	mov	r2, r3
 80045e8:	4623      	mov	r3, r4
 80045ea:	f7fc fb6d 	bl	8000cc8 <__aeabi_uldivmod>
 80045ee:	4603      	mov	r3, r0
 80045f0:	460c      	mov	r4, r1
 80045f2:	461a      	mov	r2, r3
 80045f4:	4b6a      	ldr	r3, [pc, #424]	; (80047a0 <UART_SetConfig+0x384>)
 80045f6:	fba3 1302 	umull	r1, r3, r3, r2
 80045fa:	095b      	lsrs	r3, r3, #5
 80045fc:	2164      	movs	r1, #100	; 0x64
 80045fe:	fb01 f303 	mul.w	r3, r1, r3
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	3332      	adds	r3, #50	; 0x32
 8004608:	4a65      	ldr	r2, [pc, #404]	; (80047a0 <UART_SetConfig+0x384>)
 800460a:	fba2 2303 	umull	r2, r3, r2, r3
 800460e:	095b      	lsrs	r3, r3, #5
 8004610:	f003 0207 	and.w	r2, r3, #7
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4442      	add	r2, r8
 800461a:	609a      	str	r2, [r3, #8]
 800461c:	e26f      	b.n	8004afe <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800461e:	f7fe fb29 	bl	8002c74 <HAL_RCC_GetPCLK1Freq>
 8004622:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	461d      	mov	r5, r3
 8004628:	f04f 0600 	mov.w	r6, #0
 800462c:	46a8      	mov	r8, r5
 800462e:	46b1      	mov	r9, r6
 8004630:	eb18 0308 	adds.w	r3, r8, r8
 8004634:	eb49 0409 	adc.w	r4, r9, r9
 8004638:	4698      	mov	r8, r3
 800463a:	46a1      	mov	r9, r4
 800463c:	eb18 0805 	adds.w	r8, r8, r5
 8004640:	eb49 0906 	adc.w	r9, r9, r6
 8004644:	f04f 0100 	mov.w	r1, #0
 8004648:	f04f 0200 	mov.w	r2, #0
 800464c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004650:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004654:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004658:	4688      	mov	r8, r1
 800465a:	4691      	mov	r9, r2
 800465c:	eb18 0005 	adds.w	r0, r8, r5
 8004660:	eb49 0106 	adc.w	r1, r9, r6
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	461d      	mov	r5, r3
 800466a:	f04f 0600 	mov.w	r6, #0
 800466e:	196b      	adds	r3, r5, r5
 8004670:	eb46 0406 	adc.w	r4, r6, r6
 8004674:	461a      	mov	r2, r3
 8004676:	4623      	mov	r3, r4
 8004678:	f7fc fb26 	bl	8000cc8 <__aeabi_uldivmod>
 800467c:	4603      	mov	r3, r0
 800467e:	460c      	mov	r4, r1
 8004680:	461a      	mov	r2, r3
 8004682:	4b47      	ldr	r3, [pc, #284]	; (80047a0 <UART_SetConfig+0x384>)
 8004684:	fba3 2302 	umull	r2, r3, r3, r2
 8004688:	095b      	lsrs	r3, r3, #5
 800468a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	461d      	mov	r5, r3
 8004692:	f04f 0600 	mov.w	r6, #0
 8004696:	46a9      	mov	r9, r5
 8004698:	46b2      	mov	sl, r6
 800469a:	eb19 0309 	adds.w	r3, r9, r9
 800469e:	eb4a 040a 	adc.w	r4, sl, sl
 80046a2:	4699      	mov	r9, r3
 80046a4:	46a2      	mov	sl, r4
 80046a6:	eb19 0905 	adds.w	r9, r9, r5
 80046aa:	eb4a 0a06 	adc.w	sl, sl, r6
 80046ae:	f04f 0100 	mov.w	r1, #0
 80046b2:	f04f 0200 	mov.w	r2, #0
 80046b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80046be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80046c2:	4689      	mov	r9, r1
 80046c4:	4692      	mov	sl, r2
 80046c6:	eb19 0005 	adds.w	r0, r9, r5
 80046ca:	eb4a 0106 	adc.w	r1, sl, r6
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	461d      	mov	r5, r3
 80046d4:	f04f 0600 	mov.w	r6, #0
 80046d8:	196b      	adds	r3, r5, r5
 80046da:	eb46 0406 	adc.w	r4, r6, r6
 80046de:	461a      	mov	r2, r3
 80046e0:	4623      	mov	r3, r4
 80046e2:	f7fc faf1 	bl	8000cc8 <__aeabi_uldivmod>
 80046e6:	4603      	mov	r3, r0
 80046e8:	460c      	mov	r4, r1
 80046ea:	461a      	mov	r2, r3
 80046ec:	4b2c      	ldr	r3, [pc, #176]	; (80047a0 <UART_SetConfig+0x384>)
 80046ee:	fba3 1302 	umull	r1, r3, r3, r2
 80046f2:	095b      	lsrs	r3, r3, #5
 80046f4:	2164      	movs	r1, #100	; 0x64
 80046f6:	fb01 f303 	mul.w	r3, r1, r3
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	00db      	lsls	r3, r3, #3
 80046fe:	3332      	adds	r3, #50	; 0x32
 8004700:	4a27      	ldr	r2, [pc, #156]	; (80047a0 <UART_SetConfig+0x384>)
 8004702:	fba2 2303 	umull	r2, r3, r2, r3
 8004706:	095b      	lsrs	r3, r3, #5
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800470e:	4498      	add	r8, r3
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	461d      	mov	r5, r3
 8004714:	f04f 0600 	mov.w	r6, #0
 8004718:	46a9      	mov	r9, r5
 800471a:	46b2      	mov	sl, r6
 800471c:	eb19 0309 	adds.w	r3, r9, r9
 8004720:	eb4a 040a 	adc.w	r4, sl, sl
 8004724:	4699      	mov	r9, r3
 8004726:	46a2      	mov	sl, r4
 8004728:	eb19 0905 	adds.w	r9, r9, r5
 800472c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004730:	f04f 0100 	mov.w	r1, #0
 8004734:	f04f 0200 	mov.w	r2, #0
 8004738:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800473c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004740:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004744:	4689      	mov	r9, r1
 8004746:	4692      	mov	sl, r2
 8004748:	eb19 0005 	adds.w	r0, r9, r5
 800474c:	eb4a 0106 	adc.w	r1, sl, r6
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	461d      	mov	r5, r3
 8004756:	f04f 0600 	mov.w	r6, #0
 800475a:	196b      	adds	r3, r5, r5
 800475c:	eb46 0406 	adc.w	r4, r6, r6
 8004760:	461a      	mov	r2, r3
 8004762:	4623      	mov	r3, r4
 8004764:	f7fc fab0 	bl	8000cc8 <__aeabi_uldivmod>
 8004768:	4603      	mov	r3, r0
 800476a:	460c      	mov	r4, r1
 800476c:	461a      	mov	r2, r3
 800476e:	4b0c      	ldr	r3, [pc, #48]	; (80047a0 <UART_SetConfig+0x384>)
 8004770:	fba3 1302 	umull	r1, r3, r3, r2
 8004774:	095b      	lsrs	r3, r3, #5
 8004776:	2164      	movs	r1, #100	; 0x64
 8004778:	fb01 f303 	mul.w	r3, r1, r3
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	3332      	adds	r3, #50	; 0x32
 8004782:	4a07      	ldr	r2, [pc, #28]	; (80047a0 <UART_SetConfig+0x384>)
 8004784:	fba2 2303 	umull	r2, r3, r2, r3
 8004788:	095b      	lsrs	r3, r3, #5
 800478a:	f003 0207 	and.w	r2, r3, #7
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4442      	add	r2, r8
 8004794:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004796:	e1b2      	b.n	8004afe <UART_SetConfig+0x6e2>
 8004798:	40011000 	.word	0x40011000
 800479c:	40011400 	.word	0x40011400
 80047a0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4ad7      	ldr	r2, [pc, #860]	; (8004b08 <UART_SetConfig+0x6ec>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d005      	beq.n	80047ba <UART_SetConfig+0x39e>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4ad6      	ldr	r2, [pc, #856]	; (8004b0c <UART_SetConfig+0x6f0>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	f040 80d1 	bne.w	800495c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80047ba:	f7fe fa6f 	bl	8002c9c <HAL_RCC_GetPCLK2Freq>
 80047be:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	469a      	mov	sl, r3
 80047c4:	f04f 0b00 	mov.w	fp, #0
 80047c8:	46d0      	mov	r8, sl
 80047ca:	46d9      	mov	r9, fp
 80047cc:	eb18 0308 	adds.w	r3, r8, r8
 80047d0:	eb49 0409 	adc.w	r4, r9, r9
 80047d4:	4698      	mov	r8, r3
 80047d6:	46a1      	mov	r9, r4
 80047d8:	eb18 080a 	adds.w	r8, r8, sl
 80047dc:	eb49 090b 	adc.w	r9, r9, fp
 80047e0:	f04f 0100 	mov.w	r1, #0
 80047e4:	f04f 0200 	mov.w	r2, #0
 80047e8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80047ec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80047f0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80047f4:	4688      	mov	r8, r1
 80047f6:	4691      	mov	r9, r2
 80047f8:	eb1a 0508 	adds.w	r5, sl, r8
 80047fc:	eb4b 0609 	adc.w	r6, fp, r9
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	4619      	mov	r1, r3
 8004806:	f04f 0200 	mov.w	r2, #0
 800480a:	f04f 0300 	mov.w	r3, #0
 800480e:	f04f 0400 	mov.w	r4, #0
 8004812:	0094      	lsls	r4, r2, #2
 8004814:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004818:	008b      	lsls	r3, r1, #2
 800481a:	461a      	mov	r2, r3
 800481c:	4623      	mov	r3, r4
 800481e:	4628      	mov	r0, r5
 8004820:	4631      	mov	r1, r6
 8004822:	f7fc fa51 	bl	8000cc8 <__aeabi_uldivmod>
 8004826:	4603      	mov	r3, r0
 8004828:	460c      	mov	r4, r1
 800482a:	461a      	mov	r2, r3
 800482c:	4bb8      	ldr	r3, [pc, #736]	; (8004b10 <UART_SetConfig+0x6f4>)
 800482e:	fba3 2302 	umull	r2, r3, r3, r2
 8004832:	095b      	lsrs	r3, r3, #5
 8004834:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	469b      	mov	fp, r3
 800483c:	f04f 0c00 	mov.w	ip, #0
 8004840:	46d9      	mov	r9, fp
 8004842:	46e2      	mov	sl, ip
 8004844:	eb19 0309 	adds.w	r3, r9, r9
 8004848:	eb4a 040a 	adc.w	r4, sl, sl
 800484c:	4699      	mov	r9, r3
 800484e:	46a2      	mov	sl, r4
 8004850:	eb19 090b 	adds.w	r9, r9, fp
 8004854:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004858:	f04f 0100 	mov.w	r1, #0
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004864:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004868:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800486c:	4689      	mov	r9, r1
 800486e:	4692      	mov	sl, r2
 8004870:	eb1b 0509 	adds.w	r5, fp, r9
 8004874:	eb4c 060a 	adc.w	r6, ip, sl
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	4619      	mov	r1, r3
 800487e:	f04f 0200 	mov.w	r2, #0
 8004882:	f04f 0300 	mov.w	r3, #0
 8004886:	f04f 0400 	mov.w	r4, #0
 800488a:	0094      	lsls	r4, r2, #2
 800488c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004890:	008b      	lsls	r3, r1, #2
 8004892:	461a      	mov	r2, r3
 8004894:	4623      	mov	r3, r4
 8004896:	4628      	mov	r0, r5
 8004898:	4631      	mov	r1, r6
 800489a:	f7fc fa15 	bl	8000cc8 <__aeabi_uldivmod>
 800489e:	4603      	mov	r3, r0
 80048a0:	460c      	mov	r4, r1
 80048a2:	461a      	mov	r2, r3
 80048a4:	4b9a      	ldr	r3, [pc, #616]	; (8004b10 <UART_SetConfig+0x6f4>)
 80048a6:	fba3 1302 	umull	r1, r3, r3, r2
 80048aa:	095b      	lsrs	r3, r3, #5
 80048ac:	2164      	movs	r1, #100	; 0x64
 80048ae:	fb01 f303 	mul.w	r3, r1, r3
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	011b      	lsls	r3, r3, #4
 80048b6:	3332      	adds	r3, #50	; 0x32
 80048b8:	4a95      	ldr	r2, [pc, #596]	; (8004b10 <UART_SetConfig+0x6f4>)
 80048ba:	fba2 2303 	umull	r2, r3, r2, r3
 80048be:	095b      	lsrs	r3, r3, #5
 80048c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048c4:	4498      	add	r8, r3
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	469b      	mov	fp, r3
 80048ca:	f04f 0c00 	mov.w	ip, #0
 80048ce:	46d9      	mov	r9, fp
 80048d0:	46e2      	mov	sl, ip
 80048d2:	eb19 0309 	adds.w	r3, r9, r9
 80048d6:	eb4a 040a 	adc.w	r4, sl, sl
 80048da:	4699      	mov	r9, r3
 80048dc:	46a2      	mov	sl, r4
 80048de:	eb19 090b 	adds.w	r9, r9, fp
 80048e2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80048e6:	f04f 0100 	mov.w	r1, #0
 80048ea:	f04f 0200 	mov.w	r2, #0
 80048ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80048f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80048fa:	4689      	mov	r9, r1
 80048fc:	4692      	mov	sl, r2
 80048fe:	eb1b 0509 	adds.w	r5, fp, r9
 8004902:	eb4c 060a 	adc.w	r6, ip, sl
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	4619      	mov	r1, r3
 800490c:	f04f 0200 	mov.w	r2, #0
 8004910:	f04f 0300 	mov.w	r3, #0
 8004914:	f04f 0400 	mov.w	r4, #0
 8004918:	0094      	lsls	r4, r2, #2
 800491a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800491e:	008b      	lsls	r3, r1, #2
 8004920:	461a      	mov	r2, r3
 8004922:	4623      	mov	r3, r4
 8004924:	4628      	mov	r0, r5
 8004926:	4631      	mov	r1, r6
 8004928:	f7fc f9ce 	bl	8000cc8 <__aeabi_uldivmod>
 800492c:	4603      	mov	r3, r0
 800492e:	460c      	mov	r4, r1
 8004930:	461a      	mov	r2, r3
 8004932:	4b77      	ldr	r3, [pc, #476]	; (8004b10 <UART_SetConfig+0x6f4>)
 8004934:	fba3 1302 	umull	r1, r3, r3, r2
 8004938:	095b      	lsrs	r3, r3, #5
 800493a:	2164      	movs	r1, #100	; 0x64
 800493c:	fb01 f303 	mul.w	r3, r1, r3
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	011b      	lsls	r3, r3, #4
 8004944:	3332      	adds	r3, #50	; 0x32
 8004946:	4a72      	ldr	r2, [pc, #456]	; (8004b10 <UART_SetConfig+0x6f4>)
 8004948:	fba2 2303 	umull	r2, r3, r2, r3
 800494c:	095b      	lsrs	r3, r3, #5
 800494e:	f003 020f 	and.w	r2, r3, #15
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4442      	add	r2, r8
 8004958:	609a      	str	r2, [r3, #8]
 800495a:	e0d0      	b.n	8004afe <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800495c:	f7fe f98a 	bl	8002c74 <HAL_RCC_GetPCLK1Freq>
 8004960:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	469a      	mov	sl, r3
 8004966:	f04f 0b00 	mov.w	fp, #0
 800496a:	46d0      	mov	r8, sl
 800496c:	46d9      	mov	r9, fp
 800496e:	eb18 0308 	adds.w	r3, r8, r8
 8004972:	eb49 0409 	adc.w	r4, r9, r9
 8004976:	4698      	mov	r8, r3
 8004978:	46a1      	mov	r9, r4
 800497a:	eb18 080a 	adds.w	r8, r8, sl
 800497e:	eb49 090b 	adc.w	r9, r9, fp
 8004982:	f04f 0100 	mov.w	r1, #0
 8004986:	f04f 0200 	mov.w	r2, #0
 800498a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800498e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004992:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004996:	4688      	mov	r8, r1
 8004998:	4691      	mov	r9, r2
 800499a:	eb1a 0508 	adds.w	r5, sl, r8
 800499e:	eb4b 0609 	adc.w	r6, fp, r9
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	4619      	mov	r1, r3
 80049a8:	f04f 0200 	mov.w	r2, #0
 80049ac:	f04f 0300 	mov.w	r3, #0
 80049b0:	f04f 0400 	mov.w	r4, #0
 80049b4:	0094      	lsls	r4, r2, #2
 80049b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80049ba:	008b      	lsls	r3, r1, #2
 80049bc:	461a      	mov	r2, r3
 80049be:	4623      	mov	r3, r4
 80049c0:	4628      	mov	r0, r5
 80049c2:	4631      	mov	r1, r6
 80049c4:	f7fc f980 	bl	8000cc8 <__aeabi_uldivmod>
 80049c8:	4603      	mov	r3, r0
 80049ca:	460c      	mov	r4, r1
 80049cc:	461a      	mov	r2, r3
 80049ce:	4b50      	ldr	r3, [pc, #320]	; (8004b10 <UART_SetConfig+0x6f4>)
 80049d0:	fba3 2302 	umull	r2, r3, r3, r2
 80049d4:	095b      	lsrs	r3, r3, #5
 80049d6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	469b      	mov	fp, r3
 80049de:	f04f 0c00 	mov.w	ip, #0
 80049e2:	46d9      	mov	r9, fp
 80049e4:	46e2      	mov	sl, ip
 80049e6:	eb19 0309 	adds.w	r3, r9, r9
 80049ea:	eb4a 040a 	adc.w	r4, sl, sl
 80049ee:	4699      	mov	r9, r3
 80049f0:	46a2      	mov	sl, r4
 80049f2:	eb19 090b 	adds.w	r9, r9, fp
 80049f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80049fa:	f04f 0100 	mov.w	r1, #0
 80049fe:	f04f 0200 	mov.w	r2, #0
 8004a02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a06:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a0a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a0e:	4689      	mov	r9, r1
 8004a10:	4692      	mov	sl, r2
 8004a12:	eb1b 0509 	adds.w	r5, fp, r9
 8004a16:	eb4c 060a 	adc.w	r6, ip, sl
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	4619      	mov	r1, r3
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	f04f 0300 	mov.w	r3, #0
 8004a28:	f04f 0400 	mov.w	r4, #0
 8004a2c:	0094      	lsls	r4, r2, #2
 8004a2e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a32:	008b      	lsls	r3, r1, #2
 8004a34:	461a      	mov	r2, r3
 8004a36:	4623      	mov	r3, r4
 8004a38:	4628      	mov	r0, r5
 8004a3a:	4631      	mov	r1, r6
 8004a3c:	f7fc f944 	bl	8000cc8 <__aeabi_uldivmod>
 8004a40:	4603      	mov	r3, r0
 8004a42:	460c      	mov	r4, r1
 8004a44:	461a      	mov	r2, r3
 8004a46:	4b32      	ldr	r3, [pc, #200]	; (8004b10 <UART_SetConfig+0x6f4>)
 8004a48:	fba3 1302 	umull	r1, r3, r3, r2
 8004a4c:	095b      	lsrs	r3, r3, #5
 8004a4e:	2164      	movs	r1, #100	; 0x64
 8004a50:	fb01 f303 	mul.w	r3, r1, r3
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	011b      	lsls	r3, r3, #4
 8004a58:	3332      	adds	r3, #50	; 0x32
 8004a5a:	4a2d      	ldr	r2, [pc, #180]	; (8004b10 <UART_SetConfig+0x6f4>)
 8004a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a60:	095b      	lsrs	r3, r3, #5
 8004a62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a66:	4498      	add	r8, r3
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	469b      	mov	fp, r3
 8004a6c:	f04f 0c00 	mov.w	ip, #0
 8004a70:	46d9      	mov	r9, fp
 8004a72:	46e2      	mov	sl, ip
 8004a74:	eb19 0309 	adds.w	r3, r9, r9
 8004a78:	eb4a 040a 	adc.w	r4, sl, sl
 8004a7c:	4699      	mov	r9, r3
 8004a7e:	46a2      	mov	sl, r4
 8004a80:	eb19 090b 	adds.w	r9, r9, fp
 8004a84:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004a88:	f04f 0100 	mov.w	r1, #0
 8004a8c:	f04f 0200 	mov.w	r2, #0
 8004a90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a9c:	4689      	mov	r9, r1
 8004a9e:	4692      	mov	sl, r2
 8004aa0:	eb1b 0509 	adds.w	r5, fp, r9
 8004aa4:	eb4c 060a 	adc.w	r6, ip, sl
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	4619      	mov	r1, r3
 8004aae:	f04f 0200 	mov.w	r2, #0
 8004ab2:	f04f 0300 	mov.w	r3, #0
 8004ab6:	f04f 0400 	mov.w	r4, #0
 8004aba:	0094      	lsls	r4, r2, #2
 8004abc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ac0:	008b      	lsls	r3, r1, #2
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	4623      	mov	r3, r4
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	4631      	mov	r1, r6
 8004aca:	f7fc f8fd 	bl	8000cc8 <__aeabi_uldivmod>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	460c      	mov	r4, r1
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	4b0e      	ldr	r3, [pc, #56]	; (8004b10 <UART_SetConfig+0x6f4>)
 8004ad6:	fba3 1302 	umull	r1, r3, r3, r2
 8004ada:	095b      	lsrs	r3, r3, #5
 8004adc:	2164      	movs	r1, #100	; 0x64
 8004ade:	fb01 f303 	mul.w	r3, r1, r3
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	011b      	lsls	r3, r3, #4
 8004ae6:	3332      	adds	r3, #50	; 0x32
 8004ae8:	4a09      	ldr	r2, [pc, #36]	; (8004b10 <UART_SetConfig+0x6f4>)
 8004aea:	fba2 2303 	umull	r2, r3, r2, r3
 8004aee:	095b      	lsrs	r3, r3, #5
 8004af0:	f003 020f 	and.w	r2, r3, #15
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4442      	add	r2, r8
 8004afa:	609a      	str	r2, [r3, #8]
}
 8004afc:	e7ff      	b.n	8004afe <UART_SetConfig+0x6e2>
 8004afe:	bf00      	nop
 8004b00:	3714      	adds	r7, #20
 8004b02:	46bd      	mov	sp, r7
 8004b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b08:	40011000 	.word	0x40011000
 8004b0c:	40011400 	.word	0x40011400
 8004b10:	51eb851f 	.word	0x51eb851f

08004b14 <__errno>:
 8004b14:	4b01      	ldr	r3, [pc, #4]	; (8004b1c <__errno+0x8>)
 8004b16:	6818      	ldr	r0, [r3, #0]
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	20000014 	.word	0x20000014

08004b20 <__libc_init_array>:
 8004b20:	b570      	push	{r4, r5, r6, lr}
 8004b22:	4e0d      	ldr	r6, [pc, #52]	; (8004b58 <__libc_init_array+0x38>)
 8004b24:	4c0d      	ldr	r4, [pc, #52]	; (8004b5c <__libc_init_array+0x3c>)
 8004b26:	1ba4      	subs	r4, r4, r6
 8004b28:	10a4      	asrs	r4, r4, #2
 8004b2a:	2500      	movs	r5, #0
 8004b2c:	42a5      	cmp	r5, r4
 8004b2e:	d109      	bne.n	8004b44 <__libc_init_array+0x24>
 8004b30:	4e0b      	ldr	r6, [pc, #44]	; (8004b60 <__libc_init_array+0x40>)
 8004b32:	4c0c      	ldr	r4, [pc, #48]	; (8004b64 <__libc_init_array+0x44>)
 8004b34:	f002 f942 	bl	8006dbc <_init>
 8004b38:	1ba4      	subs	r4, r4, r6
 8004b3a:	10a4      	asrs	r4, r4, #2
 8004b3c:	2500      	movs	r5, #0
 8004b3e:	42a5      	cmp	r5, r4
 8004b40:	d105      	bne.n	8004b4e <__libc_init_array+0x2e>
 8004b42:	bd70      	pop	{r4, r5, r6, pc}
 8004b44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b48:	4798      	blx	r3
 8004b4a:	3501      	adds	r5, #1
 8004b4c:	e7ee      	b.n	8004b2c <__libc_init_array+0xc>
 8004b4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b52:	4798      	blx	r3
 8004b54:	3501      	adds	r5, #1
 8004b56:	e7f2      	b.n	8004b3e <__libc_init_array+0x1e>
 8004b58:	080078a8 	.word	0x080078a8
 8004b5c:	080078a8 	.word	0x080078a8
 8004b60:	080078a8 	.word	0x080078a8
 8004b64:	080078ac 	.word	0x080078ac

08004b68 <memset>:
 8004b68:	4402      	add	r2, r0
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d100      	bne.n	8004b72 <memset+0xa>
 8004b70:	4770      	bx	lr
 8004b72:	f803 1b01 	strb.w	r1, [r3], #1
 8004b76:	e7f9      	b.n	8004b6c <memset+0x4>

08004b78 <__cvt>:
 8004b78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b7c:	ec55 4b10 	vmov	r4, r5, d0
 8004b80:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004b82:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004b86:	2d00      	cmp	r5, #0
 8004b88:	460e      	mov	r6, r1
 8004b8a:	4691      	mov	r9, r2
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	bfb8      	it	lt
 8004b90:	4622      	movlt	r2, r4
 8004b92:	462b      	mov	r3, r5
 8004b94:	f027 0720 	bic.w	r7, r7, #32
 8004b98:	bfbb      	ittet	lt
 8004b9a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004b9e:	461d      	movlt	r5, r3
 8004ba0:	2300      	movge	r3, #0
 8004ba2:	232d      	movlt	r3, #45	; 0x2d
 8004ba4:	bfb8      	it	lt
 8004ba6:	4614      	movlt	r4, r2
 8004ba8:	2f46      	cmp	r7, #70	; 0x46
 8004baa:	700b      	strb	r3, [r1, #0]
 8004bac:	d004      	beq.n	8004bb8 <__cvt+0x40>
 8004bae:	2f45      	cmp	r7, #69	; 0x45
 8004bb0:	d100      	bne.n	8004bb4 <__cvt+0x3c>
 8004bb2:	3601      	adds	r6, #1
 8004bb4:	2102      	movs	r1, #2
 8004bb6:	e000      	b.n	8004bba <__cvt+0x42>
 8004bb8:	2103      	movs	r1, #3
 8004bba:	ab03      	add	r3, sp, #12
 8004bbc:	9301      	str	r3, [sp, #4]
 8004bbe:	ab02      	add	r3, sp, #8
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	4632      	mov	r2, r6
 8004bc4:	4653      	mov	r3, sl
 8004bc6:	ec45 4b10 	vmov	d0, r4, r5
 8004bca:	f000 fcdd 	bl	8005588 <_dtoa_r>
 8004bce:	2f47      	cmp	r7, #71	; 0x47
 8004bd0:	4680      	mov	r8, r0
 8004bd2:	d102      	bne.n	8004bda <__cvt+0x62>
 8004bd4:	f019 0f01 	tst.w	r9, #1
 8004bd8:	d026      	beq.n	8004c28 <__cvt+0xb0>
 8004bda:	2f46      	cmp	r7, #70	; 0x46
 8004bdc:	eb08 0906 	add.w	r9, r8, r6
 8004be0:	d111      	bne.n	8004c06 <__cvt+0x8e>
 8004be2:	f898 3000 	ldrb.w	r3, [r8]
 8004be6:	2b30      	cmp	r3, #48	; 0x30
 8004be8:	d10a      	bne.n	8004c00 <__cvt+0x88>
 8004bea:	2200      	movs	r2, #0
 8004bec:	2300      	movs	r3, #0
 8004bee:	4620      	mov	r0, r4
 8004bf0:	4629      	mov	r1, r5
 8004bf2:	f7fb ff89 	bl	8000b08 <__aeabi_dcmpeq>
 8004bf6:	b918      	cbnz	r0, 8004c00 <__cvt+0x88>
 8004bf8:	f1c6 0601 	rsb	r6, r6, #1
 8004bfc:	f8ca 6000 	str.w	r6, [sl]
 8004c00:	f8da 3000 	ldr.w	r3, [sl]
 8004c04:	4499      	add	r9, r3
 8004c06:	2200      	movs	r2, #0
 8004c08:	2300      	movs	r3, #0
 8004c0a:	4620      	mov	r0, r4
 8004c0c:	4629      	mov	r1, r5
 8004c0e:	f7fb ff7b 	bl	8000b08 <__aeabi_dcmpeq>
 8004c12:	b938      	cbnz	r0, 8004c24 <__cvt+0xac>
 8004c14:	2230      	movs	r2, #48	; 0x30
 8004c16:	9b03      	ldr	r3, [sp, #12]
 8004c18:	454b      	cmp	r3, r9
 8004c1a:	d205      	bcs.n	8004c28 <__cvt+0xb0>
 8004c1c:	1c59      	adds	r1, r3, #1
 8004c1e:	9103      	str	r1, [sp, #12]
 8004c20:	701a      	strb	r2, [r3, #0]
 8004c22:	e7f8      	b.n	8004c16 <__cvt+0x9e>
 8004c24:	f8cd 900c 	str.w	r9, [sp, #12]
 8004c28:	9b03      	ldr	r3, [sp, #12]
 8004c2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c2c:	eba3 0308 	sub.w	r3, r3, r8
 8004c30:	4640      	mov	r0, r8
 8004c32:	6013      	str	r3, [r2, #0]
 8004c34:	b004      	add	sp, #16
 8004c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004c3a <__exponent>:
 8004c3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c3c:	2900      	cmp	r1, #0
 8004c3e:	4604      	mov	r4, r0
 8004c40:	bfba      	itte	lt
 8004c42:	4249      	neglt	r1, r1
 8004c44:	232d      	movlt	r3, #45	; 0x2d
 8004c46:	232b      	movge	r3, #43	; 0x2b
 8004c48:	2909      	cmp	r1, #9
 8004c4a:	f804 2b02 	strb.w	r2, [r4], #2
 8004c4e:	7043      	strb	r3, [r0, #1]
 8004c50:	dd20      	ble.n	8004c94 <__exponent+0x5a>
 8004c52:	f10d 0307 	add.w	r3, sp, #7
 8004c56:	461f      	mov	r7, r3
 8004c58:	260a      	movs	r6, #10
 8004c5a:	fb91 f5f6 	sdiv	r5, r1, r6
 8004c5e:	fb06 1115 	mls	r1, r6, r5, r1
 8004c62:	3130      	adds	r1, #48	; 0x30
 8004c64:	2d09      	cmp	r5, #9
 8004c66:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004c6a:	f103 32ff 	add.w	r2, r3, #4294967295
 8004c6e:	4629      	mov	r1, r5
 8004c70:	dc09      	bgt.n	8004c86 <__exponent+0x4c>
 8004c72:	3130      	adds	r1, #48	; 0x30
 8004c74:	3b02      	subs	r3, #2
 8004c76:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004c7a:	42bb      	cmp	r3, r7
 8004c7c:	4622      	mov	r2, r4
 8004c7e:	d304      	bcc.n	8004c8a <__exponent+0x50>
 8004c80:	1a10      	subs	r0, r2, r0
 8004c82:	b003      	add	sp, #12
 8004c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c86:	4613      	mov	r3, r2
 8004c88:	e7e7      	b.n	8004c5a <__exponent+0x20>
 8004c8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c8e:	f804 2b01 	strb.w	r2, [r4], #1
 8004c92:	e7f2      	b.n	8004c7a <__exponent+0x40>
 8004c94:	2330      	movs	r3, #48	; 0x30
 8004c96:	4419      	add	r1, r3
 8004c98:	7083      	strb	r3, [r0, #2]
 8004c9a:	1d02      	adds	r2, r0, #4
 8004c9c:	70c1      	strb	r1, [r0, #3]
 8004c9e:	e7ef      	b.n	8004c80 <__exponent+0x46>

08004ca0 <_printf_float>:
 8004ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ca4:	b08d      	sub	sp, #52	; 0x34
 8004ca6:	460c      	mov	r4, r1
 8004ca8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004cac:	4616      	mov	r6, r2
 8004cae:	461f      	mov	r7, r3
 8004cb0:	4605      	mov	r5, r0
 8004cb2:	f001 fa21 	bl	80060f8 <_localeconv_r>
 8004cb6:	6803      	ldr	r3, [r0, #0]
 8004cb8:	9304      	str	r3, [sp, #16]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fb faa8 	bl	8000210 <strlen>
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	930a      	str	r3, [sp, #40]	; 0x28
 8004cc4:	f8d8 3000 	ldr.w	r3, [r8]
 8004cc8:	9005      	str	r0, [sp, #20]
 8004cca:	3307      	adds	r3, #7
 8004ccc:	f023 0307 	bic.w	r3, r3, #7
 8004cd0:	f103 0208 	add.w	r2, r3, #8
 8004cd4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004cd8:	f8d4 b000 	ldr.w	fp, [r4]
 8004cdc:	f8c8 2000 	str.w	r2, [r8]
 8004ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004ce8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004cec:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004cf0:	9307      	str	r3, [sp, #28]
 8004cf2:	f8cd 8018 	str.w	r8, [sp, #24]
 8004cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8004cfa:	4ba7      	ldr	r3, [pc, #668]	; (8004f98 <_printf_float+0x2f8>)
 8004cfc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d00:	f7fb ff34 	bl	8000b6c <__aeabi_dcmpun>
 8004d04:	bb70      	cbnz	r0, 8004d64 <_printf_float+0xc4>
 8004d06:	f04f 32ff 	mov.w	r2, #4294967295
 8004d0a:	4ba3      	ldr	r3, [pc, #652]	; (8004f98 <_printf_float+0x2f8>)
 8004d0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d10:	f7fb ff0e 	bl	8000b30 <__aeabi_dcmple>
 8004d14:	bb30      	cbnz	r0, 8004d64 <_printf_float+0xc4>
 8004d16:	2200      	movs	r2, #0
 8004d18:	2300      	movs	r3, #0
 8004d1a:	4640      	mov	r0, r8
 8004d1c:	4649      	mov	r1, r9
 8004d1e:	f7fb fefd 	bl	8000b1c <__aeabi_dcmplt>
 8004d22:	b110      	cbz	r0, 8004d2a <_printf_float+0x8a>
 8004d24:	232d      	movs	r3, #45	; 0x2d
 8004d26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d2a:	4a9c      	ldr	r2, [pc, #624]	; (8004f9c <_printf_float+0x2fc>)
 8004d2c:	4b9c      	ldr	r3, [pc, #624]	; (8004fa0 <_printf_float+0x300>)
 8004d2e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004d32:	bf8c      	ite	hi
 8004d34:	4690      	movhi	r8, r2
 8004d36:	4698      	movls	r8, r3
 8004d38:	2303      	movs	r3, #3
 8004d3a:	f02b 0204 	bic.w	r2, fp, #4
 8004d3e:	6123      	str	r3, [r4, #16]
 8004d40:	6022      	str	r2, [r4, #0]
 8004d42:	f04f 0900 	mov.w	r9, #0
 8004d46:	9700      	str	r7, [sp, #0]
 8004d48:	4633      	mov	r3, r6
 8004d4a:	aa0b      	add	r2, sp, #44	; 0x2c
 8004d4c:	4621      	mov	r1, r4
 8004d4e:	4628      	mov	r0, r5
 8004d50:	f000 f9e6 	bl	8005120 <_printf_common>
 8004d54:	3001      	adds	r0, #1
 8004d56:	f040 808d 	bne.w	8004e74 <_printf_float+0x1d4>
 8004d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d5e:	b00d      	add	sp, #52	; 0x34
 8004d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d64:	4642      	mov	r2, r8
 8004d66:	464b      	mov	r3, r9
 8004d68:	4640      	mov	r0, r8
 8004d6a:	4649      	mov	r1, r9
 8004d6c:	f7fb fefe 	bl	8000b6c <__aeabi_dcmpun>
 8004d70:	b110      	cbz	r0, 8004d78 <_printf_float+0xd8>
 8004d72:	4a8c      	ldr	r2, [pc, #560]	; (8004fa4 <_printf_float+0x304>)
 8004d74:	4b8c      	ldr	r3, [pc, #560]	; (8004fa8 <_printf_float+0x308>)
 8004d76:	e7da      	b.n	8004d2e <_printf_float+0x8e>
 8004d78:	6861      	ldr	r1, [r4, #4]
 8004d7a:	1c4b      	adds	r3, r1, #1
 8004d7c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004d80:	a80a      	add	r0, sp, #40	; 0x28
 8004d82:	d13e      	bne.n	8004e02 <_printf_float+0x162>
 8004d84:	2306      	movs	r3, #6
 8004d86:	6063      	str	r3, [r4, #4]
 8004d88:	2300      	movs	r3, #0
 8004d8a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004d8e:	ab09      	add	r3, sp, #36	; 0x24
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	ec49 8b10 	vmov	d0, r8, r9
 8004d96:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004d9a:	6022      	str	r2, [r4, #0]
 8004d9c:	f8cd a004 	str.w	sl, [sp, #4]
 8004da0:	6861      	ldr	r1, [r4, #4]
 8004da2:	4628      	mov	r0, r5
 8004da4:	f7ff fee8 	bl	8004b78 <__cvt>
 8004da8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004dac:	2b47      	cmp	r3, #71	; 0x47
 8004dae:	4680      	mov	r8, r0
 8004db0:	d109      	bne.n	8004dc6 <_printf_float+0x126>
 8004db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004db4:	1cd8      	adds	r0, r3, #3
 8004db6:	db02      	blt.n	8004dbe <_printf_float+0x11e>
 8004db8:	6862      	ldr	r2, [r4, #4]
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	dd47      	ble.n	8004e4e <_printf_float+0x1ae>
 8004dbe:	f1aa 0a02 	sub.w	sl, sl, #2
 8004dc2:	fa5f fa8a 	uxtb.w	sl, sl
 8004dc6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004dca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004dcc:	d824      	bhi.n	8004e18 <_printf_float+0x178>
 8004dce:	3901      	subs	r1, #1
 8004dd0:	4652      	mov	r2, sl
 8004dd2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004dd6:	9109      	str	r1, [sp, #36]	; 0x24
 8004dd8:	f7ff ff2f 	bl	8004c3a <__exponent>
 8004ddc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004dde:	1813      	adds	r3, r2, r0
 8004de0:	2a01      	cmp	r2, #1
 8004de2:	4681      	mov	r9, r0
 8004de4:	6123      	str	r3, [r4, #16]
 8004de6:	dc02      	bgt.n	8004dee <_printf_float+0x14e>
 8004de8:	6822      	ldr	r2, [r4, #0]
 8004dea:	07d1      	lsls	r1, r2, #31
 8004dec:	d501      	bpl.n	8004df2 <_printf_float+0x152>
 8004dee:	3301      	adds	r3, #1
 8004df0:	6123      	str	r3, [r4, #16]
 8004df2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d0a5      	beq.n	8004d46 <_printf_float+0xa6>
 8004dfa:	232d      	movs	r3, #45	; 0x2d
 8004dfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e00:	e7a1      	b.n	8004d46 <_printf_float+0xa6>
 8004e02:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004e06:	f000 8177 	beq.w	80050f8 <_printf_float+0x458>
 8004e0a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004e0e:	d1bb      	bne.n	8004d88 <_printf_float+0xe8>
 8004e10:	2900      	cmp	r1, #0
 8004e12:	d1b9      	bne.n	8004d88 <_printf_float+0xe8>
 8004e14:	2301      	movs	r3, #1
 8004e16:	e7b6      	b.n	8004d86 <_printf_float+0xe6>
 8004e18:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004e1c:	d119      	bne.n	8004e52 <_printf_float+0x1b2>
 8004e1e:	2900      	cmp	r1, #0
 8004e20:	6863      	ldr	r3, [r4, #4]
 8004e22:	dd0c      	ble.n	8004e3e <_printf_float+0x19e>
 8004e24:	6121      	str	r1, [r4, #16]
 8004e26:	b913      	cbnz	r3, 8004e2e <_printf_float+0x18e>
 8004e28:	6822      	ldr	r2, [r4, #0]
 8004e2a:	07d2      	lsls	r2, r2, #31
 8004e2c:	d502      	bpl.n	8004e34 <_printf_float+0x194>
 8004e2e:	3301      	adds	r3, #1
 8004e30:	440b      	add	r3, r1
 8004e32:	6123      	str	r3, [r4, #16]
 8004e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e36:	65a3      	str	r3, [r4, #88]	; 0x58
 8004e38:	f04f 0900 	mov.w	r9, #0
 8004e3c:	e7d9      	b.n	8004df2 <_printf_float+0x152>
 8004e3e:	b913      	cbnz	r3, 8004e46 <_printf_float+0x1a6>
 8004e40:	6822      	ldr	r2, [r4, #0]
 8004e42:	07d0      	lsls	r0, r2, #31
 8004e44:	d501      	bpl.n	8004e4a <_printf_float+0x1aa>
 8004e46:	3302      	adds	r3, #2
 8004e48:	e7f3      	b.n	8004e32 <_printf_float+0x192>
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e7f1      	b.n	8004e32 <_printf_float+0x192>
 8004e4e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004e52:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004e56:	4293      	cmp	r3, r2
 8004e58:	db05      	blt.n	8004e66 <_printf_float+0x1c6>
 8004e5a:	6822      	ldr	r2, [r4, #0]
 8004e5c:	6123      	str	r3, [r4, #16]
 8004e5e:	07d1      	lsls	r1, r2, #31
 8004e60:	d5e8      	bpl.n	8004e34 <_printf_float+0x194>
 8004e62:	3301      	adds	r3, #1
 8004e64:	e7e5      	b.n	8004e32 <_printf_float+0x192>
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	bfd4      	ite	le
 8004e6a:	f1c3 0302 	rsble	r3, r3, #2
 8004e6e:	2301      	movgt	r3, #1
 8004e70:	4413      	add	r3, r2
 8004e72:	e7de      	b.n	8004e32 <_printf_float+0x192>
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	055a      	lsls	r2, r3, #21
 8004e78:	d407      	bmi.n	8004e8a <_printf_float+0x1ea>
 8004e7a:	6923      	ldr	r3, [r4, #16]
 8004e7c:	4642      	mov	r2, r8
 8004e7e:	4631      	mov	r1, r6
 8004e80:	4628      	mov	r0, r5
 8004e82:	47b8      	blx	r7
 8004e84:	3001      	adds	r0, #1
 8004e86:	d12b      	bne.n	8004ee0 <_printf_float+0x240>
 8004e88:	e767      	b.n	8004d5a <_printf_float+0xba>
 8004e8a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004e8e:	f240 80dc 	bls.w	800504a <_printf_float+0x3aa>
 8004e92:	2200      	movs	r2, #0
 8004e94:	2300      	movs	r3, #0
 8004e96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e9a:	f7fb fe35 	bl	8000b08 <__aeabi_dcmpeq>
 8004e9e:	2800      	cmp	r0, #0
 8004ea0:	d033      	beq.n	8004f0a <_printf_float+0x26a>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	4a41      	ldr	r2, [pc, #260]	; (8004fac <_printf_float+0x30c>)
 8004ea6:	4631      	mov	r1, r6
 8004ea8:	4628      	mov	r0, r5
 8004eaa:	47b8      	blx	r7
 8004eac:	3001      	adds	r0, #1
 8004eae:	f43f af54 	beq.w	8004d5a <_printf_float+0xba>
 8004eb2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	db02      	blt.n	8004ec0 <_printf_float+0x220>
 8004eba:	6823      	ldr	r3, [r4, #0]
 8004ebc:	07d8      	lsls	r0, r3, #31
 8004ebe:	d50f      	bpl.n	8004ee0 <_printf_float+0x240>
 8004ec0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ec4:	4631      	mov	r1, r6
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	47b8      	blx	r7
 8004eca:	3001      	adds	r0, #1
 8004ecc:	f43f af45 	beq.w	8004d5a <_printf_float+0xba>
 8004ed0:	f04f 0800 	mov.w	r8, #0
 8004ed4:	f104 091a 	add.w	r9, r4, #26
 8004ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004eda:	3b01      	subs	r3, #1
 8004edc:	4543      	cmp	r3, r8
 8004ede:	dc09      	bgt.n	8004ef4 <_printf_float+0x254>
 8004ee0:	6823      	ldr	r3, [r4, #0]
 8004ee2:	079b      	lsls	r3, r3, #30
 8004ee4:	f100 8103 	bmi.w	80050ee <_printf_float+0x44e>
 8004ee8:	68e0      	ldr	r0, [r4, #12]
 8004eea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004eec:	4298      	cmp	r0, r3
 8004eee:	bfb8      	it	lt
 8004ef0:	4618      	movlt	r0, r3
 8004ef2:	e734      	b.n	8004d5e <_printf_float+0xbe>
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	464a      	mov	r2, r9
 8004ef8:	4631      	mov	r1, r6
 8004efa:	4628      	mov	r0, r5
 8004efc:	47b8      	blx	r7
 8004efe:	3001      	adds	r0, #1
 8004f00:	f43f af2b 	beq.w	8004d5a <_printf_float+0xba>
 8004f04:	f108 0801 	add.w	r8, r8, #1
 8004f08:	e7e6      	b.n	8004ed8 <_printf_float+0x238>
 8004f0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	dc2b      	bgt.n	8004f68 <_printf_float+0x2c8>
 8004f10:	2301      	movs	r3, #1
 8004f12:	4a26      	ldr	r2, [pc, #152]	; (8004fac <_printf_float+0x30c>)
 8004f14:	4631      	mov	r1, r6
 8004f16:	4628      	mov	r0, r5
 8004f18:	47b8      	blx	r7
 8004f1a:	3001      	adds	r0, #1
 8004f1c:	f43f af1d 	beq.w	8004d5a <_printf_float+0xba>
 8004f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f22:	b923      	cbnz	r3, 8004f2e <_printf_float+0x28e>
 8004f24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f26:	b913      	cbnz	r3, 8004f2e <_printf_float+0x28e>
 8004f28:	6823      	ldr	r3, [r4, #0]
 8004f2a:	07d9      	lsls	r1, r3, #31
 8004f2c:	d5d8      	bpl.n	8004ee0 <_printf_float+0x240>
 8004f2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f32:	4631      	mov	r1, r6
 8004f34:	4628      	mov	r0, r5
 8004f36:	47b8      	blx	r7
 8004f38:	3001      	adds	r0, #1
 8004f3a:	f43f af0e 	beq.w	8004d5a <_printf_float+0xba>
 8004f3e:	f04f 0900 	mov.w	r9, #0
 8004f42:	f104 0a1a 	add.w	sl, r4, #26
 8004f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f48:	425b      	negs	r3, r3
 8004f4a:	454b      	cmp	r3, r9
 8004f4c:	dc01      	bgt.n	8004f52 <_printf_float+0x2b2>
 8004f4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f50:	e794      	b.n	8004e7c <_printf_float+0x1dc>
 8004f52:	2301      	movs	r3, #1
 8004f54:	4652      	mov	r2, sl
 8004f56:	4631      	mov	r1, r6
 8004f58:	4628      	mov	r0, r5
 8004f5a:	47b8      	blx	r7
 8004f5c:	3001      	adds	r0, #1
 8004f5e:	f43f aefc 	beq.w	8004d5a <_printf_float+0xba>
 8004f62:	f109 0901 	add.w	r9, r9, #1
 8004f66:	e7ee      	b.n	8004f46 <_printf_float+0x2a6>
 8004f68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	bfa8      	it	ge
 8004f70:	461a      	movge	r2, r3
 8004f72:	2a00      	cmp	r2, #0
 8004f74:	4691      	mov	r9, r2
 8004f76:	dd07      	ble.n	8004f88 <_printf_float+0x2e8>
 8004f78:	4613      	mov	r3, r2
 8004f7a:	4631      	mov	r1, r6
 8004f7c:	4642      	mov	r2, r8
 8004f7e:	4628      	mov	r0, r5
 8004f80:	47b8      	blx	r7
 8004f82:	3001      	adds	r0, #1
 8004f84:	f43f aee9 	beq.w	8004d5a <_printf_float+0xba>
 8004f88:	f104 031a 	add.w	r3, r4, #26
 8004f8c:	f04f 0b00 	mov.w	fp, #0
 8004f90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f94:	9306      	str	r3, [sp, #24]
 8004f96:	e015      	b.n	8004fc4 <_printf_float+0x324>
 8004f98:	7fefffff 	.word	0x7fefffff
 8004f9c:	08007638 	.word	0x08007638
 8004fa0:	08007634 	.word	0x08007634
 8004fa4:	08007640 	.word	0x08007640
 8004fa8:	0800763c 	.word	0x0800763c
 8004fac:	08007644 	.word	0x08007644
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	9a06      	ldr	r2, [sp, #24]
 8004fb4:	4631      	mov	r1, r6
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	47b8      	blx	r7
 8004fba:	3001      	adds	r0, #1
 8004fbc:	f43f aecd 	beq.w	8004d5a <_printf_float+0xba>
 8004fc0:	f10b 0b01 	add.w	fp, fp, #1
 8004fc4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004fc8:	ebaa 0309 	sub.w	r3, sl, r9
 8004fcc:	455b      	cmp	r3, fp
 8004fce:	dcef      	bgt.n	8004fb0 <_printf_float+0x310>
 8004fd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	44d0      	add	r8, sl
 8004fd8:	db15      	blt.n	8005006 <_printf_float+0x366>
 8004fda:	6823      	ldr	r3, [r4, #0]
 8004fdc:	07da      	lsls	r2, r3, #31
 8004fde:	d412      	bmi.n	8005006 <_printf_float+0x366>
 8004fe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fe2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004fe4:	eba3 020a 	sub.w	r2, r3, sl
 8004fe8:	eba3 0a01 	sub.w	sl, r3, r1
 8004fec:	4592      	cmp	sl, r2
 8004fee:	bfa8      	it	ge
 8004ff0:	4692      	movge	sl, r2
 8004ff2:	f1ba 0f00 	cmp.w	sl, #0
 8004ff6:	dc0e      	bgt.n	8005016 <_printf_float+0x376>
 8004ff8:	f04f 0800 	mov.w	r8, #0
 8004ffc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005000:	f104 091a 	add.w	r9, r4, #26
 8005004:	e019      	b.n	800503a <_printf_float+0x39a>
 8005006:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800500a:	4631      	mov	r1, r6
 800500c:	4628      	mov	r0, r5
 800500e:	47b8      	blx	r7
 8005010:	3001      	adds	r0, #1
 8005012:	d1e5      	bne.n	8004fe0 <_printf_float+0x340>
 8005014:	e6a1      	b.n	8004d5a <_printf_float+0xba>
 8005016:	4653      	mov	r3, sl
 8005018:	4642      	mov	r2, r8
 800501a:	4631      	mov	r1, r6
 800501c:	4628      	mov	r0, r5
 800501e:	47b8      	blx	r7
 8005020:	3001      	adds	r0, #1
 8005022:	d1e9      	bne.n	8004ff8 <_printf_float+0x358>
 8005024:	e699      	b.n	8004d5a <_printf_float+0xba>
 8005026:	2301      	movs	r3, #1
 8005028:	464a      	mov	r2, r9
 800502a:	4631      	mov	r1, r6
 800502c:	4628      	mov	r0, r5
 800502e:	47b8      	blx	r7
 8005030:	3001      	adds	r0, #1
 8005032:	f43f ae92 	beq.w	8004d5a <_printf_float+0xba>
 8005036:	f108 0801 	add.w	r8, r8, #1
 800503a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800503e:	1a9b      	subs	r3, r3, r2
 8005040:	eba3 030a 	sub.w	r3, r3, sl
 8005044:	4543      	cmp	r3, r8
 8005046:	dcee      	bgt.n	8005026 <_printf_float+0x386>
 8005048:	e74a      	b.n	8004ee0 <_printf_float+0x240>
 800504a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800504c:	2a01      	cmp	r2, #1
 800504e:	dc01      	bgt.n	8005054 <_printf_float+0x3b4>
 8005050:	07db      	lsls	r3, r3, #31
 8005052:	d53a      	bpl.n	80050ca <_printf_float+0x42a>
 8005054:	2301      	movs	r3, #1
 8005056:	4642      	mov	r2, r8
 8005058:	4631      	mov	r1, r6
 800505a:	4628      	mov	r0, r5
 800505c:	47b8      	blx	r7
 800505e:	3001      	adds	r0, #1
 8005060:	f43f ae7b 	beq.w	8004d5a <_printf_float+0xba>
 8005064:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005068:	4631      	mov	r1, r6
 800506a:	4628      	mov	r0, r5
 800506c:	47b8      	blx	r7
 800506e:	3001      	adds	r0, #1
 8005070:	f108 0801 	add.w	r8, r8, #1
 8005074:	f43f ae71 	beq.w	8004d5a <_printf_float+0xba>
 8005078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800507a:	2200      	movs	r2, #0
 800507c:	f103 3aff 	add.w	sl, r3, #4294967295
 8005080:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005084:	2300      	movs	r3, #0
 8005086:	f7fb fd3f 	bl	8000b08 <__aeabi_dcmpeq>
 800508a:	b9c8      	cbnz	r0, 80050c0 <_printf_float+0x420>
 800508c:	4653      	mov	r3, sl
 800508e:	4642      	mov	r2, r8
 8005090:	4631      	mov	r1, r6
 8005092:	4628      	mov	r0, r5
 8005094:	47b8      	blx	r7
 8005096:	3001      	adds	r0, #1
 8005098:	d10e      	bne.n	80050b8 <_printf_float+0x418>
 800509a:	e65e      	b.n	8004d5a <_printf_float+0xba>
 800509c:	2301      	movs	r3, #1
 800509e:	4652      	mov	r2, sl
 80050a0:	4631      	mov	r1, r6
 80050a2:	4628      	mov	r0, r5
 80050a4:	47b8      	blx	r7
 80050a6:	3001      	adds	r0, #1
 80050a8:	f43f ae57 	beq.w	8004d5a <_printf_float+0xba>
 80050ac:	f108 0801 	add.w	r8, r8, #1
 80050b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050b2:	3b01      	subs	r3, #1
 80050b4:	4543      	cmp	r3, r8
 80050b6:	dcf1      	bgt.n	800509c <_printf_float+0x3fc>
 80050b8:	464b      	mov	r3, r9
 80050ba:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80050be:	e6de      	b.n	8004e7e <_printf_float+0x1de>
 80050c0:	f04f 0800 	mov.w	r8, #0
 80050c4:	f104 0a1a 	add.w	sl, r4, #26
 80050c8:	e7f2      	b.n	80050b0 <_printf_float+0x410>
 80050ca:	2301      	movs	r3, #1
 80050cc:	e7df      	b.n	800508e <_printf_float+0x3ee>
 80050ce:	2301      	movs	r3, #1
 80050d0:	464a      	mov	r2, r9
 80050d2:	4631      	mov	r1, r6
 80050d4:	4628      	mov	r0, r5
 80050d6:	47b8      	blx	r7
 80050d8:	3001      	adds	r0, #1
 80050da:	f43f ae3e 	beq.w	8004d5a <_printf_float+0xba>
 80050de:	f108 0801 	add.w	r8, r8, #1
 80050e2:	68e3      	ldr	r3, [r4, #12]
 80050e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80050e6:	1a9b      	subs	r3, r3, r2
 80050e8:	4543      	cmp	r3, r8
 80050ea:	dcf0      	bgt.n	80050ce <_printf_float+0x42e>
 80050ec:	e6fc      	b.n	8004ee8 <_printf_float+0x248>
 80050ee:	f04f 0800 	mov.w	r8, #0
 80050f2:	f104 0919 	add.w	r9, r4, #25
 80050f6:	e7f4      	b.n	80050e2 <_printf_float+0x442>
 80050f8:	2900      	cmp	r1, #0
 80050fa:	f43f ae8b 	beq.w	8004e14 <_printf_float+0x174>
 80050fe:	2300      	movs	r3, #0
 8005100:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005104:	ab09      	add	r3, sp, #36	; 0x24
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	ec49 8b10 	vmov	d0, r8, r9
 800510c:	6022      	str	r2, [r4, #0]
 800510e:	f8cd a004 	str.w	sl, [sp, #4]
 8005112:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005116:	4628      	mov	r0, r5
 8005118:	f7ff fd2e 	bl	8004b78 <__cvt>
 800511c:	4680      	mov	r8, r0
 800511e:	e648      	b.n	8004db2 <_printf_float+0x112>

08005120 <_printf_common>:
 8005120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005124:	4691      	mov	r9, r2
 8005126:	461f      	mov	r7, r3
 8005128:	688a      	ldr	r2, [r1, #8]
 800512a:	690b      	ldr	r3, [r1, #16]
 800512c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005130:	4293      	cmp	r3, r2
 8005132:	bfb8      	it	lt
 8005134:	4613      	movlt	r3, r2
 8005136:	f8c9 3000 	str.w	r3, [r9]
 800513a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800513e:	4606      	mov	r6, r0
 8005140:	460c      	mov	r4, r1
 8005142:	b112      	cbz	r2, 800514a <_printf_common+0x2a>
 8005144:	3301      	adds	r3, #1
 8005146:	f8c9 3000 	str.w	r3, [r9]
 800514a:	6823      	ldr	r3, [r4, #0]
 800514c:	0699      	lsls	r1, r3, #26
 800514e:	bf42      	ittt	mi
 8005150:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005154:	3302      	addmi	r3, #2
 8005156:	f8c9 3000 	strmi.w	r3, [r9]
 800515a:	6825      	ldr	r5, [r4, #0]
 800515c:	f015 0506 	ands.w	r5, r5, #6
 8005160:	d107      	bne.n	8005172 <_printf_common+0x52>
 8005162:	f104 0a19 	add.w	sl, r4, #25
 8005166:	68e3      	ldr	r3, [r4, #12]
 8005168:	f8d9 2000 	ldr.w	r2, [r9]
 800516c:	1a9b      	subs	r3, r3, r2
 800516e:	42ab      	cmp	r3, r5
 8005170:	dc28      	bgt.n	80051c4 <_printf_common+0xa4>
 8005172:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005176:	6822      	ldr	r2, [r4, #0]
 8005178:	3300      	adds	r3, #0
 800517a:	bf18      	it	ne
 800517c:	2301      	movne	r3, #1
 800517e:	0692      	lsls	r2, r2, #26
 8005180:	d42d      	bmi.n	80051de <_printf_common+0xbe>
 8005182:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005186:	4639      	mov	r1, r7
 8005188:	4630      	mov	r0, r6
 800518a:	47c0      	blx	r8
 800518c:	3001      	adds	r0, #1
 800518e:	d020      	beq.n	80051d2 <_printf_common+0xb2>
 8005190:	6823      	ldr	r3, [r4, #0]
 8005192:	68e5      	ldr	r5, [r4, #12]
 8005194:	f8d9 2000 	ldr.w	r2, [r9]
 8005198:	f003 0306 	and.w	r3, r3, #6
 800519c:	2b04      	cmp	r3, #4
 800519e:	bf08      	it	eq
 80051a0:	1aad      	subeq	r5, r5, r2
 80051a2:	68a3      	ldr	r3, [r4, #8]
 80051a4:	6922      	ldr	r2, [r4, #16]
 80051a6:	bf0c      	ite	eq
 80051a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051ac:	2500      	movne	r5, #0
 80051ae:	4293      	cmp	r3, r2
 80051b0:	bfc4      	itt	gt
 80051b2:	1a9b      	subgt	r3, r3, r2
 80051b4:	18ed      	addgt	r5, r5, r3
 80051b6:	f04f 0900 	mov.w	r9, #0
 80051ba:	341a      	adds	r4, #26
 80051bc:	454d      	cmp	r5, r9
 80051be:	d11a      	bne.n	80051f6 <_printf_common+0xd6>
 80051c0:	2000      	movs	r0, #0
 80051c2:	e008      	b.n	80051d6 <_printf_common+0xb6>
 80051c4:	2301      	movs	r3, #1
 80051c6:	4652      	mov	r2, sl
 80051c8:	4639      	mov	r1, r7
 80051ca:	4630      	mov	r0, r6
 80051cc:	47c0      	blx	r8
 80051ce:	3001      	adds	r0, #1
 80051d0:	d103      	bne.n	80051da <_printf_common+0xba>
 80051d2:	f04f 30ff 	mov.w	r0, #4294967295
 80051d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051da:	3501      	adds	r5, #1
 80051dc:	e7c3      	b.n	8005166 <_printf_common+0x46>
 80051de:	18e1      	adds	r1, r4, r3
 80051e0:	1c5a      	adds	r2, r3, #1
 80051e2:	2030      	movs	r0, #48	; 0x30
 80051e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051e8:	4422      	add	r2, r4
 80051ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051f2:	3302      	adds	r3, #2
 80051f4:	e7c5      	b.n	8005182 <_printf_common+0x62>
 80051f6:	2301      	movs	r3, #1
 80051f8:	4622      	mov	r2, r4
 80051fa:	4639      	mov	r1, r7
 80051fc:	4630      	mov	r0, r6
 80051fe:	47c0      	blx	r8
 8005200:	3001      	adds	r0, #1
 8005202:	d0e6      	beq.n	80051d2 <_printf_common+0xb2>
 8005204:	f109 0901 	add.w	r9, r9, #1
 8005208:	e7d8      	b.n	80051bc <_printf_common+0x9c>
	...

0800520c <_printf_i>:
 800520c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005210:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005214:	460c      	mov	r4, r1
 8005216:	7e09      	ldrb	r1, [r1, #24]
 8005218:	b085      	sub	sp, #20
 800521a:	296e      	cmp	r1, #110	; 0x6e
 800521c:	4617      	mov	r7, r2
 800521e:	4606      	mov	r6, r0
 8005220:	4698      	mov	r8, r3
 8005222:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005224:	f000 80b3 	beq.w	800538e <_printf_i+0x182>
 8005228:	d822      	bhi.n	8005270 <_printf_i+0x64>
 800522a:	2963      	cmp	r1, #99	; 0x63
 800522c:	d036      	beq.n	800529c <_printf_i+0x90>
 800522e:	d80a      	bhi.n	8005246 <_printf_i+0x3a>
 8005230:	2900      	cmp	r1, #0
 8005232:	f000 80b9 	beq.w	80053a8 <_printf_i+0x19c>
 8005236:	2958      	cmp	r1, #88	; 0x58
 8005238:	f000 8083 	beq.w	8005342 <_printf_i+0x136>
 800523c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005240:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005244:	e032      	b.n	80052ac <_printf_i+0xa0>
 8005246:	2964      	cmp	r1, #100	; 0x64
 8005248:	d001      	beq.n	800524e <_printf_i+0x42>
 800524a:	2969      	cmp	r1, #105	; 0x69
 800524c:	d1f6      	bne.n	800523c <_printf_i+0x30>
 800524e:	6820      	ldr	r0, [r4, #0]
 8005250:	6813      	ldr	r3, [r2, #0]
 8005252:	0605      	lsls	r5, r0, #24
 8005254:	f103 0104 	add.w	r1, r3, #4
 8005258:	d52a      	bpl.n	80052b0 <_printf_i+0xa4>
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6011      	str	r1, [r2, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	da03      	bge.n	800526a <_printf_i+0x5e>
 8005262:	222d      	movs	r2, #45	; 0x2d
 8005264:	425b      	negs	r3, r3
 8005266:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800526a:	486f      	ldr	r0, [pc, #444]	; (8005428 <_printf_i+0x21c>)
 800526c:	220a      	movs	r2, #10
 800526e:	e039      	b.n	80052e4 <_printf_i+0xd8>
 8005270:	2973      	cmp	r1, #115	; 0x73
 8005272:	f000 809d 	beq.w	80053b0 <_printf_i+0x1a4>
 8005276:	d808      	bhi.n	800528a <_printf_i+0x7e>
 8005278:	296f      	cmp	r1, #111	; 0x6f
 800527a:	d020      	beq.n	80052be <_printf_i+0xb2>
 800527c:	2970      	cmp	r1, #112	; 0x70
 800527e:	d1dd      	bne.n	800523c <_printf_i+0x30>
 8005280:	6823      	ldr	r3, [r4, #0]
 8005282:	f043 0320 	orr.w	r3, r3, #32
 8005286:	6023      	str	r3, [r4, #0]
 8005288:	e003      	b.n	8005292 <_printf_i+0x86>
 800528a:	2975      	cmp	r1, #117	; 0x75
 800528c:	d017      	beq.n	80052be <_printf_i+0xb2>
 800528e:	2978      	cmp	r1, #120	; 0x78
 8005290:	d1d4      	bne.n	800523c <_printf_i+0x30>
 8005292:	2378      	movs	r3, #120	; 0x78
 8005294:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005298:	4864      	ldr	r0, [pc, #400]	; (800542c <_printf_i+0x220>)
 800529a:	e055      	b.n	8005348 <_printf_i+0x13c>
 800529c:	6813      	ldr	r3, [r2, #0]
 800529e:	1d19      	adds	r1, r3, #4
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6011      	str	r1, [r2, #0]
 80052a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052ac:	2301      	movs	r3, #1
 80052ae:	e08c      	b.n	80053ca <_printf_i+0x1be>
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	6011      	str	r1, [r2, #0]
 80052b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80052b8:	bf18      	it	ne
 80052ba:	b21b      	sxthne	r3, r3
 80052bc:	e7cf      	b.n	800525e <_printf_i+0x52>
 80052be:	6813      	ldr	r3, [r2, #0]
 80052c0:	6825      	ldr	r5, [r4, #0]
 80052c2:	1d18      	adds	r0, r3, #4
 80052c4:	6010      	str	r0, [r2, #0]
 80052c6:	0628      	lsls	r0, r5, #24
 80052c8:	d501      	bpl.n	80052ce <_printf_i+0xc2>
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	e002      	b.n	80052d4 <_printf_i+0xc8>
 80052ce:	0668      	lsls	r0, r5, #25
 80052d0:	d5fb      	bpl.n	80052ca <_printf_i+0xbe>
 80052d2:	881b      	ldrh	r3, [r3, #0]
 80052d4:	4854      	ldr	r0, [pc, #336]	; (8005428 <_printf_i+0x21c>)
 80052d6:	296f      	cmp	r1, #111	; 0x6f
 80052d8:	bf14      	ite	ne
 80052da:	220a      	movne	r2, #10
 80052dc:	2208      	moveq	r2, #8
 80052de:	2100      	movs	r1, #0
 80052e0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052e4:	6865      	ldr	r5, [r4, #4]
 80052e6:	60a5      	str	r5, [r4, #8]
 80052e8:	2d00      	cmp	r5, #0
 80052ea:	f2c0 8095 	blt.w	8005418 <_printf_i+0x20c>
 80052ee:	6821      	ldr	r1, [r4, #0]
 80052f0:	f021 0104 	bic.w	r1, r1, #4
 80052f4:	6021      	str	r1, [r4, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d13d      	bne.n	8005376 <_printf_i+0x16a>
 80052fa:	2d00      	cmp	r5, #0
 80052fc:	f040 808e 	bne.w	800541c <_printf_i+0x210>
 8005300:	4665      	mov	r5, ip
 8005302:	2a08      	cmp	r2, #8
 8005304:	d10b      	bne.n	800531e <_printf_i+0x112>
 8005306:	6823      	ldr	r3, [r4, #0]
 8005308:	07db      	lsls	r3, r3, #31
 800530a:	d508      	bpl.n	800531e <_printf_i+0x112>
 800530c:	6923      	ldr	r3, [r4, #16]
 800530e:	6862      	ldr	r2, [r4, #4]
 8005310:	429a      	cmp	r2, r3
 8005312:	bfde      	ittt	le
 8005314:	2330      	movle	r3, #48	; 0x30
 8005316:	f805 3c01 	strble.w	r3, [r5, #-1]
 800531a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800531e:	ebac 0305 	sub.w	r3, ip, r5
 8005322:	6123      	str	r3, [r4, #16]
 8005324:	f8cd 8000 	str.w	r8, [sp]
 8005328:	463b      	mov	r3, r7
 800532a:	aa03      	add	r2, sp, #12
 800532c:	4621      	mov	r1, r4
 800532e:	4630      	mov	r0, r6
 8005330:	f7ff fef6 	bl	8005120 <_printf_common>
 8005334:	3001      	adds	r0, #1
 8005336:	d14d      	bne.n	80053d4 <_printf_i+0x1c8>
 8005338:	f04f 30ff 	mov.w	r0, #4294967295
 800533c:	b005      	add	sp, #20
 800533e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005342:	4839      	ldr	r0, [pc, #228]	; (8005428 <_printf_i+0x21c>)
 8005344:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005348:	6813      	ldr	r3, [r2, #0]
 800534a:	6821      	ldr	r1, [r4, #0]
 800534c:	1d1d      	adds	r5, r3, #4
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6015      	str	r5, [r2, #0]
 8005352:	060a      	lsls	r2, r1, #24
 8005354:	d50b      	bpl.n	800536e <_printf_i+0x162>
 8005356:	07ca      	lsls	r2, r1, #31
 8005358:	bf44      	itt	mi
 800535a:	f041 0120 	orrmi.w	r1, r1, #32
 800535e:	6021      	strmi	r1, [r4, #0]
 8005360:	b91b      	cbnz	r3, 800536a <_printf_i+0x15e>
 8005362:	6822      	ldr	r2, [r4, #0]
 8005364:	f022 0220 	bic.w	r2, r2, #32
 8005368:	6022      	str	r2, [r4, #0]
 800536a:	2210      	movs	r2, #16
 800536c:	e7b7      	b.n	80052de <_printf_i+0xd2>
 800536e:	064d      	lsls	r5, r1, #25
 8005370:	bf48      	it	mi
 8005372:	b29b      	uxthmi	r3, r3
 8005374:	e7ef      	b.n	8005356 <_printf_i+0x14a>
 8005376:	4665      	mov	r5, ip
 8005378:	fbb3 f1f2 	udiv	r1, r3, r2
 800537c:	fb02 3311 	mls	r3, r2, r1, r3
 8005380:	5cc3      	ldrb	r3, [r0, r3]
 8005382:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005386:	460b      	mov	r3, r1
 8005388:	2900      	cmp	r1, #0
 800538a:	d1f5      	bne.n	8005378 <_printf_i+0x16c>
 800538c:	e7b9      	b.n	8005302 <_printf_i+0xf6>
 800538e:	6813      	ldr	r3, [r2, #0]
 8005390:	6825      	ldr	r5, [r4, #0]
 8005392:	6961      	ldr	r1, [r4, #20]
 8005394:	1d18      	adds	r0, r3, #4
 8005396:	6010      	str	r0, [r2, #0]
 8005398:	0628      	lsls	r0, r5, #24
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	d501      	bpl.n	80053a2 <_printf_i+0x196>
 800539e:	6019      	str	r1, [r3, #0]
 80053a0:	e002      	b.n	80053a8 <_printf_i+0x19c>
 80053a2:	066a      	lsls	r2, r5, #25
 80053a4:	d5fb      	bpl.n	800539e <_printf_i+0x192>
 80053a6:	8019      	strh	r1, [r3, #0]
 80053a8:	2300      	movs	r3, #0
 80053aa:	6123      	str	r3, [r4, #16]
 80053ac:	4665      	mov	r5, ip
 80053ae:	e7b9      	b.n	8005324 <_printf_i+0x118>
 80053b0:	6813      	ldr	r3, [r2, #0]
 80053b2:	1d19      	adds	r1, r3, #4
 80053b4:	6011      	str	r1, [r2, #0]
 80053b6:	681d      	ldr	r5, [r3, #0]
 80053b8:	6862      	ldr	r2, [r4, #4]
 80053ba:	2100      	movs	r1, #0
 80053bc:	4628      	mov	r0, r5
 80053be:	f7fa ff2f 	bl	8000220 <memchr>
 80053c2:	b108      	cbz	r0, 80053c8 <_printf_i+0x1bc>
 80053c4:	1b40      	subs	r0, r0, r5
 80053c6:	6060      	str	r0, [r4, #4]
 80053c8:	6863      	ldr	r3, [r4, #4]
 80053ca:	6123      	str	r3, [r4, #16]
 80053cc:	2300      	movs	r3, #0
 80053ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053d2:	e7a7      	b.n	8005324 <_printf_i+0x118>
 80053d4:	6923      	ldr	r3, [r4, #16]
 80053d6:	462a      	mov	r2, r5
 80053d8:	4639      	mov	r1, r7
 80053da:	4630      	mov	r0, r6
 80053dc:	47c0      	blx	r8
 80053de:	3001      	adds	r0, #1
 80053e0:	d0aa      	beq.n	8005338 <_printf_i+0x12c>
 80053e2:	6823      	ldr	r3, [r4, #0]
 80053e4:	079b      	lsls	r3, r3, #30
 80053e6:	d413      	bmi.n	8005410 <_printf_i+0x204>
 80053e8:	68e0      	ldr	r0, [r4, #12]
 80053ea:	9b03      	ldr	r3, [sp, #12]
 80053ec:	4298      	cmp	r0, r3
 80053ee:	bfb8      	it	lt
 80053f0:	4618      	movlt	r0, r3
 80053f2:	e7a3      	b.n	800533c <_printf_i+0x130>
 80053f4:	2301      	movs	r3, #1
 80053f6:	464a      	mov	r2, r9
 80053f8:	4639      	mov	r1, r7
 80053fa:	4630      	mov	r0, r6
 80053fc:	47c0      	blx	r8
 80053fe:	3001      	adds	r0, #1
 8005400:	d09a      	beq.n	8005338 <_printf_i+0x12c>
 8005402:	3501      	adds	r5, #1
 8005404:	68e3      	ldr	r3, [r4, #12]
 8005406:	9a03      	ldr	r2, [sp, #12]
 8005408:	1a9b      	subs	r3, r3, r2
 800540a:	42ab      	cmp	r3, r5
 800540c:	dcf2      	bgt.n	80053f4 <_printf_i+0x1e8>
 800540e:	e7eb      	b.n	80053e8 <_printf_i+0x1dc>
 8005410:	2500      	movs	r5, #0
 8005412:	f104 0919 	add.w	r9, r4, #25
 8005416:	e7f5      	b.n	8005404 <_printf_i+0x1f8>
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1ac      	bne.n	8005376 <_printf_i+0x16a>
 800541c:	7803      	ldrb	r3, [r0, #0]
 800541e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005422:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005426:	e76c      	b.n	8005302 <_printf_i+0xf6>
 8005428:	08007646 	.word	0x08007646
 800542c:	08007657 	.word	0x08007657

08005430 <siprintf>:
 8005430:	b40e      	push	{r1, r2, r3}
 8005432:	b500      	push	{lr}
 8005434:	b09c      	sub	sp, #112	; 0x70
 8005436:	ab1d      	add	r3, sp, #116	; 0x74
 8005438:	9002      	str	r0, [sp, #8]
 800543a:	9006      	str	r0, [sp, #24]
 800543c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005440:	4809      	ldr	r0, [pc, #36]	; (8005468 <siprintf+0x38>)
 8005442:	9107      	str	r1, [sp, #28]
 8005444:	9104      	str	r1, [sp, #16]
 8005446:	4909      	ldr	r1, [pc, #36]	; (800546c <siprintf+0x3c>)
 8005448:	f853 2b04 	ldr.w	r2, [r3], #4
 800544c:	9105      	str	r1, [sp, #20]
 800544e:	6800      	ldr	r0, [r0, #0]
 8005450:	9301      	str	r3, [sp, #4]
 8005452:	a902      	add	r1, sp, #8
 8005454:	f001 fa5c 	bl	8006910 <_svfiprintf_r>
 8005458:	9b02      	ldr	r3, [sp, #8]
 800545a:	2200      	movs	r2, #0
 800545c:	701a      	strb	r2, [r3, #0]
 800545e:	b01c      	add	sp, #112	; 0x70
 8005460:	f85d eb04 	ldr.w	lr, [sp], #4
 8005464:	b003      	add	sp, #12
 8005466:	4770      	bx	lr
 8005468:	20000014 	.word	0x20000014
 800546c:	ffff0208 	.word	0xffff0208

08005470 <quorem>:
 8005470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005474:	6903      	ldr	r3, [r0, #16]
 8005476:	690c      	ldr	r4, [r1, #16]
 8005478:	42a3      	cmp	r3, r4
 800547a:	4680      	mov	r8, r0
 800547c:	f2c0 8082 	blt.w	8005584 <quorem+0x114>
 8005480:	3c01      	subs	r4, #1
 8005482:	f101 0714 	add.w	r7, r1, #20
 8005486:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800548a:	f100 0614 	add.w	r6, r0, #20
 800548e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005492:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005496:	eb06 030c 	add.w	r3, r6, ip
 800549a:	3501      	adds	r5, #1
 800549c:	eb07 090c 	add.w	r9, r7, ip
 80054a0:	9301      	str	r3, [sp, #4]
 80054a2:	fbb0 f5f5 	udiv	r5, r0, r5
 80054a6:	b395      	cbz	r5, 800550e <quorem+0x9e>
 80054a8:	f04f 0a00 	mov.w	sl, #0
 80054ac:	4638      	mov	r0, r7
 80054ae:	46b6      	mov	lr, r6
 80054b0:	46d3      	mov	fp, sl
 80054b2:	f850 2b04 	ldr.w	r2, [r0], #4
 80054b6:	b293      	uxth	r3, r2
 80054b8:	fb05 a303 	mla	r3, r5, r3, sl
 80054bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	ebab 0303 	sub.w	r3, fp, r3
 80054c6:	0c12      	lsrs	r2, r2, #16
 80054c8:	f8de b000 	ldr.w	fp, [lr]
 80054cc:	fb05 a202 	mla	r2, r5, r2, sl
 80054d0:	fa13 f38b 	uxtah	r3, r3, fp
 80054d4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80054d8:	fa1f fb82 	uxth.w	fp, r2
 80054dc:	f8de 2000 	ldr.w	r2, [lr]
 80054e0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80054e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80054ee:	4581      	cmp	r9, r0
 80054f0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80054f4:	f84e 3b04 	str.w	r3, [lr], #4
 80054f8:	d2db      	bcs.n	80054b2 <quorem+0x42>
 80054fa:	f856 300c 	ldr.w	r3, [r6, ip]
 80054fe:	b933      	cbnz	r3, 800550e <quorem+0x9e>
 8005500:	9b01      	ldr	r3, [sp, #4]
 8005502:	3b04      	subs	r3, #4
 8005504:	429e      	cmp	r6, r3
 8005506:	461a      	mov	r2, r3
 8005508:	d330      	bcc.n	800556c <quorem+0xfc>
 800550a:	f8c8 4010 	str.w	r4, [r8, #16]
 800550e:	4640      	mov	r0, r8
 8005510:	f001 f828 	bl	8006564 <__mcmp>
 8005514:	2800      	cmp	r0, #0
 8005516:	db25      	blt.n	8005564 <quorem+0xf4>
 8005518:	3501      	adds	r5, #1
 800551a:	4630      	mov	r0, r6
 800551c:	f04f 0c00 	mov.w	ip, #0
 8005520:	f857 2b04 	ldr.w	r2, [r7], #4
 8005524:	f8d0 e000 	ldr.w	lr, [r0]
 8005528:	b293      	uxth	r3, r2
 800552a:	ebac 0303 	sub.w	r3, ip, r3
 800552e:	0c12      	lsrs	r2, r2, #16
 8005530:	fa13 f38e 	uxtah	r3, r3, lr
 8005534:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005538:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800553c:	b29b      	uxth	r3, r3
 800553e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005542:	45b9      	cmp	r9, r7
 8005544:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005548:	f840 3b04 	str.w	r3, [r0], #4
 800554c:	d2e8      	bcs.n	8005520 <quorem+0xb0>
 800554e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005552:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005556:	b92a      	cbnz	r2, 8005564 <quorem+0xf4>
 8005558:	3b04      	subs	r3, #4
 800555a:	429e      	cmp	r6, r3
 800555c:	461a      	mov	r2, r3
 800555e:	d30b      	bcc.n	8005578 <quorem+0x108>
 8005560:	f8c8 4010 	str.w	r4, [r8, #16]
 8005564:	4628      	mov	r0, r5
 8005566:	b003      	add	sp, #12
 8005568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800556c:	6812      	ldr	r2, [r2, #0]
 800556e:	3b04      	subs	r3, #4
 8005570:	2a00      	cmp	r2, #0
 8005572:	d1ca      	bne.n	800550a <quorem+0x9a>
 8005574:	3c01      	subs	r4, #1
 8005576:	e7c5      	b.n	8005504 <quorem+0x94>
 8005578:	6812      	ldr	r2, [r2, #0]
 800557a:	3b04      	subs	r3, #4
 800557c:	2a00      	cmp	r2, #0
 800557e:	d1ef      	bne.n	8005560 <quorem+0xf0>
 8005580:	3c01      	subs	r4, #1
 8005582:	e7ea      	b.n	800555a <quorem+0xea>
 8005584:	2000      	movs	r0, #0
 8005586:	e7ee      	b.n	8005566 <quorem+0xf6>

08005588 <_dtoa_r>:
 8005588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800558c:	ec57 6b10 	vmov	r6, r7, d0
 8005590:	b097      	sub	sp, #92	; 0x5c
 8005592:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005594:	9106      	str	r1, [sp, #24]
 8005596:	4604      	mov	r4, r0
 8005598:	920b      	str	r2, [sp, #44]	; 0x2c
 800559a:	9312      	str	r3, [sp, #72]	; 0x48
 800559c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80055a0:	e9cd 6700 	strd	r6, r7, [sp]
 80055a4:	b93d      	cbnz	r5, 80055b6 <_dtoa_r+0x2e>
 80055a6:	2010      	movs	r0, #16
 80055a8:	f000 fdb4 	bl	8006114 <malloc>
 80055ac:	6260      	str	r0, [r4, #36]	; 0x24
 80055ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80055b2:	6005      	str	r5, [r0, #0]
 80055b4:	60c5      	str	r5, [r0, #12]
 80055b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055b8:	6819      	ldr	r1, [r3, #0]
 80055ba:	b151      	cbz	r1, 80055d2 <_dtoa_r+0x4a>
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	604a      	str	r2, [r1, #4]
 80055c0:	2301      	movs	r3, #1
 80055c2:	4093      	lsls	r3, r2
 80055c4:	608b      	str	r3, [r1, #8]
 80055c6:	4620      	mov	r0, r4
 80055c8:	f000 fdeb 	bl	80061a2 <_Bfree>
 80055cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055ce:	2200      	movs	r2, #0
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	1e3b      	subs	r3, r7, #0
 80055d4:	bfbb      	ittet	lt
 80055d6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80055da:	9301      	strlt	r3, [sp, #4]
 80055dc:	2300      	movge	r3, #0
 80055de:	2201      	movlt	r2, #1
 80055e0:	bfac      	ite	ge
 80055e2:	f8c8 3000 	strge.w	r3, [r8]
 80055e6:	f8c8 2000 	strlt.w	r2, [r8]
 80055ea:	4baf      	ldr	r3, [pc, #700]	; (80058a8 <_dtoa_r+0x320>)
 80055ec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80055f0:	ea33 0308 	bics.w	r3, r3, r8
 80055f4:	d114      	bne.n	8005620 <_dtoa_r+0x98>
 80055f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80055f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80055fc:	6013      	str	r3, [r2, #0]
 80055fe:	9b00      	ldr	r3, [sp, #0]
 8005600:	b923      	cbnz	r3, 800560c <_dtoa_r+0x84>
 8005602:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005606:	2800      	cmp	r0, #0
 8005608:	f000 8542 	beq.w	8006090 <_dtoa_r+0xb08>
 800560c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800560e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80058bc <_dtoa_r+0x334>
 8005612:	2b00      	cmp	r3, #0
 8005614:	f000 8544 	beq.w	80060a0 <_dtoa_r+0xb18>
 8005618:	f10b 0303 	add.w	r3, fp, #3
 800561c:	f000 bd3e 	b.w	800609c <_dtoa_r+0xb14>
 8005620:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005624:	2200      	movs	r2, #0
 8005626:	2300      	movs	r3, #0
 8005628:	4630      	mov	r0, r6
 800562a:	4639      	mov	r1, r7
 800562c:	f7fb fa6c 	bl	8000b08 <__aeabi_dcmpeq>
 8005630:	4681      	mov	r9, r0
 8005632:	b168      	cbz	r0, 8005650 <_dtoa_r+0xc8>
 8005634:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005636:	2301      	movs	r3, #1
 8005638:	6013      	str	r3, [r2, #0]
 800563a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 8524 	beq.w	800608a <_dtoa_r+0xb02>
 8005642:	4b9a      	ldr	r3, [pc, #616]	; (80058ac <_dtoa_r+0x324>)
 8005644:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005646:	f103 3bff 	add.w	fp, r3, #4294967295
 800564a:	6013      	str	r3, [r2, #0]
 800564c:	f000 bd28 	b.w	80060a0 <_dtoa_r+0xb18>
 8005650:	aa14      	add	r2, sp, #80	; 0x50
 8005652:	a915      	add	r1, sp, #84	; 0x54
 8005654:	ec47 6b10 	vmov	d0, r6, r7
 8005658:	4620      	mov	r0, r4
 800565a:	f000 fffa 	bl	8006652 <__d2b>
 800565e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005662:	9004      	str	r0, [sp, #16]
 8005664:	2d00      	cmp	r5, #0
 8005666:	d07c      	beq.n	8005762 <_dtoa_r+0x1da>
 8005668:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800566c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005670:	46b2      	mov	sl, r6
 8005672:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005676:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800567a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800567e:	2200      	movs	r2, #0
 8005680:	4b8b      	ldr	r3, [pc, #556]	; (80058b0 <_dtoa_r+0x328>)
 8005682:	4650      	mov	r0, sl
 8005684:	4659      	mov	r1, fp
 8005686:	f7fa fe1f 	bl	80002c8 <__aeabi_dsub>
 800568a:	a381      	add	r3, pc, #516	; (adr r3, 8005890 <_dtoa_r+0x308>)
 800568c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005690:	f7fa ffd2 	bl	8000638 <__aeabi_dmul>
 8005694:	a380      	add	r3, pc, #512	; (adr r3, 8005898 <_dtoa_r+0x310>)
 8005696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569a:	f7fa fe17 	bl	80002cc <__adddf3>
 800569e:	4606      	mov	r6, r0
 80056a0:	4628      	mov	r0, r5
 80056a2:	460f      	mov	r7, r1
 80056a4:	f7fa ff5e 	bl	8000564 <__aeabi_i2d>
 80056a8:	a37d      	add	r3, pc, #500	; (adr r3, 80058a0 <_dtoa_r+0x318>)
 80056aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ae:	f7fa ffc3 	bl	8000638 <__aeabi_dmul>
 80056b2:	4602      	mov	r2, r0
 80056b4:	460b      	mov	r3, r1
 80056b6:	4630      	mov	r0, r6
 80056b8:	4639      	mov	r1, r7
 80056ba:	f7fa fe07 	bl	80002cc <__adddf3>
 80056be:	4606      	mov	r6, r0
 80056c0:	460f      	mov	r7, r1
 80056c2:	f7fb fa69 	bl	8000b98 <__aeabi_d2iz>
 80056c6:	2200      	movs	r2, #0
 80056c8:	4682      	mov	sl, r0
 80056ca:	2300      	movs	r3, #0
 80056cc:	4630      	mov	r0, r6
 80056ce:	4639      	mov	r1, r7
 80056d0:	f7fb fa24 	bl	8000b1c <__aeabi_dcmplt>
 80056d4:	b148      	cbz	r0, 80056ea <_dtoa_r+0x162>
 80056d6:	4650      	mov	r0, sl
 80056d8:	f7fa ff44 	bl	8000564 <__aeabi_i2d>
 80056dc:	4632      	mov	r2, r6
 80056de:	463b      	mov	r3, r7
 80056e0:	f7fb fa12 	bl	8000b08 <__aeabi_dcmpeq>
 80056e4:	b908      	cbnz	r0, 80056ea <_dtoa_r+0x162>
 80056e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056ea:	f1ba 0f16 	cmp.w	sl, #22
 80056ee:	d859      	bhi.n	80057a4 <_dtoa_r+0x21c>
 80056f0:	4970      	ldr	r1, [pc, #448]	; (80058b4 <_dtoa_r+0x32c>)
 80056f2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80056f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056fe:	f7fb fa2b 	bl	8000b58 <__aeabi_dcmpgt>
 8005702:	2800      	cmp	r0, #0
 8005704:	d050      	beq.n	80057a8 <_dtoa_r+0x220>
 8005706:	f10a 3aff 	add.w	sl, sl, #4294967295
 800570a:	2300      	movs	r3, #0
 800570c:	930f      	str	r3, [sp, #60]	; 0x3c
 800570e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005710:	1b5d      	subs	r5, r3, r5
 8005712:	f1b5 0801 	subs.w	r8, r5, #1
 8005716:	bf49      	itett	mi
 8005718:	f1c5 0301 	rsbmi	r3, r5, #1
 800571c:	2300      	movpl	r3, #0
 800571e:	9305      	strmi	r3, [sp, #20]
 8005720:	f04f 0800 	movmi.w	r8, #0
 8005724:	bf58      	it	pl
 8005726:	9305      	strpl	r3, [sp, #20]
 8005728:	f1ba 0f00 	cmp.w	sl, #0
 800572c:	db3e      	blt.n	80057ac <_dtoa_r+0x224>
 800572e:	2300      	movs	r3, #0
 8005730:	44d0      	add	r8, sl
 8005732:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005736:	9307      	str	r3, [sp, #28]
 8005738:	9b06      	ldr	r3, [sp, #24]
 800573a:	2b09      	cmp	r3, #9
 800573c:	f200 8090 	bhi.w	8005860 <_dtoa_r+0x2d8>
 8005740:	2b05      	cmp	r3, #5
 8005742:	bfc4      	itt	gt
 8005744:	3b04      	subgt	r3, #4
 8005746:	9306      	strgt	r3, [sp, #24]
 8005748:	9b06      	ldr	r3, [sp, #24]
 800574a:	f1a3 0302 	sub.w	r3, r3, #2
 800574e:	bfcc      	ite	gt
 8005750:	2500      	movgt	r5, #0
 8005752:	2501      	movle	r5, #1
 8005754:	2b03      	cmp	r3, #3
 8005756:	f200 808f 	bhi.w	8005878 <_dtoa_r+0x2f0>
 800575a:	e8df f003 	tbb	[pc, r3]
 800575e:	7f7d      	.short	0x7f7d
 8005760:	7131      	.short	0x7131
 8005762:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005766:	441d      	add	r5, r3
 8005768:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800576c:	2820      	cmp	r0, #32
 800576e:	dd13      	ble.n	8005798 <_dtoa_r+0x210>
 8005770:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005774:	9b00      	ldr	r3, [sp, #0]
 8005776:	fa08 f800 	lsl.w	r8, r8, r0
 800577a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800577e:	fa23 f000 	lsr.w	r0, r3, r0
 8005782:	ea48 0000 	orr.w	r0, r8, r0
 8005786:	f7fa fedd 	bl	8000544 <__aeabi_ui2d>
 800578a:	2301      	movs	r3, #1
 800578c:	4682      	mov	sl, r0
 800578e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005792:	3d01      	subs	r5, #1
 8005794:	9313      	str	r3, [sp, #76]	; 0x4c
 8005796:	e772      	b.n	800567e <_dtoa_r+0xf6>
 8005798:	9b00      	ldr	r3, [sp, #0]
 800579a:	f1c0 0020 	rsb	r0, r0, #32
 800579e:	fa03 f000 	lsl.w	r0, r3, r0
 80057a2:	e7f0      	b.n	8005786 <_dtoa_r+0x1fe>
 80057a4:	2301      	movs	r3, #1
 80057a6:	e7b1      	b.n	800570c <_dtoa_r+0x184>
 80057a8:	900f      	str	r0, [sp, #60]	; 0x3c
 80057aa:	e7b0      	b.n	800570e <_dtoa_r+0x186>
 80057ac:	9b05      	ldr	r3, [sp, #20]
 80057ae:	eba3 030a 	sub.w	r3, r3, sl
 80057b2:	9305      	str	r3, [sp, #20]
 80057b4:	f1ca 0300 	rsb	r3, sl, #0
 80057b8:	9307      	str	r3, [sp, #28]
 80057ba:	2300      	movs	r3, #0
 80057bc:	930e      	str	r3, [sp, #56]	; 0x38
 80057be:	e7bb      	b.n	8005738 <_dtoa_r+0x1b0>
 80057c0:	2301      	movs	r3, #1
 80057c2:	930a      	str	r3, [sp, #40]	; 0x28
 80057c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	dd59      	ble.n	800587e <_dtoa_r+0x2f6>
 80057ca:	9302      	str	r3, [sp, #8]
 80057cc:	4699      	mov	r9, r3
 80057ce:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80057d0:	2200      	movs	r2, #0
 80057d2:	6072      	str	r2, [r6, #4]
 80057d4:	2204      	movs	r2, #4
 80057d6:	f102 0014 	add.w	r0, r2, #20
 80057da:	4298      	cmp	r0, r3
 80057dc:	6871      	ldr	r1, [r6, #4]
 80057de:	d953      	bls.n	8005888 <_dtoa_r+0x300>
 80057e0:	4620      	mov	r0, r4
 80057e2:	f000 fcaa 	bl	800613a <_Balloc>
 80057e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057e8:	6030      	str	r0, [r6, #0]
 80057ea:	f1b9 0f0e 	cmp.w	r9, #14
 80057ee:	f8d3 b000 	ldr.w	fp, [r3]
 80057f2:	f200 80e6 	bhi.w	80059c2 <_dtoa_r+0x43a>
 80057f6:	2d00      	cmp	r5, #0
 80057f8:	f000 80e3 	beq.w	80059c2 <_dtoa_r+0x43a>
 80057fc:	ed9d 7b00 	vldr	d7, [sp]
 8005800:	f1ba 0f00 	cmp.w	sl, #0
 8005804:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005808:	dd74      	ble.n	80058f4 <_dtoa_r+0x36c>
 800580a:	4a2a      	ldr	r2, [pc, #168]	; (80058b4 <_dtoa_r+0x32c>)
 800580c:	f00a 030f 	and.w	r3, sl, #15
 8005810:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005814:	ed93 7b00 	vldr	d7, [r3]
 8005818:	ea4f 162a 	mov.w	r6, sl, asr #4
 800581c:	06f0      	lsls	r0, r6, #27
 800581e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005822:	d565      	bpl.n	80058f0 <_dtoa_r+0x368>
 8005824:	4b24      	ldr	r3, [pc, #144]	; (80058b8 <_dtoa_r+0x330>)
 8005826:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800582a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800582e:	f7fb f82d 	bl	800088c <__aeabi_ddiv>
 8005832:	e9cd 0100 	strd	r0, r1, [sp]
 8005836:	f006 060f 	and.w	r6, r6, #15
 800583a:	2503      	movs	r5, #3
 800583c:	4f1e      	ldr	r7, [pc, #120]	; (80058b8 <_dtoa_r+0x330>)
 800583e:	e04c      	b.n	80058da <_dtoa_r+0x352>
 8005840:	2301      	movs	r3, #1
 8005842:	930a      	str	r3, [sp, #40]	; 0x28
 8005844:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005846:	4453      	add	r3, sl
 8005848:	f103 0901 	add.w	r9, r3, #1
 800584c:	9302      	str	r3, [sp, #8]
 800584e:	464b      	mov	r3, r9
 8005850:	2b01      	cmp	r3, #1
 8005852:	bfb8      	it	lt
 8005854:	2301      	movlt	r3, #1
 8005856:	e7ba      	b.n	80057ce <_dtoa_r+0x246>
 8005858:	2300      	movs	r3, #0
 800585a:	e7b2      	b.n	80057c2 <_dtoa_r+0x23a>
 800585c:	2300      	movs	r3, #0
 800585e:	e7f0      	b.n	8005842 <_dtoa_r+0x2ba>
 8005860:	2501      	movs	r5, #1
 8005862:	2300      	movs	r3, #0
 8005864:	9306      	str	r3, [sp, #24]
 8005866:	950a      	str	r5, [sp, #40]	; 0x28
 8005868:	f04f 33ff 	mov.w	r3, #4294967295
 800586c:	9302      	str	r3, [sp, #8]
 800586e:	4699      	mov	r9, r3
 8005870:	2200      	movs	r2, #0
 8005872:	2312      	movs	r3, #18
 8005874:	920b      	str	r2, [sp, #44]	; 0x2c
 8005876:	e7aa      	b.n	80057ce <_dtoa_r+0x246>
 8005878:	2301      	movs	r3, #1
 800587a:	930a      	str	r3, [sp, #40]	; 0x28
 800587c:	e7f4      	b.n	8005868 <_dtoa_r+0x2e0>
 800587e:	2301      	movs	r3, #1
 8005880:	9302      	str	r3, [sp, #8]
 8005882:	4699      	mov	r9, r3
 8005884:	461a      	mov	r2, r3
 8005886:	e7f5      	b.n	8005874 <_dtoa_r+0x2ec>
 8005888:	3101      	adds	r1, #1
 800588a:	6071      	str	r1, [r6, #4]
 800588c:	0052      	lsls	r2, r2, #1
 800588e:	e7a2      	b.n	80057d6 <_dtoa_r+0x24e>
 8005890:	636f4361 	.word	0x636f4361
 8005894:	3fd287a7 	.word	0x3fd287a7
 8005898:	8b60c8b3 	.word	0x8b60c8b3
 800589c:	3fc68a28 	.word	0x3fc68a28
 80058a0:	509f79fb 	.word	0x509f79fb
 80058a4:	3fd34413 	.word	0x3fd34413
 80058a8:	7ff00000 	.word	0x7ff00000
 80058ac:	08007645 	.word	0x08007645
 80058b0:	3ff80000 	.word	0x3ff80000
 80058b4:	080076a0 	.word	0x080076a0
 80058b8:	08007678 	.word	0x08007678
 80058bc:	08007671 	.word	0x08007671
 80058c0:	07f1      	lsls	r1, r6, #31
 80058c2:	d508      	bpl.n	80058d6 <_dtoa_r+0x34e>
 80058c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80058c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058cc:	f7fa feb4 	bl	8000638 <__aeabi_dmul>
 80058d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80058d4:	3501      	adds	r5, #1
 80058d6:	1076      	asrs	r6, r6, #1
 80058d8:	3708      	adds	r7, #8
 80058da:	2e00      	cmp	r6, #0
 80058dc:	d1f0      	bne.n	80058c0 <_dtoa_r+0x338>
 80058de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80058e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058e6:	f7fa ffd1 	bl	800088c <__aeabi_ddiv>
 80058ea:	e9cd 0100 	strd	r0, r1, [sp]
 80058ee:	e01a      	b.n	8005926 <_dtoa_r+0x39e>
 80058f0:	2502      	movs	r5, #2
 80058f2:	e7a3      	b.n	800583c <_dtoa_r+0x2b4>
 80058f4:	f000 80a0 	beq.w	8005a38 <_dtoa_r+0x4b0>
 80058f8:	f1ca 0600 	rsb	r6, sl, #0
 80058fc:	4b9f      	ldr	r3, [pc, #636]	; (8005b7c <_dtoa_r+0x5f4>)
 80058fe:	4fa0      	ldr	r7, [pc, #640]	; (8005b80 <_dtoa_r+0x5f8>)
 8005900:	f006 020f 	and.w	r2, r6, #15
 8005904:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005910:	f7fa fe92 	bl	8000638 <__aeabi_dmul>
 8005914:	e9cd 0100 	strd	r0, r1, [sp]
 8005918:	1136      	asrs	r6, r6, #4
 800591a:	2300      	movs	r3, #0
 800591c:	2502      	movs	r5, #2
 800591e:	2e00      	cmp	r6, #0
 8005920:	d17f      	bne.n	8005a22 <_dtoa_r+0x49a>
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1e1      	bne.n	80058ea <_dtoa_r+0x362>
 8005926:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 8087 	beq.w	8005a3c <_dtoa_r+0x4b4>
 800592e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005932:	2200      	movs	r2, #0
 8005934:	4b93      	ldr	r3, [pc, #588]	; (8005b84 <_dtoa_r+0x5fc>)
 8005936:	4630      	mov	r0, r6
 8005938:	4639      	mov	r1, r7
 800593a:	f7fb f8ef 	bl	8000b1c <__aeabi_dcmplt>
 800593e:	2800      	cmp	r0, #0
 8005940:	d07c      	beq.n	8005a3c <_dtoa_r+0x4b4>
 8005942:	f1b9 0f00 	cmp.w	r9, #0
 8005946:	d079      	beq.n	8005a3c <_dtoa_r+0x4b4>
 8005948:	9b02      	ldr	r3, [sp, #8]
 800594a:	2b00      	cmp	r3, #0
 800594c:	dd35      	ble.n	80059ba <_dtoa_r+0x432>
 800594e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005952:	9308      	str	r3, [sp, #32]
 8005954:	4639      	mov	r1, r7
 8005956:	2200      	movs	r2, #0
 8005958:	4b8b      	ldr	r3, [pc, #556]	; (8005b88 <_dtoa_r+0x600>)
 800595a:	4630      	mov	r0, r6
 800595c:	f7fa fe6c 	bl	8000638 <__aeabi_dmul>
 8005960:	e9cd 0100 	strd	r0, r1, [sp]
 8005964:	9f02      	ldr	r7, [sp, #8]
 8005966:	3501      	adds	r5, #1
 8005968:	4628      	mov	r0, r5
 800596a:	f7fa fdfb 	bl	8000564 <__aeabi_i2d>
 800596e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005972:	f7fa fe61 	bl	8000638 <__aeabi_dmul>
 8005976:	2200      	movs	r2, #0
 8005978:	4b84      	ldr	r3, [pc, #528]	; (8005b8c <_dtoa_r+0x604>)
 800597a:	f7fa fca7 	bl	80002cc <__adddf3>
 800597e:	4605      	mov	r5, r0
 8005980:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005984:	2f00      	cmp	r7, #0
 8005986:	d15d      	bne.n	8005a44 <_dtoa_r+0x4bc>
 8005988:	2200      	movs	r2, #0
 800598a:	4b81      	ldr	r3, [pc, #516]	; (8005b90 <_dtoa_r+0x608>)
 800598c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005990:	f7fa fc9a 	bl	80002c8 <__aeabi_dsub>
 8005994:	462a      	mov	r2, r5
 8005996:	4633      	mov	r3, r6
 8005998:	e9cd 0100 	strd	r0, r1, [sp]
 800599c:	f7fb f8dc 	bl	8000b58 <__aeabi_dcmpgt>
 80059a0:	2800      	cmp	r0, #0
 80059a2:	f040 8288 	bne.w	8005eb6 <_dtoa_r+0x92e>
 80059a6:	462a      	mov	r2, r5
 80059a8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80059ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059b0:	f7fb f8b4 	bl	8000b1c <__aeabi_dcmplt>
 80059b4:	2800      	cmp	r0, #0
 80059b6:	f040 827c 	bne.w	8005eb2 <_dtoa_r+0x92a>
 80059ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80059be:	e9cd 2300 	strd	r2, r3, [sp]
 80059c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f2c0 8150 	blt.w	8005c6a <_dtoa_r+0x6e2>
 80059ca:	f1ba 0f0e 	cmp.w	sl, #14
 80059ce:	f300 814c 	bgt.w	8005c6a <_dtoa_r+0x6e2>
 80059d2:	4b6a      	ldr	r3, [pc, #424]	; (8005b7c <_dtoa_r+0x5f4>)
 80059d4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80059d8:	ed93 7b00 	vldr	d7, [r3]
 80059dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059de:	2b00      	cmp	r3, #0
 80059e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80059e4:	f280 80d8 	bge.w	8005b98 <_dtoa_r+0x610>
 80059e8:	f1b9 0f00 	cmp.w	r9, #0
 80059ec:	f300 80d4 	bgt.w	8005b98 <_dtoa_r+0x610>
 80059f0:	f040 825e 	bne.w	8005eb0 <_dtoa_r+0x928>
 80059f4:	2200      	movs	r2, #0
 80059f6:	4b66      	ldr	r3, [pc, #408]	; (8005b90 <_dtoa_r+0x608>)
 80059f8:	ec51 0b17 	vmov	r0, r1, d7
 80059fc:	f7fa fe1c 	bl	8000638 <__aeabi_dmul>
 8005a00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a04:	f7fb f89e 	bl	8000b44 <__aeabi_dcmpge>
 8005a08:	464f      	mov	r7, r9
 8005a0a:	464e      	mov	r6, r9
 8005a0c:	2800      	cmp	r0, #0
 8005a0e:	f040 8234 	bne.w	8005e7a <_dtoa_r+0x8f2>
 8005a12:	2331      	movs	r3, #49	; 0x31
 8005a14:	f10b 0501 	add.w	r5, fp, #1
 8005a18:	f88b 3000 	strb.w	r3, [fp]
 8005a1c:	f10a 0a01 	add.w	sl, sl, #1
 8005a20:	e22f      	b.n	8005e82 <_dtoa_r+0x8fa>
 8005a22:	07f2      	lsls	r2, r6, #31
 8005a24:	d505      	bpl.n	8005a32 <_dtoa_r+0x4aa>
 8005a26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a2a:	f7fa fe05 	bl	8000638 <__aeabi_dmul>
 8005a2e:	3501      	adds	r5, #1
 8005a30:	2301      	movs	r3, #1
 8005a32:	1076      	asrs	r6, r6, #1
 8005a34:	3708      	adds	r7, #8
 8005a36:	e772      	b.n	800591e <_dtoa_r+0x396>
 8005a38:	2502      	movs	r5, #2
 8005a3a:	e774      	b.n	8005926 <_dtoa_r+0x39e>
 8005a3c:	f8cd a020 	str.w	sl, [sp, #32]
 8005a40:	464f      	mov	r7, r9
 8005a42:	e791      	b.n	8005968 <_dtoa_r+0x3e0>
 8005a44:	4b4d      	ldr	r3, [pc, #308]	; (8005b7c <_dtoa_r+0x5f4>)
 8005a46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005a4a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d047      	beq.n	8005ae4 <_dtoa_r+0x55c>
 8005a54:	4602      	mov	r2, r0
 8005a56:	460b      	mov	r3, r1
 8005a58:	2000      	movs	r0, #0
 8005a5a:	494e      	ldr	r1, [pc, #312]	; (8005b94 <_dtoa_r+0x60c>)
 8005a5c:	f7fa ff16 	bl	800088c <__aeabi_ddiv>
 8005a60:	462a      	mov	r2, r5
 8005a62:	4633      	mov	r3, r6
 8005a64:	f7fa fc30 	bl	80002c8 <__aeabi_dsub>
 8005a68:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005a6c:	465d      	mov	r5, fp
 8005a6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a72:	f7fb f891 	bl	8000b98 <__aeabi_d2iz>
 8005a76:	4606      	mov	r6, r0
 8005a78:	f7fa fd74 	bl	8000564 <__aeabi_i2d>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	460b      	mov	r3, r1
 8005a80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a84:	f7fa fc20 	bl	80002c8 <__aeabi_dsub>
 8005a88:	3630      	adds	r6, #48	; 0x30
 8005a8a:	f805 6b01 	strb.w	r6, [r5], #1
 8005a8e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005a92:	e9cd 0100 	strd	r0, r1, [sp]
 8005a96:	f7fb f841 	bl	8000b1c <__aeabi_dcmplt>
 8005a9a:	2800      	cmp	r0, #0
 8005a9c:	d163      	bne.n	8005b66 <_dtoa_r+0x5de>
 8005a9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005aa2:	2000      	movs	r0, #0
 8005aa4:	4937      	ldr	r1, [pc, #220]	; (8005b84 <_dtoa_r+0x5fc>)
 8005aa6:	f7fa fc0f 	bl	80002c8 <__aeabi_dsub>
 8005aaa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005aae:	f7fb f835 	bl	8000b1c <__aeabi_dcmplt>
 8005ab2:	2800      	cmp	r0, #0
 8005ab4:	f040 80b7 	bne.w	8005c26 <_dtoa_r+0x69e>
 8005ab8:	eba5 030b 	sub.w	r3, r5, fp
 8005abc:	429f      	cmp	r7, r3
 8005abe:	f77f af7c 	ble.w	80059ba <_dtoa_r+0x432>
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	4b30      	ldr	r3, [pc, #192]	; (8005b88 <_dtoa_r+0x600>)
 8005ac6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005aca:	f7fa fdb5 	bl	8000638 <__aeabi_dmul>
 8005ace:	2200      	movs	r2, #0
 8005ad0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005ad4:	4b2c      	ldr	r3, [pc, #176]	; (8005b88 <_dtoa_r+0x600>)
 8005ad6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ada:	f7fa fdad 	bl	8000638 <__aeabi_dmul>
 8005ade:	e9cd 0100 	strd	r0, r1, [sp]
 8005ae2:	e7c4      	b.n	8005a6e <_dtoa_r+0x4e6>
 8005ae4:	462a      	mov	r2, r5
 8005ae6:	4633      	mov	r3, r6
 8005ae8:	f7fa fda6 	bl	8000638 <__aeabi_dmul>
 8005aec:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005af0:	eb0b 0507 	add.w	r5, fp, r7
 8005af4:	465e      	mov	r6, fp
 8005af6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005afa:	f7fb f84d 	bl	8000b98 <__aeabi_d2iz>
 8005afe:	4607      	mov	r7, r0
 8005b00:	f7fa fd30 	bl	8000564 <__aeabi_i2d>
 8005b04:	3730      	adds	r7, #48	; 0x30
 8005b06:	4602      	mov	r2, r0
 8005b08:	460b      	mov	r3, r1
 8005b0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b0e:	f7fa fbdb 	bl	80002c8 <__aeabi_dsub>
 8005b12:	f806 7b01 	strb.w	r7, [r6], #1
 8005b16:	42ae      	cmp	r6, r5
 8005b18:	e9cd 0100 	strd	r0, r1, [sp]
 8005b1c:	f04f 0200 	mov.w	r2, #0
 8005b20:	d126      	bne.n	8005b70 <_dtoa_r+0x5e8>
 8005b22:	4b1c      	ldr	r3, [pc, #112]	; (8005b94 <_dtoa_r+0x60c>)
 8005b24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b28:	f7fa fbd0 	bl	80002cc <__adddf3>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	460b      	mov	r3, r1
 8005b30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b34:	f7fb f810 	bl	8000b58 <__aeabi_dcmpgt>
 8005b38:	2800      	cmp	r0, #0
 8005b3a:	d174      	bne.n	8005c26 <_dtoa_r+0x69e>
 8005b3c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005b40:	2000      	movs	r0, #0
 8005b42:	4914      	ldr	r1, [pc, #80]	; (8005b94 <_dtoa_r+0x60c>)
 8005b44:	f7fa fbc0 	bl	80002c8 <__aeabi_dsub>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b50:	f7fa ffe4 	bl	8000b1c <__aeabi_dcmplt>
 8005b54:	2800      	cmp	r0, #0
 8005b56:	f43f af30 	beq.w	80059ba <_dtoa_r+0x432>
 8005b5a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005b5e:	2b30      	cmp	r3, #48	; 0x30
 8005b60:	f105 32ff 	add.w	r2, r5, #4294967295
 8005b64:	d002      	beq.n	8005b6c <_dtoa_r+0x5e4>
 8005b66:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005b6a:	e04a      	b.n	8005c02 <_dtoa_r+0x67a>
 8005b6c:	4615      	mov	r5, r2
 8005b6e:	e7f4      	b.n	8005b5a <_dtoa_r+0x5d2>
 8005b70:	4b05      	ldr	r3, [pc, #20]	; (8005b88 <_dtoa_r+0x600>)
 8005b72:	f7fa fd61 	bl	8000638 <__aeabi_dmul>
 8005b76:	e9cd 0100 	strd	r0, r1, [sp]
 8005b7a:	e7bc      	b.n	8005af6 <_dtoa_r+0x56e>
 8005b7c:	080076a0 	.word	0x080076a0
 8005b80:	08007678 	.word	0x08007678
 8005b84:	3ff00000 	.word	0x3ff00000
 8005b88:	40240000 	.word	0x40240000
 8005b8c:	401c0000 	.word	0x401c0000
 8005b90:	40140000 	.word	0x40140000
 8005b94:	3fe00000 	.word	0x3fe00000
 8005b98:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005b9c:	465d      	mov	r5, fp
 8005b9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ba2:	4630      	mov	r0, r6
 8005ba4:	4639      	mov	r1, r7
 8005ba6:	f7fa fe71 	bl	800088c <__aeabi_ddiv>
 8005baa:	f7fa fff5 	bl	8000b98 <__aeabi_d2iz>
 8005bae:	4680      	mov	r8, r0
 8005bb0:	f7fa fcd8 	bl	8000564 <__aeabi_i2d>
 8005bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005bb8:	f7fa fd3e 	bl	8000638 <__aeabi_dmul>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	4630      	mov	r0, r6
 8005bc2:	4639      	mov	r1, r7
 8005bc4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005bc8:	f7fa fb7e 	bl	80002c8 <__aeabi_dsub>
 8005bcc:	f805 6b01 	strb.w	r6, [r5], #1
 8005bd0:	eba5 060b 	sub.w	r6, r5, fp
 8005bd4:	45b1      	cmp	r9, r6
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	460b      	mov	r3, r1
 8005bda:	d139      	bne.n	8005c50 <_dtoa_r+0x6c8>
 8005bdc:	f7fa fb76 	bl	80002cc <__adddf3>
 8005be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005be4:	4606      	mov	r6, r0
 8005be6:	460f      	mov	r7, r1
 8005be8:	f7fa ffb6 	bl	8000b58 <__aeabi_dcmpgt>
 8005bec:	b9c8      	cbnz	r0, 8005c22 <_dtoa_r+0x69a>
 8005bee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005bf2:	4630      	mov	r0, r6
 8005bf4:	4639      	mov	r1, r7
 8005bf6:	f7fa ff87 	bl	8000b08 <__aeabi_dcmpeq>
 8005bfa:	b110      	cbz	r0, 8005c02 <_dtoa_r+0x67a>
 8005bfc:	f018 0f01 	tst.w	r8, #1
 8005c00:	d10f      	bne.n	8005c22 <_dtoa_r+0x69a>
 8005c02:	9904      	ldr	r1, [sp, #16]
 8005c04:	4620      	mov	r0, r4
 8005c06:	f000 facc 	bl	80061a2 <_Bfree>
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c0e:	702b      	strb	r3, [r5, #0]
 8005c10:	f10a 0301 	add.w	r3, sl, #1
 8005c14:	6013      	str	r3, [r2, #0]
 8005c16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f000 8241 	beq.w	80060a0 <_dtoa_r+0xb18>
 8005c1e:	601d      	str	r5, [r3, #0]
 8005c20:	e23e      	b.n	80060a0 <_dtoa_r+0xb18>
 8005c22:	f8cd a020 	str.w	sl, [sp, #32]
 8005c26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005c2a:	2a39      	cmp	r2, #57	; 0x39
 8005c2c:	f105 33ff 	add.w	r3, r5, #4294967295
 8005c30:	d108      	bne.n	8005c44 <_dtoa_r+0x6bc>
 8005c32:	459b      	cmp	fp, r3
 8005c34:	d10a      	bne.n	8005c4c <_dtoa_r+0x6c4>
 8005c36:	9b08      	ldr	r3, [sp, #32]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	9308      	str	r3, [sp, #32]
 8005c3c:	2330      	movs	r3, #48	; 0x30
 8005c3e:	f88b 3000 	strb.w	r3, [fp]
 8005c42:	465b      	mov	r3, fp
 8005c44:	781a      	ldrb	r2, [r3, #0]
 8005c46:	3201      	adds	r2, #1
 8005c48:	701a      	strb	r2, [r3, #0]
 8005c4a:	e78c      	b.n	8005b66 <_dtoa_r+0x5de>
 8005c4c:	461d      	mov	r5, r3
 8005c4e:	e7ea      	b.n	8005c26 <_dtoa_r+0x69e>
 8005c50:	2200      	movs	r2, #0
 8005c52:	4b9b      	ldr	r3, [pc, #620]	; (8005ec0 <_dtoa_r+0x938>)
 8005c54:	f7fa fcf0 	bl	8000638 <__aeabi_dmul>
 8005c58:	2200      	movs	r2, #0
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	4606      	mov	r6, r0
 8005c5e:	460f      	mov	r7, r1
 8005c60:	f7fa ff52 	bl	8000b08 <__aeabi_dcmpeq>
 8005c64:	2800      	cmp	r0, #0
 8005c66:	d09a      	beq.n	8005b9e <_dtoa_r+0x616>
 8005c68:	e7cb      	b.n	8005c02 <_dtoa_r+0x67a>
 8005c6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c6c:	2a00      	cmp	r2, #0
 8005c6e:	f000 808b 	beq.w	8005d88 <_dtoa_r+0x800>
 8005c72:	9a06      	ldr	r2, [sp, #24]
 8005c74:	2a01      	cmp	r2, #1
 8005c76:	dc6e      	bgt.n	8005d56 <_dtoa_r+0x7ce>
 8005c78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005c7a:	2a00      	cmp	r2, #0
 8005c7c:	d067      	beq.n	8005d4e <_dtoa_r+0x7c6>
 8005c7e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005c82:	9f07      	ldr	r7, [sp, #28]
 8005c84:	9d05      	ldr	r5, [sp, #20]
 8005c86:	9a05      	ldr	r2, [sp, #20]
 8005c88:	2101      	movs	r1, #1
 8005c8a:	441a      	add	r2, r3
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	9205      	str	r2, [sp, #20]
 8005c90:	4498      	add	r8, r3
 8005c92:	f000 fb26 	bl	80062e2 <__i2b>
 8005c96:	4606      	mov	r6, r0
 8005c98:	2d00      	cmp	r5, #0
 8005c9a:	dd0c      	ble.n	8005cb6 <_dtoa_r+0x72e>
 8005c9c:	f1b8 0f00 	cmp.w	r8, #0
 8005ca0:	dd09      	ble.n	8005cb6 <_dtoa_r+0x72e>
 8005ca2:	4545      	cmp	r5, r8
 8005ca4:	9a05      	ldr	r2, [sp, #20]
 8005ca6:	462b      	mov	r3, r5
 8005ca8:	bfa8      	it	ge
 8005caa:	4643      	movge	r3, r8
 8005cac:	1ad2      	subs	r2, r2, r3
 8005cae:	9205      	str	r2, [sp, #20]
 8005cb0:	1aed      	subs	r5, r5, r3
 8005cb2:	eba8 0803 	sub.w	r8, r8, r3
 8005cb6:	9b07      	ldr	r3, [sp, #28]
 8005cb8:	b1eb      	cbz	r3, 8005cf6 <_dtoa_r+0x76e>
 8005cba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d067      	beq.n	8005d90 <_dtoa_r+0x808>
 8005cc0:	b18f      	cbz	r7, 8005ce6 <_dtoa_r+0x75e>
 8005cc2:	4631      	mov	r1, r6
 8005cc4:	463a      	mov	r2, r7
 8005cc6:	4620      	mov	r0, r4
 8005cc8:	f000 fbaa 	bl	8006420 <__pow5mult>
 8005ccc:	9a04      	ldr	r2, [sp, #16]
 8005cce:	4601      	mov	r1, r0
 8005cd0:	4606      	mov	r6, r0
 8005cd2:	4620      	mov	r0, r4
 8005cd4:	f000 fb0e 	bl	80062f4 <__multiply>
 8005cd8:	9904      	ldr	r1, [sp, #16]
 8005cda:	9008      	str	r0, [sp, #32]
 8005cdc:	4620      	mov	r0, r4
 8005cde:	f000 fa60 	bl	80061a2 <_Bfree>
 8005ce2:	9b08      	ldr	r3, [sp, #32]
 8005ce4:	9304      	str	r3, [sp, #16]
 8005ce6:	9b07      	ldr	r3, [sp, #28]
 8005ce8:	1bda      	subs	r2, r3, r7
 8005cea:	d004      	beq.n	8005cf6 <_dtoa_r+0x76e>
 8005cec:	9904      	ldr	r1, [sp, #16]
 8005cee:	4620      	mov	r0, r4
 8005cf0:	f000 fb96 	bl	8006420 <__pow5mult>
 8005cf4:	9004      	str	r0, [sp, #16]
 8005cf6:	2101      	movs	r1, #1
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	f000 faf2 	bl	80062e2 <__i2b>
 8005cfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d00:	4607      	mov	r7, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 81d0 	beq.w	80060a8 <_dtoa_r+0xb20>
 8005d08:	461a      	mov	r2, r3
 8005d0a:	4601      	mov	r1, r0
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	f000 fb87 	bl	8006420 <__pow5mult>
 8005d12:	9b06      	ldr	r3, [sp, #24]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	4607      	mov	r7, r0
 8005d18:	dc40      	bgt.n	8005d9c <_dtoa_r+0x814>
 8005d1a:	9b00      	ldr	r3, [sp, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d139      	bne.n	8005d94 <_dtoa_r+0x80c>
 8005d20:	9b01      	ldr	r3, [sp, #4]
 8005d22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d136      	bne.n	8005d98 <_dtoa_r+0x810>
 8005d2a:	9b01      	ldr	r3, [sp, #4]
 8005d2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d30:	0d1b      	lsrs	r3, r3, #20
 8005d32:	051b      	lsls	r3, r3, #20
 8005d34:	b12b      	cbz	r3, 8005d42 <_dtoa_r+0x7ba>
 8005d36:	9b05      	ldr	r3, [sp, #20]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	9305      	str	r3, [sp, #20]
 8005d3c:	f108 0801 	add.w	r8, r8, #1
 8005d40:	2301      	movs	r3, #1
 8005d42:	9307      	str	r3, [sp, #28]
 8005d44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d12a      	bne.n	8005da0 <_dtoa_r+0x818>
 8005d4a:	2001      	movs	r0, #1
 8005d4c:	e030      	b.n	8005db0 <_dtoa_r+0x828>
 8005d4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005d50:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005d54:	e795      	b.n	8005c82 <_dtoa_r+0x6fa>
 8005d56:	9b07      	ldr	r3, [sp, #28]
 8005d58:	f109 37ff 	add.w	r7, r9, #4294967295
 8005d5c:	42bb      	cmp	r3, r7
 8005d5e:	bfbf      	itttt	lt
 8005d60:	9b07      	ldrlt	r3, [sp, #28]
 8005d62:	9707      	strlt	r7, [sp, #28]
 8005d64:	1afa      	sublt	r2, r7, r3
 8005d66:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005d68:	bfbb      	ittet	lt
 8005d6a:	189b      	addlt	r3, r3, r2
 8005d6c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005d6e:	1bdf      	subge	r7, r3, r7
 8005d70:	2700      	movlt	r7, #0
 8005d72:	f1b9 0f00 	cmp.w	r9, #0
 8005d76:	bfb5      	itete	lt
 8005d78:	9b05      	ldrlt	r3, [sp, #20]
 8005d7a:	9d05      	ldrge	r5, [sp, #20]
 8005d7c:	eba3 0509 	sublt.w	r5, r3, r9
 8005d80:	464b      	movge	r3, r9
 8005d82:	bfb8      	it	lt
 8005d84:	2300      	movlt	r3, #0
 8005d86:	e77e      	b.n	8005c86 <_dtoa_r+0x6fe>
 8005d88:	9f07      	ldr	r7, [sp, #28]
 8005d8a:	9d05      	ldr	r5, [sp, #20]
 8005d8c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005d8e:	e783      	b.n	8005c98 <_dtoa_r+0x710>
 8005d90:	9a07      	ldr	r2, [sp, #28]
 8005d92:	e7ab      	b.n	8005cec <_dtoa_r+0x764>
 8005d94:	2300      	movs	r3, #0
 8005d96:	e7d4      	b.n	8005d42 <_dtoa_r+0x7ba>
 8005d98:	9b00      	ldr	r3, [sp, #0]
 8005d9a:	e7d2      	b.n	8005d42 <_dtoa_r+0x7ba>
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	9307      	str	r3, [sp, #28]
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005da6:	6918      	ldr	r0, [r3, #16]
 8005da8:	f000 fa4d 	bl	8006246 <__hi0bits>
 8005dac:	f1c0 0020 	rsb	r0, r0, #32
 8005db0:	4440      	add	r0, r8
 8005db2:	f010 001f 	ands.w	r0, r0, #31
 8005db6:	d047      	beq.n	8005e48 <_dtoa_r+0x8c0>
 8005db8:	f1c0 0320 	rsb	r3, r0, #32
 8005dbc:	2b04      	cmp	r3, #4
 8005dbe:	dd3b      	ble.n	8005e38 <_dtoa_r+0x8b0>
 8005dc0:	9b05      	ldr	r3, [sp, #20]
 8005dc2:	f1c0 001c 	rsb	r0, r0, #28
 8005dc6:	4403      	add	r3, r0
 8005dc8:	9305      	str	r3, [sp, #20]
 8005dca:	4405      	add	r5, r0
 8005dcc:	4480      	add	r8, r0
 8005dce:	9b05      	ldr	r3, [sp, #20]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	dd05      	ble.n	8005de0 <_dtoa_r+0x858>
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	9904      	ldr	r1, [sp, #16]
 8005dd8:	4620      	mov	r0, r4
 8005dda:	f000 fb6f 	bl	80064bc <__lshift>
 8005dde:	9004      	str	r0, [sp, #16]
 8005de0:	f1b8 0f00 	cmp.w	r8, #0
 8005de4:	dd05      	ble.n	8005df2 <_dtoa_r+0x86a>
 8005de6:	4639      	mov	r1, r7
 8005de8:	4642      	mov	r2, r8
 8005dea:	4620      	mov	r0, r4
 8005dec:	f000 fb66 	bl	80064bc <__lshift>
 8005df0:	4607      	mov	r7, r0
 8005df2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005df4:	b353      	cbz	r3, 8005e4c <_dtoa_r+0x8c4>
 8005df6:	4639      	mov	r1, r7
 8005df8:	9804      	ldr	r0, [sp, #16]
 8005dfa:	f000 fbb3 	bl	8006564 <__mcmp>
 8005dfe:	2800      	cmp	r0, #0
 8005e00:	da24      	bge.n	8005e4c <_dtoa_r+0x8c4>
 8005e02:	2300      	movs	r3, #0
 8005e04:	220a      	movs	r2, #10
 8005e06:	9904      	ldr	r1, [sp, #16]
 8005e08:	4620      	mov	r0, r4
 8005e0a:	f000 f9e1 	bl	80061d0 <__multadd>
 8005e0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e10:	9004      	str	r0, [sp, #16]
 8005e12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f000 814d 	beq.w	80060b6 <_dtoa_r+0xb2e>
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	4631      	mov	r1, r6
 8005e20:	220a      	movs	r2, #10
 8005e22:	4620      	mov	r0, r4
 8005e24:	f000 f9d4 	bl	80061d0 <__multadd>
 8005e28:	9b02      	ldr	r3, [sp, #8]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	4606      	mov	r6, r0
 8005e2e:	dc4f      	bgt.n	8005ed0 <_dtoa_r+0x948>
 8005e30:	9b06      	ldr	r3, [sp, #24]
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	dd4c      	ble.n	8005ed0 <_dtoa_r+0x948>
 8005e36:	e011      	b.n	8005e5c <_dtoa_r+0x8d4>
 8005e38:	d0c9      	beq.n	8005dce <_dtoa_r+0x846>
 8005e3a:	9a05      	ldr	r2, [sp, #20]
 8005e3c:	331c      	adds	r3, #28
 8005e3e:	441a      	add	r2, r3
 8005e40:	9205      	str	r2, [sp, #20]
 8005e42:	441d      	add	r5, r3
 8005e44:	4498      	add	r8, r3
 8005e46:	e7c2      	b.n	8005dce <_dtoa_r+0x846>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	e7f6      	b.n	8005e3a <_dtoa_r+0x8b2>
 8005e4c:	f1b9 0f00 	cmp.w	r9, #0
 8005e50:	dc38      	bgt.n	8005ec4 <_dtoa_r+0x93c>
 8005e52:	9b06      	ldr	r3, [sp, #24]
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	dd35      	ble.n	8005ec4 <_dtoa_r+0x93c>
 8005e58:	f8cd 9008 	str.w	r9, [sp, #8]
 8005e5c:	9b02      	ldr	r3, [sp, #8]
 8005e5e:	b963      	cbnz	r3, 8005e7a <_dtoa_r+0x8f2>
 8005e60:	4639      	mov	r1, r7
 8005e62:	2205      	movs	r2, #5
 8005e64:	4620      	mov	r0, r4
 8005e66:	f000 f9b3 	bl	80061d0 <__multadd>
 8005e6a:	4601      	mov	r1, r0
 8005e6c:	4607      	mov	r7, r0
 8005e6e:	9804      	ldr	r0, [sp, #16]
 8005e70:	f000 fb78 	bl	8006564 <__mcmp>
 8005e74:	2800      	cmp	r0, #0
 8005e76:	f73f adcc 	bgt.w	8005a12 <_dtoa_r+0x48a>
 8005e7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e7c:	465d      	mov	r5, fp
 8005e7e:	ea6f 0a03 	mvn.w	sl, r3
 8005e82:	f04f 0900 	mov.w	r9, #0
 8005e86:	4639      	mov	r1, r7
 8005e88:	4620      	mov	r0, r4
 8005e8a:	f000 f98a 	bl	80061a2 <_Bfree>
 8005e8e:	2e00      	cmp	r6, #0
 8005e90:	f43f aeb7 	beq.w	8005c02 <_dtoa_r+0x67a>
 8005e94:	f1b9 0f00 	cmp.w	r9, #0
 8005e98:	d005      	beq.n	8005ea6 <_dtoa_r+0x91e>
 8005e9a:	45b1      	cmp	r9, r6
 8005e9c:	d003      	beq.n	8005ea6 <_dtoa_r+0x91e>
 8005e9e:	4649      	mov	r1, r9
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	f000 f97e 	bl	80061a2 <_Bfree>
 8005ea6:	4631      	mov	r1, r6
 8005ea8:	4620      	mov	r0, r4
 8005eaa:	f000 f97a 	bl	80061a2 <_Bfree>
 8005eae:	e6a8      	b.n	8005c02 <_dtoa_r+0x67a>
 8005eb0:	2700      	movs	r7, #0
 8005eb2:	463e      	mov	r6, r7
 8005eb4:	e7e1      	b.n	8005e7a <_dtoa_r+0x8f2>
 8005eb6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005eba:	463e      	mov	r6, r7
 8005ebc:	e5a9      	b.n	8005a12 <_dtoa_r+0x48a>
 8005ebe:	bf00      	nop
 8005ec0:	40240000 	.word	0x40240000
 8005ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ec6:	f8cd 9008 	str.w	r9, [sp, #8]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f000 80fa 	beq.w	80060c4 <_dtoa_r+0xb3c>
 8005ed0:	2d00      	cmp	r5, #0
 8005ed2:	dd05      	ble.n	8005ee0 <_dtoa_r+0x958>
 8005ed4:	4631      	mov	r1, r6
 8005ed6:	462a      	mov	r2, r5
 8005ed8:	4620      	mov	r0, r4
 8005eda:	f000 faef 	bl	80064bc <__lshift>
 8005ede:	4606      	mov	r6, r0
 8005ee0:	9b07      	ldr	r3, [sp, #28]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d04c      	beq.n	8005f80 <_dtoa_r+0x9f8>
 8005ee6:	6871      	ldr	r1, [r6, #4]
 8005ee8:	4620      	mov	r0, r4
 8005eea:	f000 f926 	bl	800613a <_Balloc>
 8005eee:	6932      	ldr	r2, [r6, #16]
 8005ef0:	3202      	adds	r2, #2
 8005ef2:	4605      	mov	r5, r0
 8005ef4:	0092      	lsls	r2, r2, #2
 8005ef6:	f106 010c 	add.w	r1, r6, #12
 8005efa:	300c      	adds	r0, #12
 8005efc:	f000 f912 	bl	8006124 <memcpy>
 8005f00:	2201      	movs	r2, #1
 8005f02:	4629      	mov	r1, r5
 8005f04:	4620      	mov	r0, r4
 8005f06:	f000 fad9 	bl	80064bc <__lshift>
 8005f0a:	9b00      	ldr	r3, [sp, #0]
 8005f0c:	f8cd b014 	str.w	fp, [sp, #20]
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	46b1      	mov	r9, r6
 8005f16:	9307      	str	r3, [sp, #28]
 8005f18:	4606      	mov	r6, r0
 8005f1a:	4639      	mov	r1, r7
 8005f1c:	9804      	ldr	r0, [sp, #16]
 8005f1e:	f7ff faa7 	bl	8005470 <quorem>
 8005f22:	4649      	mov	r1, r9
 8005f24:	4605      	mov	r5, r0
 8005f26:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005f2a:	9804      	ldr	r0, [sp, #16]
 8005f2c:	f000 fb1a 	bl	8006564 <__mcmp>
 8005f30:	4632      	mov	r2, r6
 8005f32:	9000      	str	r0, [sp, #0]
 8005f34:	4639      	mov	r1, r7
 8005f36:	4620      	mov	r0, r4
 8005f38:	f000 fb2e 	bl	8006598 <__mdiff>
 8005f3c:	68c3      	ldr	r3, [r0, #12]
 8005f3e:	4602      	mov	r2, r0
 8005f40:	bb03      	cbnz	r3, 8005f84 <_dtoa_r+0x9fc>
 8005f42:	4601      	mov	r1, r0
 8005f44:	9008      	str	r0, [sp, #32]
 8005f46:	9804      	ldr	r0, [sp, #16]
 8005f48:	f000 fb0c 	bl	8006564 <__mcmp>
 8005f4c:	9a08      	ldr	r2, [sp, #32]
 8005f4e:	4603      	mov	r3, r0
 8005f50:	4611      	mov	r1, r2
 8005f52:	4620      	mov	r0, r4
 8005f54:	9308      	str	r3, [sp, #32]
 8005f56:	f000 f924 	bl	80061a2 <_Bfree>
 8005f5a:	9b08      	ldr	r3, [sp, #32]
 8005f5c:	b9a3      	cbnz	r3, 8005f88 <_dtoa_r+0xa00>
 8005f5e:	9a06      	ldr	r2, [sp, #24]
 8005f60:	b992      	cbnz	r2, 8005f88 <_dtoa_r+0xa00>
 8005f62:	9a07      	ldr	r2, [sp, #28]
 8005f64:	b982      	cbnz	r2, 8005f88 <_dtoa_r+0xa00>
 8005f66:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005f6a:	d029      	beq.n	8005fc0 <_dtoa_r+0xa38>
 8005f6c:	9b00      	ldr	r3, [sp, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	dd01      	ble.n	8005f76 <_dtoa_r+0x9ee>
 8005f72:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005f76:	9b05      	ldr	r3, [sp, #20]
 8005f78:	1c5d      	adds	r5, r3, #1
 8005f7a:	f883 8000 	strb.w	r8, [r3]
 8005f7e:	e782      	b.n	8005e86 <_dtoa_r+0x8fe>
 8005f80:	4630      	mov	r0, r6
 8005f82:	e7c2      	b.n	8005f0a <_dtoa_r+0x982>
 8005f84:	2301      	movs	r3, #1
 8005f86:	e7e3      	b.n	8005f50 <_dtoa_r+0x9c8>
 8005f88:	9a00      	ldr	r2, [sp, #0]
 8005f8a:	2a00      	cmp	r2, #0
 8005f8c:	db04      	blt.n	8005f98 <_dtoa_r+0xa10>
 8005f8e:	d125      	bne.n	8005fdc <_dtoa_r+0xa54>
 8005f90:	9a06      	ldr	r2, [sp, #24]
 8005f92:	bb1a      	cbnz	r2, 8005fdc <_dtoa_r+0xa54>
 8005f94:	9a07      	ldr	r2, [sp, #28]
 8005f96:	bb0a      	cbnz	r2, 8005fdc <_dtoa_r+0xa54>
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	ddec      	ble.n	8005f76 <_dtoa_r+0x9ee>
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	9904      	ldr	r1, [sp, #16]
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	f000 fa8b 	bl	80064bc <__lshift>
 8005fa6:	4639      	mov	r1, r7
 8005fa8:	9004      	str	r0, [sp, #16]
 8005faa:	f000 fadb 	bl	8006564 <__mcmp>
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	dc03      	bgt.n	8005fba <_dtoa_r+0xa32>
 8005fb2:	d1e0      	bne.n	8005f76 <_dtoa_r+0x9ee>
 8005fb4:	f018 0f01 	tst.w	r8, #1
 8005fb8:	d0dd      	beq.n	8005f76 <_dtoa_r+0x9ee>
 8005fba:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005fbe:	d1d8      	bne.n	8005f72 <_dtoa_r+0x9ea>
 8005fc0:	9b05      	ldr	r3, [sp, #20]
 8005fc2:	9a05      	ldr	r2, [sp, #20]
 8005fc4:	1c5d      	adds	r5, r3, #1
 8005fc6:	2339      	movs	r3, #57	; 0x39
 8005fc8:	7013      	strb	r3, [r2, #0]
 8005fca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005fce:	2b39      	cmp	r3, #57	; 0x39
 8005fd0:	f105 32ff 	add.w	r2, r5, #4294967295
 8005fd4:	d04f      	beq.n	8006076 <_dtoa_r+0xaee>
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	7013      	strb	r3, [r2, #0]
 8005fda:	e754      	b.n	8005e86 <_dtoa_r+0x8fe>
 8005fdc:	9a05      	ldr	r2, [sp, #20]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f102 0501 	add.w	r5, r2, #1
 8005fe4:	dd06      	ble.n	8005ff4 <_dtoa_r+0xa6c>
 8005fe6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005fea:	d0e9      	beq.n	8005fc0 <_dtoa_r+0xa38>
 8005fec:	f108 0801 	add.w	r8, r8, #1
 8005ff0:	9b05      	ldr	r3, [sp, #20]
 8005ff2:	e7c2      	b.n	8005f7a <_dtoa_r+0x9f2>
 8005ff4:	9a02      	ldr	r2, [sp, #8]
 8005ff6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005ffa:	eba5 030b 	sub.w	r3, r5, fp
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d021      	beq.n	8006046 <_dtoa_r+0xabe>
 8006002:	2300      	movs	r3, #0
 8006004:	220a      	movs	r2, #10
 8006006:	9904      	ldr	r1, [sp, #16]
 8006008:	4620      	mov	r0, r4
 800600a:	f000 f8e1 	bl	80061d0 <__multadd>
 800600e:	45b1      	cmp	r9, r6
 8006010:	9004      	str	r0, [sp, #16]
 8006012:	f04f 0300 	mov.w	r3, #0
 8006016:	f04f 020a 	mov.w	r2, #10
 800601a:	4649      	mov	r1, r9
 800601c:	4620      	mov	r0, r4
 800601e:	d105      	bne.n	800602c <_dtoa_r+0xaa4>
 8006020:	f000 f8d6 	bl	80061d0 <__multadd>
 8006024:	4681      	mov	r9, r0
 8006026:	4606      	mov	r6, r0
 8006028:	9505      	str	r5, [sp, #20]
 800602a:	e776      	b.n	8005f1a <_dtoa_r+0x992>
 800602c:	f000 f8d0 	bl	80061d0 <__multadd>
 8006030:	4631      	mov	r1, r6
 8006032:	4681      	mov	r9, r0
 8006034:	2300      	movs	r3, #0
 8006036:	220a      	movs	r2, #10
 8006038:	4620      	mov	r0, r4
 800603a:	f000 f8c9 	bl	80061d0 <__multadd>
 800603e:	4606      	mov	r6, r0
 8006040:	e7f2      	b.n	8006028 <_dtoa_r+0xaa0>
 8006042:	f04f 0900 	mov.w	r9, #0
 8006046:	2201      	movs	r2, #1
 8006048:	9904      	ldr	r1, [sp, #16]
 800604a:	4620      	mov	r0, r4
 800604c:	f000 fa36 	bl	80064bc <__lshift>
 8006050:	4639      	mov	r1, r7
 8006052:	9004      	str	r0, [sp, #16]
 8006054:	f000 fa86 	bl	8006564 <__mcmp>
 8006058:	2800      	cmp	r0, #0
 800605a:	dcb6      	bgt.n	8005fca <_dtoa_r+0xa42>
 800605c:	d102      	bne.n	8006064 <_dtoa_r+0xadc>
 800605e:	f018 0f01 	tst.w	r8, #1
 8006062:	d1b2      	bne.n	8005fca <_dtoa_r+0xa42>
 8006064:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006068:	2b30      	cmp	r3, #48	; 0x30
 800606a:	f105 32ff 	add.w	r2, r5, #4294967295
 800606e:	f47f af0a 	bne.w	8005e86 <_dtoa_r+0x8fe>
 8006072:	4615      	mov	r5, r2
 8006074:	e7f6      	b.n	8006064 <_dtoa_r+0xadc>
 8006076:	4593      	cmp	fp, r2
 8006078:	d105      	bne.n	8006086 <_dtoa_r+0xafe>
 800607a:	2331      	movs	r3, #49	; 0x31
 800607c:	f10a 0a01 	add.w	sl, sl, #1
 8006080:	f88b 3000 	strb.w	r3, [fp]
 8006084:	e6ff      	b.n	8005e86 <_dtoa_r+0x8fe>
 8006086:	4615      	mov	r5, r2
 8006088:	e79f      	b.n	8005fca <_dtoa_r+0xa42>
 800608a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80060f0 <_dtoa_r+0xb68>
 800608e:	e007      	b.n	80060a0 <_dtoa_r+0xb18>
 8006090:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006092:	f8df b060 	ldr.w	fp, [pc, #96]	; 80060f4 <_dtoa_r+0xb6c>
 8006096:	b11b      	cbz	r3, 80060a0 <_dtoa_r+0xb18>
 8006098:	f10b 0308 	add.w	r3, fp, #8
 800609c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800609e:	6013      	str	r3, [r2, #0]
 80060a0:	4658      	mov	r0, fp
 80060a2:	b017      	add	sp, #92	; 0x5c
 80060a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060a8:	9b06      	ldr	r3, [sp, #24]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	f77f ae35 	ble.w	8005d1a <_dtoa_r+0x792>
 80060b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060b2:	9307      	str	r3, [sp, #28]
 80060b4:	e649      	b.n	8005d4a <_dtoa_r+0x7c2>
 80060b6:	9b02      	ldr	r3, [sp, #8]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	dc03      	bgt.n	80060c4 <_dtoa_r+0xb3c>
 80060bc:	9b06      	ldr	r3, [sp, #24]
 80060be:	2b02      	cmp	r3, #2
 80060c0:	f73f aecc 	bgt.w	8005e5c <_dtoa_r+0x8d4>
 80060c4:	465d      	mov	r5, fp
 80060c6:	4639      	mov	r1, r7
 80060c8:	9804      	ldr	r0, [sp, #16]
 80060ca:	f7ff f9d1 	bl	8005470 <quorem>
 80060ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80060d2:	f805 8b01 	strb.w	r8, [r5], #1
 80060d6:	9a02      	ldr	r2, [sp, #8]
 80060d8:	eba5 030b 	sub.w	r3, r5, fp
 80060dc:	429a      	cmp	r2, r3
 80060de:	ddb0      	ble.n	8006042 <_dtoa_r+0xaba>
 80060e0:	2300      	movs	r3, #0
 80060e2:	220a      	movs	r2, #10
 80060e4:	9904      	ldr	r1, [sp, #16]
 80060e6:	4620      	mov	r0, r4
 80060e8:	f000 f872 	bl	80061d0 <__multadd>
 80060ec:	9004      	str	r0, [sp, #16]
 80060ee:	e7ea      	b.n	80060c6 <_dtoa_r+0xb3e>
 80060f0:	08007644 	.word	0x08007644
 80060f4:	08007668 	.word	0x08007668

080060f8 <_localeconv_r>:
 80060f8:	4b04      	ldr	r3, [pc, #16]	; (800610c <_localeconv_r+0x14>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6a18      	ldr	r0, [r3, #32]
 80060fe:	4b04      	ldr	r3, [pc, #16]	; (8006110 <_localeconv_r+0x18>)
 8006100:	2800      	cmp	r0, #0
 8006102:	bf08      	it	eq
 8006104:	4618      	moveq	r0, r3
 8006106:	30f0      	adds	r0, #240	; 0xf0
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	20000014 	.word	0x20000014
 8006110:	20000078 	.word	0x20000078

08006114 <malloc>:
 8006114:	4b02      	ldr	r3, [pc, #8]	; (8006120 <malloc+0xc>)
 8006116:	4601      	mov	r1, r0
 8006118:	6818      	ldr	r0, [r3, #0]
 800611a:	f000 bb45 	b.w	80067a8 <_malloc_r>
 800611e:	bf00      	nop
 8006120:	20000014 	.word	0x20000014

08006124 <memcpy>:
 8006124:	b510      	push	{r4, lr}
 8006126:	1e43      	subs	r3, r0, #1
 8006128:	440a      	add	r2, r1
 800612a:	4291      	cmp	r1, r2
 800612c:	d100      	bne.n	8006130 <memcpy+0xc>
 800612e:	bd10      	pop	{r4, pc}
 8006130:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006134:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006138:	e7f7      	b.n	800612a <memcpy+0x6>

0800613a <_Balloc>:
 800613a:	b570      	push	{r4, r5, r6, lr}
 800613c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800613e:	4604      	mov	r4, r0
 8006140:	460e      	mov	r6, r1
 8006142:	b93d      	cbnz	r5, 8006154 <_Balloc+0x1a>
 8006144:	2010      	movs	r0, #16
 8006146:	f7ff ffe5 	bl	8006114 <malloc>
 800614a:	6260      	str	r0, [r4, #36]	; 0x24
 800614c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006150:	6005      	str	r5, [r0, #0]
 8006152:	60c5      	str	r5, [r0, #12]
 8006154:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006156:	68eb      	ldr	r3, [r5, #12]
 8006158:	b183      	cbz	r3, 800617c <_Balloc+0x42>
 800615a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006162:	b9b8      	cbnz	r0, 8006194 <_Balloc+0x5a>
 8006164:	2101      	movs	r1, #1
 8006166:	fa01 f506 	lsl.w	r5, r1, r6
 800616a:	1d6a      	adds	r2, r5, #5
 800616c:	0092      	lsls	r2, r2, #2
 800616e:	4620      	mov	r0, r4
 8006170:	f000 fabe 	bl	80066f0 <_calloc_r>
 8006174:	b160      	cbz	r0, 8006190 <_Balloc+0x56>
 8006176:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800617a:	e00e      	b.n	800619a <_Balloc+0x60>
 800617c:	2221      	movs	r2, #33	; 0x21
 800617e:	2104      	movs	r1, #4
 8006180:	4620      	mov	r0, r4
 8006182:	f000 fab5 	bl	80066f0 <_calloc_r>
 8006186:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006188:	60e8      	str	r0, [r5, #12]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1e4      	bne.n	800615a <_Balloc+0x20>
 8006190:	2000      	movs	r0, #0
 8006192:	bd70      	pop	{r4, r5, r6, pc}
 8006194:	6802      	ldr	r2, [r0, #0]
 8006196:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800619a:	2300      	movs	r3, #0
 800619c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80061a0:	e7f7      	b.n	8006192 <_Balloc+0x58>

080061a2 <_Bfree>:
 80061a2:	b570      	push	{r4, r5, r6, lr}
 80061a4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80061a6:	4606      	mov	r6, r0
 80061a8:	460d      	mov	r5, r1
 80061aa:	b93c      	cbnz	r4, 80061bc <_Bfree+0x1a>
 80061ac:	2010      	movs	r0, #16
 80061ae:	f7ff ffb1 	bl	8006114 <malloc>
 80061b2:	6270      	str	r0, [r6, #36]	; 0x24
 80061b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80061b8:	6004      	str	r4, [r0, #0]
 80061ba:	60c4      	str	r4, [r0, #12]
 80061bc:	b13d      	cbz	r5, 80061ce <_Bfree+0x2c>
 80061be:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80061c0:	686a      	ldr	r2, [r5, #4]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061c8:	6029      	str	r1, [r5, #0]
 80061ca:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80061ce:	bd70      	pop	{r4, r5, r6, pc}

080061d0 <__multadd>:
 80061d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061d4:	690d      	ldr	r5, [r1, #16]
 80061d6:	461f      	mov	r7, r3
 80061d8:	4606      	mov	r6, r0
 80061da:	460c      	mov	r4, r1
 80061dc:	f101 0c14 	add.w	ip, r1, #20
 80061e0:	2300      	movs	r3, #0
 80061e2:	f8dc 0000 	ldr.w	r0, [ip]
 80061e6:	b281      	uxth	r1, r0
 80061e8:	fb02 7101 	mla	r1, r2, r1, r7
 80061ec:	0c0f      	lsrs	r7, r1, #16
 80061ee:	0c00      	lsrs	r0, r0, #16
 80061f0:	fb02 7000 	mla	r0, r2, r0, r7
 80061f4:	b289      	uxth	r1, r1
 80061f6:	3301      	adds	r3, #1
 80061f8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80061fc:	429d      	cmp	r5, r3
 80061fe:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006202:	f84c 1b04 	str.w	r1, [ip], #4
 8006206:	dcec      	bgt.n	80061e2 <__multadd+0x12>
 8006208:	b1d7      	cbz	r7, 8006240 <__multadd+0x70>
 800620a:	68a3      	ldr	r3, [r4, #8]
 800620c:	42ab      	cmp	r3, r5
 800620e:	dc12      	bgt.n	8006236 <__multadd+0x66>
 8006210:	6861      	ldr	r1, [r4, #4]
 8006212:	4630      	mov	r0, r6
 8006214:	3101      	adds	r1, #1
 8006216:	f7ff ff90 	bl	800613a <_Balloc>
 800621a:	6922      	ldr	r2, [r4, #16]
 800621c:	3202      	adds	r2, #2
 800621e:	f104 010c 	add.w	r1, r4, #12
 8006222:	4680      	mov	r8, r0
 8006224:	0092      	lsls	r2, r2, #2
 8006226:	300c      	adds	r0, #12
 8006228:	f7ff ff7c 	bl	8006124 <memcpy>
 800622c:	4621      	mov	r1, r4
 800622e:	4630      	mov	r0, r6
 8006230:	f7ff ffb7 	bl	80061a2 <_Bfree>
 8006234:	4644      	mov	r4, r8
 8006236:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800623a:	3501      	adds	r5, #1
 800623c:	615f      	str	r7, [r3, #20]
 800623e:	6125      	str	r5, [r4, #16]
 8006240:	4620      	mov	r0, r4
 8006242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006246 <__hi0bits>:
 8006246:	0c02      	lsrs	r2, r0, #16
 8006248:	0412      	lsls	r2, r2, #16
 800624a:	4603      	mov	r3, r0
 800624c:	b9b2      	cbnz	r2, 800627c <__hi0bits+0x36>
 800624e:	0403      	lsls	r3, r0, #16
 8006250:	2010      	movs	r0, #16
 8006252:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006256:	bf04      	itt	eq
 8006258:	021b      	lsleq	r3, r3, #8
 800625a:	3008      	addeq	r0, #8
 800625c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006260:	bf04      	itt	eq
 8006262:	011b      	lsleq	r3, r3, #4
 8006264:	3004      	addeq	r0, #4
 8006266:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800626a:	bf04      	itt	eq
 800626c:	009b      	lsleq	r3, r3, #2
 800626e:	3002      	addeq	r0, #2
 8006270:	2b00      	cmp	r3, #0
 8006272:	db06      	blt.n	8006282 <__hi0bits+0x3c>
 8006274:	005b      	lsls	r3, r3, #1
 8006276:	d503      	bpl.n	8006280 <__hi0bits+0x3a>
 8006278:	3001      	adds	r0, #1
 800627a:	4770      	bx	lr
 800627c:	2000      	movs	r0, #0
 800627e:	e7e8      	b.n	8006252 <__hi0bits+0xc>
 8006280:	2020      	movs	r0, #32
 8006282:	4770      	bx	lr

08006284 <__lo0bits>:
 8006284:	6803      	ldr	r3, [r0, #0]
 8006286:	f013 0207 	ands.w	r2, r3, #7
 800628a:	4601      	mov	r1, r0
 800628c:	d00b      	beq.n	80062a6 <__lo0bits+0x22>
 800628e:	07da      	lsls	r2, r3, #31
 8006290:	d423      	bmi.n	80062da <__lo0bits+0x56>
 8006292:	0798      	lsls	r0, r3, #30
 8006294:	bf49      	itett	mi
 8006296:	085b      	lsrmi	r3, r3, #1
 8006298:	089b      	lsrpl	r3, r3, #2
 800629a:	2001      	movmi	r0, #1
 800629c:	600b      	strmi	r3, [r1, #0]
 800629e:	bf5c      	itt	pl
 80062a0:	600b      	strpl	r3, [r1, #0]
 80062a2:	2002      	movpl	r0, #2
 80062a4:	4770      	bx	lr
 80062a6:	b298      	uxth	r0, r3
 80062a8:	b9a8      	cbnz	r0, 80062d6 <__lo0bits+0x52>
 80062aa:	0c1b      	lsrs	r3, r3, #16
 80062ac:	2010      	movs	r0, #16
 80062ae:	f013 0fff 	tst.w	r3, #255	; 0xff
 80062b2:	bf04      	itt	eq
 80062b4:	0a1b      	lsreq	r3, r3, #8
 80062b6:	3008      	addeq	r0, #8
 80062b8:	071a      	lsls	r2, r3, #28
 80062ba:	bf04      	itt	eq
 80062bc:	091b      	lsreq	r3, r3, #4
 80062be:	3004      	addeq	r0, #4
 80062c0:	079a      	lsls	r2, r3, #30
 80062c2:	bf04      	itt	eq
 80062c4:	089b      	lsreq	r3, r3, #2
 80062c6:	3002      	addeq	r0, #2
 80062c8:	07da      	lsls	r2, r3, #31
 80062ca:	d402      	bmi.n	80062d2 <__lo0bits+0x4e>
 80062cc:	085b      	lsrs	r3, r3, #1
 80062ce:	d006      	beq.n	80062de <__lo0bits+0x5a>
 80062d0:	3001      	adds	r0, #1
 80062d2:	600b      	str	r3, [r1, #0]
 80062d4:	4770      	bx	lr
 80062d6:	4610      	mov	r0, r2
 80062d8:	e7e9      	b.n	80062ae <__lo0bits+0x2a>
 80062da:	2000      	movs	r0, #0
 80062dc:	4770      	bx	lr
 80062de:	2020      	movs	r0, #32
 80062e0:	4770      	bx	lr

080062e2 <__i2b>:
 80062e2:	b510      	push	{r4, lr}
 80062e4:	460c      	mov	r4, r1
 80062e6:	2101      	movs	r1, #1
 80062e8:	f7ff ff27 	bl	800613a <_Balloc>
 80062ec:	2201      	movs	r2, #1
 80062ee:	6144      	str	r4, [r0, #20]
 80062f0:	6102      	str	r2, [r0, #16]
 80062f2:	bd10      	pop	{r4, pc}

080062f4 <__multiply>:
 80062f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f8:	4614      	mov	r4, r2
 80062fa:	690a      	ldr	r2, [r1, #16]
 80062fc:	6923      	ldr	r3, [r4, #16]
 80062fe:	429a      	cmp	r2, r3
 8006300:	bfb8      	it	lt
 8006302:	460b      	movlt	r3, r1
 8006304:	4688      	mov	r8, r1
 8006306:	bfbc      	itt	lt
 8006308:	46a0      	movlt	r8, r4
 800630a:	461c      	movlt	r4, r3
 800630c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006310:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006314:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006318:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800631c:	eb07 0609 	add.w	r6, r7, r9
 8006320:	42b3      	cmp	r3, r6
 8006322:	bfb8      	it	lt
 8006324:	3101      	addlt	r1, #1
 8006326:	f7ff ff08 	bl	800613a <_Balloc>
 800632a:	f100 0514 	add.w	r5, r0, #20
 800632e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006332:	462b      	mov	r3, r5
 8006334:	2200      	movs	r2, #0
 8006336:	4573      	cmp	r3, lr
 8006338:	d316      	bcc.n	8006368 <__multiply+0x74>
 800633a:	f104 0214 	add.w	r2, r4, #20
 800633e:	f108 0114 	add.w	r1, r8, #20
 8006342:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006346:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	9b00      	ldr	r3, [sp, #0]
 800634e:	9201      	str	r2, [sp, #4]
 8006350:	4293      	cmp	r3, r2
 8006352:	d80c      	bhi.n	800636e <__multiply+0x7a>
 8006354:	2e00      	cmp	r6, #0
 8006356:	dd03      	ble.n	8006360 <__multiply+0x6c>
 8006358:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800635c:	2b00      	cmp	r3, #0
 800635e:	d05d      	beq.n	800641c <__multiply+0x128>
 8006360:	6106      	str	r6, [r0, #16]
 8006362:	b003      	add	sp, #12
 8006364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006368:	f843 2b04 	str.w	r2, [r3], #4
 800636c:	e7e3      	b.n	8006336 <__multiply+0x42>
 800636e:	f8b2 b000 	ldrh.w	fp, [r2]
 8006372:	f1bb 0f00 	cmp.w	fp, #0
 8006376:	d023      	beq.n	80063c0 <__multiply+0xcc>
 8006378:	4689      	mov	r9, r1
 800637a:	46ac      	mov	ip, r5
 800637c:	f04f 0800 	mov.w	r8, #0
 8006380:	f859 4b04 	ldr.w	r4, [r9], #4
 8006384:	f8dc a000 	ldr.w	sl, [ip]
 8006388:	b2a3      	uxth	r3, r4
 800638a:	fa1f fa8a 	uxth.w	sl, sl
 800638e:	fb0b a303 	mla	r3, fp, r3, sl
 8006392:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006396:	f8dc 4000 	ldr.w	r4, [ip]
 800639a:	4443      	add	r3, r8
 800639c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80063a0:	fb0b 840a 	mla	r4, fp, sl, r8
 80063a4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80063a8:	46e2      	mov	sl, ip
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80063b0:	454f      	cmp	r7, r9
 80063b2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80063b6:	f84a 3b04 	str.w	r3, [sl], #4
 80063ba:	d82b      	bhi.n	8006414 <__multiply+0x120>
 80063bc:	f8cc 8004 	str.w	r8, [ip, #4]
 80063c0:	9b01      	ldr	r3, [sp, #4]
 80063c2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80063c6:	3204      	adds	r2, #4
 80063c8:	f1ba 0f00 	cmp.w	sl, #0
 80063cc:	d020      	beq.n	8006410 <__multiply+0x11c>
 80063ce:	682b      	ldr	r3, [r5, #0]
 80063d0:	4689      	mov	r9, r1
 80063d2:	46a8      	mov	r8, r5
 80063d4:	f04f 0b00 	mov.w	fp, #0
 80063d8:	f8b9 c000 	ldrh.w	ip, [r9]
 80063dc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80063e0:	fb0a 440c 	mla	r4, sl, ip, r4
 80063e4:	445c      	add	r4, fp
 80063e6:	46c4      	mov	ip, r8
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80063ee:	f84c 3b04 	str.w	r3, [ip], #4
 80063f2:	f859 3b04 	ldr.w	r3, [r9], #4
 80063f6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80063fa:	0c1b      	lsrs	r3, r3, #16
 80063fc:	fb0a b303 	mla	r3, sl, r3, fp
 8006400:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006404:	454f      	cmp	r7, r9
 8006406:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800640a:	d805      	bhi.n	8006418 <__multiply+0x124>
 800640c:	f8c8 3004 	str.w	r3, [r8, #4]
 8006410:	3504      	adds	r5, #4
 8006412:	e79b      	b.n	800634c <__multiply+0x58>
 8006414:	46d4      	mov	ip, sl
 8006416:	e7b3      	b.n	8006380 <__multiply+0x8c>
 8006418:	46e0      	mov	r8, ip
 800641a:	e7dd      	b.n	80063d8 <__multiply+0xe4>
 800641c:	3e01      	subs	r6, #1
 800641e:	e799      	b.n	8006354 <__multiply+0x60>

08006420 <__pow5mult>:
 8006420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006424:	4615      	mov	r5, r2
 8006426:	f012 0203 	ands.w	r2, r2, #3
 800642a:	4606      	mov	r6, r0
 800642c:	460f      	mov	r7, r1
 800642e:	d007      	beq.n	8006440 <__pow5mult+0x20>
 8006430:	3a01      	subs	r2, #1
 8006432:	4c21      	ldr	r4, [pc, #132]	; (80064b8 <__pow5mult+0x98>)
 8006434:	2300      	movs	r3, #0
 8006436:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800643a:	f7ff fec9 	bl	80061d0 <__multadd>
 800643e:	4607      	mov	r7, r0
 8006440:	10ad      	asrs	r5, r5, #2
 8006442:	d035      	beq.n	80064b0 <__pow5mult+0x90>
 8006444:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006446:	b93c      	cbnz	r4, 8006458 <__pow5mult+0x38>
 8006448:	2010      	movs	r0, #16
 800644a:	f7ff fe63 	bl	8006114 <malloc>
 800644e:	6270      	str	r0, [r6, #36]	; 0x24
 8006450:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006454:	6004      	str	r4, [r0, #0]
 8006456:	60c4      	str	r4, [r0, #12]
 8006458:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800645c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006460:	b94c      	cbnz	r4, 8006476 <__pow5mult+0x56>
 8006462:	f240 2171 	movw	r1, #625	; 0x271
 8006466:	4630      	mov	r0, r6
 8006468:	f7ff ff3b 	bl	80062e2 <__i2b>
 800646c:	2300      	movs	r3, #0
 800646e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006472:	4604      	mov	r4, r0
 8006474:	6003      	str	r3, [r0, #0]
 8006476:	f04f 0800 	mov.w	r8, #0
 800647a:	07eb      	lsls	r3, r5, #31
 800647c:	d50a      	bpl.n	8006494 <__pow5mult+0x74>
 800647e:	4639      	mov	r1, r7
 8006480:	4622      	mov	r2, r4
 8006482:	4630      	mov	r0, r6
 8006484:	f7ff ff36 	bl	80062f4 <__multiply>
 8006488:	4639      	mov	r1, r7
 800648a:	4681      	mov	r9, r0
 800648c:	4630      	mov	r0, r6
 800648e:	f7ff fe88 	bl	80061a2 <_Bfree>
 8006492:	464f      	mov	r7, r9
 8006494:	106d      	asrs	r5, r5, #1
 8006496:	d00b      	beq.n	80064b0 <__pow5mult+0x90>
 8006498:	6820      	ldr	r0, [r4, #0]
 800649a:	b938      	cbnz	r0, 80064ac <__pow5mult+0x8c>
 800649c:	4622      	mov	r2, r4
 800649e:	4621      	mov	r1, r4
 80064a0:	4630      	mov	r0, r6
 80064a2:	f7ff ff27 	bl	80062f4 <__multiply>
 80064a6:	6020      	str	r0, [r4, #0]
 80064a8:	f8c0 8000 	str.w	r8, [r0]
 80064ac:	4604      	mov	r4, r0
 80064ae:	e7e4      	b.n	800647a <__pow5mult+0x5a>
 80064b0:	4638      	mov	r0, r7
 80064b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064b6:	bf00      	nop
 80064b8:	08007768 	.word	0x08007768

080064bc <__lshift>:
 80064bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064c0:	460c      	mov	r4, r1
 80064c2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80064c6:	6923      	ldr	r3, [r4, #16]
 80064c8:	6849      	ldr	r1, [r1, #4]
 80064ca:	eb0a 0903 	add.w	r9, sl, r3
 80064ce:	68a3      	ldr	r3, [r4, #8]
 80064d0:	4607      	mov	r7, r0
 80064d2:	4616      	mov	r6, r2
 80064d4:	f109 0501 	add.w	r5, r9, #1
 80064d8:	42ab      	cmp	r3, r5
 80064da:	db32      	blt.n	8006542 <__lshift+0x86>
 80064dc:	4638      	mov	r0, r7
 80064de:	f7ff fe2c 	bl	800613a <_Balloc>
 80064e2:	2300      	movs	r3, #0
 80064e4:	4680      	mov	r8, r0
 80064e6:	f100 0114 	add.w	r1, r0, #20
 80064ea:	461a      	mov	r2, r3
 80064ec:	4553      	cmp	r3, sl
 80064ee:	db2b      	blt.n	8006548 <__lshift+0x8c>
 80064f0:	6920      	ldr	r0, [r4, #16]
 80064f2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80064f6:	f104 0314 	add.w	r3, r4, #20
 80064fa:	f016 021f 	ands.w	r2, r6, #31
 80064fe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006502:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006506:	d025      	beq.n	8006554 <__lshift+0x98>
 8006508:	f1c2 0e20 	rsb	lr, r2, #32
 800650c:	2000      	movs	r0, #0
 800650e:	681e      	ldr	r6, [r3, #0]
 8006510:	468a      	mov	sl, r1
 8006512:	4096      	lsls	r6, r2
 8006514:	4330      	orrs	r0, r6
 8006516:	f84a 0b04 	str.w	r0, [sl], #4
 800651a:	f853 0b04 	ldr.w	r0, [r3], #4
 800651e:	459c      	cmp	ip, r3
 8006520:	fa20 f00e 	lsr.w	r0, r0, lr
 8006524:	d814      	bhi.n	8006550 <__lshift+0x94>
 8006526:	6048      	str	r0, [r1, #4]
 8006528:	b108      	cbz	r0, 800652e <__lshift+0x72>
 800652a:	f109 0502 	add.w	r5, r9, #2
 800652e:	3d01      	subs	r5, #1
 8006530:	4638      	mov	r0, r7
 8006532:	f8c8 5010 	str.w	r5, [r8, #16]
 8006536:	4621      	mov	r1, r4
 8006538:	f7ff fe33 	bl	80061a2 <_Bfree>
 800653c:	4640      	mov	r0, r8
 800653e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006542:	3101      	adds	r1, #1
 8006544:	005b      	lsls	r3, r3, #1
 8006546:	e7c7      	b.n	80064d8 <__lshift+0x1c>
 8006548:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800654c:	3301      	adds	r3, #1
 800654e:	e7cd      	b.n	80064ec <__lshift+0x30>
 8006550:	4651      	mov	r1, sl
 8006552:	e7dc      	b.n	800650e <__lshift+0x52>
 8006554:	3904      	subs	r1, #4
 8006556:	f853 2b04 	ldr.w	r2, [r3], #4
 800655a:	f841 2f04 	str.w	r2, [r1, #4]!
 800655e:	459c      	cmp	ip, r3
 8006560:	d8f9      	bhi.n	8006556 <__lshift+0x9a>
 8006562:	e7e4      	b.n	800652e <__lshift+0x72>

08006564 <__mcmp>:
 8006564:	6903      	ldr	r3, [r0, #16]
 8006566:	690a      	ldr	r2, [r1, #16]
 8006568:	1a9b      	subs	r3, r3, r2
 800656a:	b530      	push	{r4, r5, lr}
 800656c:	d10c      	bne.n	8006588 <__mcmp+0x24>
 800656e:	0092      	lsls	r2, r2, #2
 8006570:	3014      	adds	r0, #20
 8006572:	3114      	adds	r1, #20
 8006574:	1884      	adds	r4, r0, r2
 8006576:	4411      	add	r1, r2
 8006578:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800657c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006580:	4295      	cmp	r5, r2
 8006582:	d003      	beq.n	800658c <__mcmp+0x28>
 8006584:	d305      	bcc.n	8006592 <__mcmp+0x2e>
 8006586:	2301      	movs	r3, #1
 8006588:	4618      	mov	r0, r3
 800658a:	bd30      	pop	{r4, r5, pc}
 800658c:	42a0      	cmp	r0, r4
 800658e:	d3f3      	bcc.n	8006578 <__mcmp+0x14>
 8006590:	e7fa      	b.n	8006588 <__mcmp+0x24>
 8006592:	f04f 33ff 	mov.w	r3, #4294967295
 8006596:	e7f7      	b.n	8006588 <__mcmp+0x24>

08006598 <__mdiff>:
 8006598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800659c:	460d      	mov	r5, r1
 800659e:	4607      	mov	r7, r0
 80065a0:	4611      	mov	r1, r2
 80065a2:	4628      	mov	r0, r5
 80065a4:	4614      	mov	r4, r2
 80065a6:	f7ff ffdd 	bl	8006564 <__mcmp>
 80065aa:	1e06      	subs	r6, r0, #0
 80065ac:	d108      	bne.n	80065c0 <__mdiff+0x28>
 80065ae:	4631      	mov	r1, r6
 80065b0:	4638      	mov	r0, r7
 80065b2:	f7ff fdc2 	bl	800613a <_Balloc>
 80065b6:	2301      	movs	r3, #1
 80065b8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80065bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065c0:	bfa4      	itt	ge
 80065c2:	4623      	movge	r3, r4
 80065c4:	462c      	movge	r4, r5
 80065c6:	4638      	mov	r0, r7
 80065c8:	6861      	ldr	r1, [r4, #4]
 80065ca:	bfa6      	itte	ge
 80065cc:	461d      	movge	r5, r3
 80065ce:	2600      	movge	r6, #0
 80065d0:	2601      	movlt	r6, #1
 80065d2:	f7ff fdb2 	bl	800613a <_Balloc>
 80065d6:	692b      	ldr	r3, [r5, #16]
 80065d8:	60c6      	str	r6, [r0, #12]
 80065da:	6926      	ldr	r6, [r4, #16]
 80065dc:	f105 0914 	add.w	r9, r5, #20
 80065e0:	f104 0214 	add.w	r2, r4, #20
 80065e4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80065e8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80065ec:	f100 0514 	add.w	r5, r0, #20
 80065f0:	f04f 0e00 	mov.w	lr, #0
 80065f4:	f852 ab04 	ldr.w	sl, [r2], #4
 80065f8:	f859 4b04 	ldr.w	r4, [r9], #4
 80065fc:	fa1e f18a 	uxtah	r1, lr, sl
 8006600:	b2a3      	uxth	r3, r4
 8006602:	1ac9      	subs	r1, r1, r3
 8006604:	0c23      	lsrs	r3, r4, #16
 8006606:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800660a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800660e:	b289      	uxth	r1, r1
 8006610:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006614:	45c8      	cmp	r8, r9
 8006616:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800661a:	4694      	mov	ip, r2
 800661c:	f845 3b04 	str.w	r3, [r5], #4
 8006620:	d8e8      	bhi.n	80065f4 <__mdiff+0x5c>
 8006622:	45bc      	cmp	ip, r7
 8006624:	d304      	bcc.n	8006630 <__mdiff+0x98>
 8006626:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800662a:	b183      	cbz	r3, 800664e <__mdiff+0xb6>
 800662c:	6106      	str	r6, [r0, #16]
 800662e:	e7c5      	b.n	80065bc <__mdiff+0x24>
 8006630:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006634:	fa1e f381 	uxtah	r3, lr, r1
 8006638:	141a      	asrs	r2, r3, #16
 800663a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800663e:	b29b      	uxth	r3, r3
 8006640:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006644:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006648:	f845 3b04 	str.w	r3, [r5], #4
 800664c:	e7e9      	b.n	8006622 <__mdiff+0x8a>
 800664e:	3e01      	subs	r6, #1
 8006650:	e7e9      	b.n	8006626 <__mdiff+0x8e>

08006652 <__d2b>:
 8006652:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006656:	460e      	mov	r6, r1
 8006658:	2101      	movs	r1, #1
 800665a:	ec59 8b10 	vmov	r8, r9, d0
 800665e:	4615      	mov	r5, r2
 8006660:	f7ff fd6b 	bl	800613a <_Balloc>
 8006664:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006668:	4607      	mov	r7, r0
 800666a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800666e:	bb34      	cbnz	r4, 80066be <__d2b+0x6c>
 8006670:	9301      	str	r3, [sp, #4]
 8006672:	f1b8 0300 	subs.w	r3, r8, #0
 8006676:	d027      	beq.n	80066c8 <__d2b+0x76>
 8006678:	a802      	add	r0, sp, #8
 800667a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800667e:	f7ff fe01 	bl	8006284 <__lo0bits>
 8006682:	9900      	ldr	r1, [sp, #0]
 8006684:	b1f0      	cbz	r0, 80066c4 <__d2b+0x72>
 8006686:	9a01      	ldr	r2, [sp, #4]
 8006688:	f1c0 0320 	rsb	r3, r0, #32
 800668c:	fa02 f303 	lsl.w	r3, r2, r3
 8006690:	430b      	orrs	r3, r1
 8006692:	40c2      	lsrs	r2, r0
 8006694:	617b      	str	r3, [r7, #20]
 8006696:	9201      	str	r2, [sp, #4]
 8006698:	9b01      	ldr	r3, [sp, #4]
 800669a:	61bb      	str	r3, [r7, #24]
 800669c:	2b00      	cmp	r3, #0
 800669e:	bf14      	ite	ne
 80066a0:	2102      	movne	r1, #2
 80066a2:	2101      	moveq	r1, #1
 80066a4:	6139      	str	r1, [r7, #16]
 80066a6:	b1c4      	cbz	r4, 80066da <__d2b+0x88>
 80066a8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80066ac:	4404      	add	r4, r0
 80066ae:	6034      	str	r4, [r6, #0]
 80066b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80066b4:	6028      	str	r0, [r5, #0]
 80066b6:	4638      	mov	r0, r7
 80066b8:	b003      	add	sp, #12
 80066ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066c2:	e7d5      	b.n	8006670 <__d2b+0x1e>
 80066c4:	6179      	str	r1, [r7, #20]
 80066c6:	e7e7      	b.n	8006698 <__d2b+0x46>
 80066c8:	a801      	add	r0, sp, #4
 80066ca:	f7ff fddb 	bl	8006284 <__lo0bits>
 80066ce:	9b01      	ldr	r3, [sp, #4]
 80066d0:	617b      	str	r3, [r7, #20]
 80066d2:	2101      	movs	r1, #1
 80066d4:	6139      	str	r1, [r7, #16]
 80066d6:	3020      	adds	r0, #32
 80066d8:	e7e5      	b.n	80066a6 <__d2b+0x54>
 80066da:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80066de:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80066e2:	6030      	str	r0, [r6, #0]
 80066e4:	6918      	ldr	r0, [r3, #16]
 80066e6:	f7ff fdae 	bl	8006246 <__hi0bits>
 80066ea:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80066ee:	e7e1      	b.n	80066b4 <__d2b+0x62>

080066f0 <_calloc_r>:
 80066f0:	b538      	push	{r3, r4, r5, lr}
 80066f2:	fb02 f401 	mul.w	r4, r2, r1
 80066f6:	4621      	mov	r1, r4
 80066f8:	f000 f856 	bl	80067a8 <_malloc_r>
 80066fc:	4605      	mov	r5, r0
 80066fe:	b118      	cbz	r0, 8006708 <_calloc_r+0x18>
 8006700:	4622      	mov	r2, r4
 8006702:	2100      	movs	r1, #0
 8006704:	f7fe fa30 	bl	8004b68 <memset>
 8006708:	4628      	mov	r0, r5
 800670a:	bd38      	pop	{r3, r4, r5, pc}

0800670c <_free_r>:
 800670c:	b538      	push	{r3, r4, r5, lr}
 800670e:	4605      	mov	r5, r0
 8006710:	2900      	cmp	r1, #0
 8006712:	d045      	beq.n	80067a0 <_free_r+0x94>
 8006714:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006718:	1f0c      	subs	r4, r1, #4
 800671a:	2b00      	cmp	r3, #0
 800671c:	bfb8      	it	lt
 800671e:	18e4      	addlt	r4, r4, r3
 8006720:	f000 fa29 	bl	8006b76 <__malloc_lock>
 8006724:	4a1f      	ldr	r2, [pc, #124]	; (80067a4 <_free_r+0x98>)
 8006726:	6813      	ldr	r3, [r2, #0]
 8006728:	4610      	mov	r0, r2
 800672a:	b933      	cbnz	r3, 800673a <_free_r+0x2e>
 800672c:	6063      	str	r3, [r4, #4]
 800672e:	6014      	str	r4, [r2, #0]
 8006730:	4628      	mov	r0, r5
 8006732:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006736:	f000 ba1f 	b.w	8006b78 <__malloc_unlock>
 800673a:	42a3      	cmp	r3, r4
 800673c:	d90c      	bls.n	8006758 <_free_r+0x4c>
 800673e:	6821      	ldr	r1, [r4, #0]
 8006740:	1862      	adds	r2, r4, r1
 8006742:	4293      	cmp	r3, r2
 8006744:	bf04      	itt	eq
 8006746:	681a      	ldreq	r2, [r3, #0]
 8006748:	685b      	ldreq	r3, [r3, #4]
 800674a:	6063      	str	r3, [r4, #4]
 800674c:	bf04      	itt	eq
 800674e:	1852      	addeq	r2, r2, r1
 8006750:	6022      	streq	r2, [r4, #0]
 8006752:	6004      	str	r4, [r0, #0]
 8006754:	e7ec      	b.n	8006730 <_free_r+0x24>
 8006756:	4613      	mov	r3, r2
 8006758:	685a      	ldr	r2, [r3, #4]
 800675a:	b10a      	cbz	r2, 8006760 <_free_r+0x54>
 800675c:	42a2      	cmp	r2, r4
 800675e:	d9fa      	bls.n	8006756 <_free_r+0x4a>
 8006760:	6819      	ldr	r1, [r3, #0]
 8006762:	1858      	adds	r0, r3, r1
 8006764:	42a0      	cmp	r0, r4
 8006766:	d10b      	bne.n	8006780 <_free_r+0x74>
 8006768:	6820      	ldr	r0, [r4, #0]
 800676a:	4401      	add	r1, r0
 800676c:	1858      	adds	r0, r3, r1
 800676e:	4282      	cmp	r2, r0
 8006770:	6019      	str	r1, [r3, #0]
 8006772:	d1dd      	bne.n	8006730 <_free_r+0x24>
 8006774:	6810      	ldr	r0, [r2, #0]
 8006776:	6852      	ldr	r2, [r2, #4]
 8006778:	605a      	str	r2, [r3, #4]
 800677a:	4401      	add	r1, r0
 800677c:	6019      	str	r1, [r3, #0]
 800677e:	e7d7      	b.n	8006730 <_free_r+0x24>
 8006780:	d902      	bls.n	8006788 <_free_r+0x7c>
 8006782:	230c      	movs	r3, #12
 8006784:	602b      	str	r3, [r5, #0]
 8006786:	e7d3      	b.n	8006730 <_free_r+0x24>
 8006788:	6820      	ldr	r0, [r4, #0]
 800678a:	1821      	adds	r1, r4, r0
 800678c:	428a      	cmp	r2, r1
 800678e:	bf04      	itt	eq
 8006790:	6811      	ldreq	r1, [r2, #0]
 8006792:	6852      	ldreq	r2, [r2, #4]
 8006794:	6062      	str	r2, [r4, #4]
 8006796:	bf04      	itt	eq
 8006798:	1809      	addeq	r1, r1, r0
 800679a:	6021      	streq	r1, [r4, #0]
 800679c:	605c      	str	r4, [r3, #4]
 800679e:	e7c7      	b.n	8006730 <_free_r+0x24>
 80067a0:	bd38      	pop	{r3, r4, r5, pc}
 80067a2:	bf00      	nop
 80067a4:	20000208 	.word	0x20000208

080067a8 <_malloc_r>:
 80067a8:	b570      	push	{r4, r5, r6, lr}
 80067aa:	1ccd      	adds	r5, r1, #3
 80067ac:	f025 0503 	bic.w	r5, r5, #3
 80067b0:	3508      	adds	r5, #8
 80067b2:	2d0c      	cmp	r5, #12
 80067b4:	bf38      	it	cc
 80067b6:	250c      	movcc	r5, #12
 80067b8:	2d00      	cmp	r5, #0
 80067ba:	4606      	mov	r6, r0
 80067bc:	db01      	blt.n	80067c2 <_malloc_r+0x1a>
 80067be:	42a9      	cmp	r1, r5
 80067c0:	d903      	bls.n	80067ca <_malloc_r+0x22>
 80067c2:	230c      	movs	r3, #12
 80067c4:	6033      	str	r3, [r6, #0]
 80067c6:	2000      	movs	r0, #0
 80067c8:	bd70      	pop	{r4, r5, r6, pc}
 80067ca:	f000 f9d4 	bl	8006b76 <__malloc_lock>
 80067ce:	4a21      	ldr	r2, [pc, #132]	; (8006854 <_malloc_r+0xac>)
 80067d0:	6814      	ldr	r4, [r2, #0]
 80067d2:	4621      	mov	r1, r4
 80067d4:	b991      	cbnz	r1, 80067fc <_malloc_r+0x54>
 80067d6:	4c20      	ldr	r4, [pc, #128]	; (8006858 <_malloc_r+0xb0>)
 80067d8:	6823      	ldr	r3, [r4, #0]
 80067da:	b91b      	cbnz	r3, 80067e4 <_malloc_r+0x3c>
 80067dc:	4630      	mov	r0, r6
 80067de:	f000 f98f 	bl	8006b00 <_sbrk_r>
 80067e2:	6020      	str	r0, [r4, #0]
 80067e4:	4629      	mov	r1, r5
 80067e6:	4630      	mov	r0, r6
 80067e8:	f000 f98a 	bl	8006b00 <_sbrk_r>
 80067ec:	1c43      	adds	r3, r0, #1
 80067ee:	d124      	bne.n	800683a <_malloc_r+0x92>
 80067f0:	230c      	movs	r3, #12
 80067f2:	6033      	str	r3, [r6, #0]
 80067f4:	4630      	mov	r0, r6
 80067f6:	f000 f9bf 	bl	8006b78 <__malloc_unlock>
 80067fa:	e7e4      	b.n	80067c6 <_malloc_r+0x1e>
 80067fc:	680b      	ldr	r3, [r1, #0]
 80067fe:	1b5b      	subs	r3, r3, r5
 8006800:	d418      	bmi.n	8006834 <_malloc_r+0x8c>
 8006802:	2b0b      	cmp	r3, #11
 8006804:	d90f      	bls.n	8006826 <_malloc_r+0x7e>
 8006806:	600b      	str	r3, [r1, #0]
 8006808:	50cd      	str	r5, [r1, r3]
 800680a:	18cc      	adds	r4, r1, r3
 800680c:	4630      	mov	r0, r6
 800680e:	f000 f9b3 	bl	8006b78 <__malloc_unlock>
 8006812:	f104 000b 	add.w	r0, r4, #11
 8006816:	1d23      	adds	r3, r4, #4
 8006818:	f020 0007 	bic.w	r0, r0, #7
 800681c:	1ac3      	subs	r3, r0, r3
 800681e:	d0d3      	beq.n	80067c8 <_malloc_r+0x20>
 8006820:	425a      	negs	r2, r3
 8006822:	50e2      	str	r2, [r4, r3]
 8006824:	e7d0      	b.n	80067c8 <_malloc_r+0x20>
 8006826:	428c      	cmp	r4, r1
 8006828:	684b      	ldr	r3, [r1, #4]
 800682a:	bf16      	itet	ne
 800682c:	6063      	strne	r3, [r4, #4]
 800682e:	6013      	streq	r3, [r2, #0]
 8006830:	460c      	movne	r4, r1
 8006832:	e7eb      	b.n	800680c <_malloc_r+0x64>
 8006834:	460c      	mov	r4, r1
 8006836:	6849      	ldr	r1, [r1, #4]
 8006838:	e7cc      	b.n	80067d4 <_malloc_r+0x2c>
 800683a:	1cc4      	adds	r4, r0, #3
 800683c:	f024 0403 	bic.w	r4, r4, #3
 8006840:	42a0      	cmp	r0, r4
 8006842:	d005      	beq.n	8006850 <_malloc_r+0xa8>
 8006844:	1a21      	subs	r1, r4, r0
 8006846:	4630      	mov	r0, r6
 8006848:	f000 f95a 	bl	8006b00 <_sbrk_r>
 800684c:	3001      	adds	r0, #1
 800684e:	d0cf      	beq.n	80067f0 <_malloc_r+0x48>
 8006850:	6025      	str	r5, [r4, #0]
 8006852:	e7db      	b.n	800680c <_malloc_r+0x64>
 8006854:	20000208 	.word	0x20000208
 8006858:	2000020c 	.word	0x2000020c

0800685c <__ssputs_r>:
 800685c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006860:	688e      	ldr	r6, [r1, #8]
 8006862:	429e      	cmp	r6, r3
 8006864:	4682      	mov	sl, r0
 8006866:	460c      	mov	r4, r1
 8006868:	4690      	mov	r8, r2
 800686a:	4699      	mov	r9, r3
 800686c:	d837      	bhi.n	80068de <__ssputs_r+0x82>
 800686e:	898a      	ldrh	r2, [r1, #12]
 8006870:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006874:	d031      	beq.n	80068da <__ssputs_r+0x7e>
 8006876:	6825      	ldr	r5, [r4, #0]
 8006878:	6909      	ldr	r1, [r1, #16]
 800687a:	1a6f      	subs	r7, r5, r1
 800687c:	6965      	ldr	r5, [r4, #20]
 800687e:	2302      	movs	r3, #2
 8006880:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006884:	fb95 f5f3 	sdiv	r5, r5, r3
 8006888:	f109 0301 	add.w	r3, r9, #1
 800688c:	443b      	add	r3, r7
 800688e:	429d      	cmp	r5, r3
 8006890:	bf38      	it	cc
 8006892:	461d      	movcc	r5, r3
 8006894:	0553      	lsls	r3, r2, #21
 8006896:	d530      	bpl.n	80068fa <__ssputs_r+0x9e>
 8006898:	4629      	mov	r1, r5
 800689a:	f7ff ff85 	bl	80067a8 <_malloc_r>
 800689e:	4606      	mov	r6, r0
 80068a0:	b950      	cbnz	r0, 80068b8 <__ssputs_r+0x5c>
 80068a2:	230c      	movs	r3, #12
 80068a4:	f8ca 3000 	str.w	r3, [sl]
 80068a8:	89a3      	ldrh	r3, [r4, #12]
 80068aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068ae:	81a3      	strh	r3, [r4, #12]
 80068b0:	f04f 30ff 	mov.w	r0, #4294967295
 80068b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068b8:	463a      	mov	r2, r7
 80068ba:	6921      	ldr	r1, [r4, #16]
 80068bc:	f7ff fc32 	bl	8006124 <memcpy>
 80068c0:	89a3      	ldrh	r3, [r4, #12]
 80068c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80068c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ca:	81a3      	strh	r3, [r4, #12]
 80068cc:	6126      	str	r6, [r4, #16]
 80068ce:	6165      	str	r5, [r4, #20]
 80068d0:	443e      	add	r6, r7
 80068d2:	1bed      	subs	r5, r5, r7
 80068d4:	6026      	str	r6, [r4, #0]
 80068d6:	60a5      	str	r5, [r4, #8]
 80068d8:	464e      	mov	r6, r9
 80068da:	454e      	cmp	r6, r9
 80068dc:	d900      	bls.n	80068e0 <__ssputs_r+0x84>
 80068de:	464e      	mov	r6, r9
 80068e0:	4632      	mov	r2, r6
 80068e2:	4641      	mov	r1, r8
 80068e4:	6820      	ldr	r0, [r4, #0]
 80068e6:	f000 f92d 	bl	8006b44 <memmove>
 80068ea:	68a3      	ldr	r3, [r4, #8]
 80068ec:	1b9b      	subs	r3, r3, r6
 80068ee:	60a3      	str	r3, [r4, #8]
 80068f0:	6823      	ldr	r3, [r4, #0]
 80068f2:	441e      	add	r6, r3
 80068f4:	6026      	str	r6, [r4, #0]
 80068f6:	2000      	movs	r0, #0
 80068f8:	e7dc      	b.n	80068b4 <__ssputs_r+0x58>
 80068fa:	462a      	mov	r2, r5
 80068fc:	f000 f93d 	bl	8006b7a <_realloc_r>
 8006900:	4606      	mov	r6, r0
 8006902:	2800      	cmp	r0, #0
 8006904:	d1e2      	bne.n	80068cc <__ssputs_r+0x70>
 8006906:	6921      	ldr	r1, [r4, #16]
 8006908:	4650      	mov	r0, sl
 800690a:	f7ff feff 	bl	800670c <_free_r>
 800690e:	e7c8      	b.n	80068a2 <__ssputs_r+0x46>

08006910 <_svfiprintf_r>:
 8006910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006914:	461d      	mov	r5, r3
 8006916:	898b      	ldrh	r3, [r1, #12]
 8006918:	061f      	lsls	r7, r3, #24
 800691a:	b09d      	sub	sp, #116	; 0x74
 800691c:	4680      	mov	r8, r0
 800691e:	460c      	mov	r4, r1
 8006920:	4616      	mov	r6, r2
 8006922:	d50f      	bpl.n	8006944 <_svfiprintf_r+0x34>
 8006924:	690b      	ldr	r3, [r1, #16]
 8006926:	b96b      	cbnz	r3, 8006944 <_svfiprintf_r+0x34>
 8006928:	2140      	movs	r1, #64	; 0x40
 800692a:	f7ff ff3d 	bl	80067a8 <_malloc_r>
 800692e:	6020      	str	r0, [r4, #0]
 8006930:	6120      	str	r0, [r4, #16]
 8006932:	b928      	cbnz	r0, 8006940 <_svfiprintf_r+0x30>
 8006934:	230c      	movs	r3, #12
 8006936:	f8c8 3000 	str.w	r3, [r8]
 800693a:	f04f 30ff 	mov.w	r0, #4294967295
 800693e:	e0c8      	b.n	8006ad2 <_svfiprintf_r+0x1c2>
 8006940:	2340      	movs	r3, #64	; 0x40
 8006942:	6163      	str	r3, [r4, #20]
 8006944:	2300      	movs	r3, #0
 8006946:	9309      	str	r3, [sp, #36]	; 0x24
 8006948:	2320      	movs	r3, #32
 800694a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800694e:	2330      	movs	r3, #48	; 0x30
 8006950:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006954:	9503      	str	r5, [sp, #12]
 8006956:	f04f 0b01 	mov.w	fp, #1
 800695a:	4637      	mov	r7, r6
 800695c:	463d      	mov	r5, r7
 800695e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006962:	b10b      	cbz	r3, 8006968 <_svfiprintf_r+0x58>
 8006964:	2b25      	cmp	r3, #37	; 0x25
 8006966:	d13e      	bne.n	80069e6 <_svfiprintf_r+0xd6>
 8006968:	ebb7 0a06 	subs.w	sl, r7, r6
 800696c:	d00b      	beq.n	8006986 <_svfiprintf_r+0x76>
 800696e:	4653      	mov	r3, sl
 8006970:	4632      	mov	r2, r6
 8006972:	4621      	mov	r1, r4
 8006974:	4640      	mov	r0, r8
 8006976:	f7ff ff71 	bl	800685c <__ssputs_r>
 800697a:	3001      	adds	r0, #1
 800697c:	f000 80a4 	beq.w	8006ac8 <_svfiprintf_r+0x1b8>
 8006980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006982:	4453      	add	r3, sl
 8006984:	9309      	str	r3, [sp, #36]	; 0x24
 8006986:	783b      	ldrb	r3, [r7, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	f000 809d 	beq.w	8006ac8 <_svfiprintf_r+0x1b8>
 800698e:	2300      	movs	r3, #0
 8006990:	f04f 32ff 	mov.w	r2, #4294967295
 8006994:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006998:	9304      	str	r3, [sp, #16]
 800699a:	9307      	str	r3, [sp, #28]
 800699c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069a0:	931a      	str	r3, [sp, #104]	; 0x68
 80069a2:	462f      	mov	r7, r5
 80069a4:	2205      	movs	r2, #5
 80069a6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80069aa:	4850      	ldr	r0, [pc, #320]	; (8006aec <_svfiprintf_r+0x1dc>)
 80069ac:	f7f9 fc38 	bl	8000220 <memchr>
 80069b0:	9b04      	ldr	r3, [sp, #16]
 80069b2:	b9d0      	cbnz	r0, 80069ea <_svfiprintf_r+0xda>
 80069b4:	06d9      	lsls	r1, r3, #27
 80069b6:	bf44      	itt	mi
 80069b8:	2220      	movmi	r2, #32
 80069ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80069be:	071a      	lsls	r2, r3, #28
 80069c0:	bf44      	itt	mi
 80069c2:	222b      	movmi	r2, #43	; 0x2b
 80069c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80069c8:	782a      	ldrb	r2, [r5, #0]
 80069ca:	2a2a      	cmp	r2, #42	; 0x2a
 80069cc:	d015      	beq.n	80069fa <_svfiprintf_r+0xea>
 80069ce:	9a07      	ldr	r2, [sp, #28]
 80069d0:	462f      	mov	r7, r5
 80069d2:	2000      	movs	r0, #0
 80069d4:	250a      	movs	r5, #10
 80069d6:	4639      	mov	r1, r7
 80069d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069dc:	3b30      	subs	r3, #48	; 0x30
 80069de:	2b09      	cmp	r3, #9
 80069e0:	d94d      	bls.n	8006a7e <_svfiprintf_r+0x16e>
 80069e2:	b1b8      	cbz	r0, 8006a14 <_svfiprintf_r+0x104>
 80069e4:	e00f      	b.n	8006a06 <_svfiprintf_r+0xf6>
 80069e6:	462f      	mov	r7, r5
 80069e8:	e7b8      	b.n	800695c <_svfiprintf_r+0x4c>
 80069ea:	4a40      	ldr	r2, [pc, #256]	; (8006aec <_svfiprintf_r+0x1dc>)
 80069ec:	1a80      	subs	r0, r0, r2
 80069ee:	fa0b f000 	lsl.w	r0, fp, r0
 80069f2:	4318      	orrs	r0, r3
 80069f4:	9004      	str	r0, [sp, #16]
 80069f6:	463d      	mov	r5, r7
 80069f8:	e7d3      	b.n	80069a2 <_svfiprintf_r+0x92>
 80069fa:	9a03      	ldr	r2, [sp, #12]
 80069fc:	1d11      	adds	r1, r2, #4
 80069fe:	6812      	ldr	r2, [r2, #0]
 8006a00:	9103      	str	r1, [sp, #12]
 8006a02:	2a00      	cmp	r2, #0
 8006a04:	db01      	blt.n	8006a0a <_svfiprintf_r+0xfa>
 8006a06:	9207      	str	r2, [sp, #28]
 8006a08:	e004      	b.n	8006a14 <_svfiprintf_r+0x104>
 8006a0a:	4252      	negs	r2, r2
 8006a0c:	f043 0302 	orr.w	r3, r3, #2
 8006a10:	9207      	str	r2, [sp, #28]
 8006a12:	9304      	str	r3, [sp, #16]
 8006a14:	783b      	ldrb	r3, [r7, #0]
 8006a16:	2b2e      	cmp	r3, #46	; 0x2e
 8006a18:	d10c      	bne.n	8006a34 <_svfiprintf_r+0x124>
 8006a1a:	787b      	ldrb	r3, [r7, #1]
 8006a1c:	2b2a      	cmp	r3, #42	; 0x2a
 8006a1e:	d133      	bne.n	8006a88 <_svfiprintf_r+0x178>
 8006a20:	9b03      	ldr	r3, [sp, #12]
 8006a22:	1d1a      	adds	r2, r3, #4
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	9203      	str	r2, [sp, #12]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	bfb8      	it	lt
 8006a2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a30:	3702      	adds	r7, #2
 8006a32:	9305      	str	r3, [sp, #20]
 8006a34:	4d2e      	ldr	r5, [pc, #184]	; (8006af0 <_svfiprintf_r+0x1e0>)
 8006a36:	7839      	ldrb	r1, [r7, #0]
 8006a38:	2203      	movs	r2, #3
 8006a3a:	4628      	mov	r0, r5
 8006a3c:	f7f9 fbf0 	bl	8000220 <memchr>
 8006a40:	b138      	cbz	r0, 8006a52 <_svfiprintf_r+0x142>
 8006a42:	2340      	movs	r3, #64	; 0x40
 8006a44:	1b40      	subs	r0, r0, r5
 8006a46:	fa03 f000 	lsl.w	r0, r3, r0
 8006a4a:	9b04      	ldr	r3, [sp, #16]
 8006a4c:	4303      	orrs	r3, r0
 8006a4e:	3701      	adds	r7, #1
 8006a50:	9304      	str	r3, [sp, #16]
 8006a52:	7839      	ldrb	r1, [r7, #0]
 8006a54:	4827      	ldr	r0, [pc, #156]	; (8006af4 <_svfiprintf_r+0x1e4>)
 8006a56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a5a:	2206      	movs	r2, #6
 8006a5c:	1c7e      	adds	r6, r7, #1
 8006a5e:	f7f9 fbdf 	bl	8000220 <memchr>
 8006a62:	2800      	cmp	r0, #0
 8006a64:	d038      	beq.n	8006ad8 <_svfiprintf_r+0x1c8>
 8006a66:	4b24      	ldr	r3, [pc, #144]	; (8006af8 <_svfiprintf_r+0x1e8>)
 8006a68:	bb13      	cbnz	r3, 8006ab0 <_svfiprintf_r+0x1a0>
 8006a6a:	9b03      	ldr	r3, [sp, #12]
 8006a6c:	3307      	adds	r3, #7
 8006a6e:	f023 0307 	bic.w	r3, r3, #7
 8006a72:	3308      	adds	r3, #8
 8006a74:	9303      	str	r3, [sp, #12]
 8006a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a78:	444b      	add	r3, r9
 8006a7a:	9309      	str	r3, [sp, #36]	; 0x24
 8006a7c:	e76d      	b.n	800695a <_svfiprintf_r+0x4a>
 8006a7e:	fb05 3202 	mla	r2, r5, r2, r3
 8006a82:	2001      	movs	r0, #1
 8006a84:	460f      	mov	r7, r1
 8006a86:	e7a6      	b.n	80069d6 <_svfiprintf_r+0xc6>
 8006a88:	2300      	movs	r3, #0
 8006a8a:	3701      	adds	r7, #1
 8006a8c:	9305      	str	r3, [sp, #20]
 8006a8e:	4619      	mov	r1, r3
 8006a90:	250a      	movs	r5, #10
 8006a92:	4638      	mov	r0, r7
 8006a94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a98:	3a30      	subs	r2, #48	; 0x30
 8006a9a:	2a09      	cmp	r2, #9
 8006a9c:	d903      	bls.n	8006aa6 <_svfiprintf_r+0x196>
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d0c8      	beq.n	8006a34 <_svfiprintf_r+0x124>
 8006aa2:	9105      	str	r1, [sp, #20]
 8006aa4:	e7c6      	b.n	8006a34 <_svfiprintf_r+0x124>
 8006aa6:	fb05 2101 	mla	r1, r5, r1, r2
 8006aaa:	2301      	movs	r3, #1
 8006aac:	4607      	mov	r7, r0
 8006aae:	e7f0      	b.n	8006a92 <_svfiprintf_r+0x182>
 8006ab0:	ab03      	add	r3, sp, #12
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	4622      	mov	r2, r4
 8006ab6:	4b11      	ldr	r3, [pc, #68]	; (8006afc <_svfiprintf_r+0x1ec>)
 8006ab8:	a904      	add	r1, sp, #16
 8006aba:	4640      	mov	r0, r8
 8006abc:	f7fe f8f0 	bl	8004ca0 <_printf_float>
 8006ac0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006ac4:	4681      	mov	r9, r0
 8006ac6:	d1d6      	bne.n	8006a76 <_svfiprintf_r+0x166>
 8006ac8:	89a3      	ldrh	r3, [r4, #12]
 8006aca:	065b      	lsls	r3, r3, #25
 8006acc:	f53f af35 	bmi.w	800693a <_svfiprintf_r+0x2a>
 8006ad0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ad2:	b01d      	add	sp, #116	; 0x74
 8006ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ad8:	ab03      	add	r3, sp, #12
 8006ada:	9300      	str	r3, [sp, #0]
 8006adc:	4622      	mov	r2, r4
 8006ade:	4b07      	ldr	r3, [pc, #28]	; (8006afc <_svfiprintf_r+0x1ec>)
 8006ae0:	a904      	add	r1, sp, #16
 8006ae2:	4640      	mov	r0, r8
 8006ae4:	f7fe fb92 	bl	800520c <_printf_i>
 8006ae8:	e7ea      	b.n	8006ac0 <_svfiprintf_r+0x1b0>
 8006aea:	bf00      	nop
 8006aec:	08007774 	.word	0x08007774
 8006af0:	0800777a 	.word	0x0800777a
 8006af4:	0800777e 	.word	0x0800777e
 8006af8:	08004ca1 	.word	0x08004ca1
 8006afc:	0800685d 	.word	0x0800685d

08006b00 <_sbrk_r>:
 8006b00:	b538      	push	{r3, r4, r5, lr}
 8006b02:	4c06      	ldr	r4, [pc, #24]	; (8006b1c <_sbrk_r+0x1c>)
 8006b04:	2300      	movs	r3, #0
 8006b06:	4605      	mov	r5, r0
 8006b08:	4608      	mov	r0, r1
 8006b0a:	6023      	str	r3, [r4, #0]
 8006b0c:	f7fb fc16 	bl	800233c <_sbrk>
 8006b10:	1c43      	adds	r3, r0, #1
 8006b12:	d102      	bne.n	8006b1a <_sbrk_r+0x1a>
 8006b14:	6823      	ldr	r3, [r4, #0]
 8006b16:	b103      	cbz	r3, 8006b1a <_sbrk_r+0x1a>
 8006b18:	602b      	str	r3, [r5, #0]
 8006b1a:	bd38      	pop	{r3, r4, r5, pc}
 8006b1c:	2000032c 	.word	0x2000032c

08006b20 <__ascii_mbtowc>:
 8006b20:	b082      	sub	sp, #8
 8006b22:	b901      	cbnz	r1, 8006b26 <__ascii_mbtowc+0x6>
 8006b24:	a901      	add	r1, sp, #4
 8006b26:	b142      	cbz	r2, 8006b3a <__ascii_mbtowc+0x1a>
 8006b28:	b14b      	cbz	r3, 8006b3e <__ascii_mbtowc+0x1e>
 8006b2a:	7813      	ldrb	r3, [r2, #0]
 8006b2c:	600b      	str	r3, [r1, #0]
 8006b2e:	7812      	ldrb	r2, [r2, #0]
 8006b30:	1c10      	adds	r0, r2, #0
 8006b32:	bf18      	it	ne
 8006b34:	2001      	movne	r0, #1
 8006b36:	b002      	add	sp, #8
 8006b38:	4770      	bx	lr
 8006b3a:	4610      	mov	r0, r2
 8006b3c:	e7fb      	b.n	8006b36 <__ascii_mbtowc+0x16>
 8006b3e:	f06f 0001 	mvn.w	r0, #1
 8006b42:	e7f8      	b.n	8006b36 <__ascii_mbtowc+0x16>

08006b44 <memmove>:
 8006b44:	4288      	cmp	r0, r1
 8006b46:	b510      	push	{r4, lr}
 8006b48:	eb01 0302 	add.w	r3, r1, r2
 8006b4c:	d807      	bhi.n	8006b5e <memmove+0x1a>
 8006b4e:	1e42      	subs	r2, r0, #1
 8006b50:	4299      	cmp	r1, r3
 8006b52:	d00a      	beq.n	8006b6a <memmove+0x26>
 8006b54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b58:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006b5c:	e7f8      	b.n	8006b50 <memmove+0xc>
 8006b5e:	4283      	cmp	r3, r0
 8006b60:	d9f5      	bls.n	8006b4e <memmove+0xa>
 8006b62:	1881      	adds	r1, r0, r2
 8006b64:	1ad2      	subs	r2, r2, r3
 8006b66:	42d3      	cmn	r3, r2
 8006b68:	d100      	bne.n	8006b6c <memmove+0x28>
 8006b6a:	bd10      	pop	{r4, pc}
 8006b6c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b70:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006b74:	e7f7      	b.n	8006b66 <memmove+0x22>

08006b76 <__malloc_lock>:
 8006b76:	4770      	bx	lr

08006b78 <__malloc_unlock>:
 8006b78:	4770      	bx	lr

08006b7a <_realloc_r>:
 8006b7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b7c:	4607      	mov	r7, r0
 8006b7e:	4614      	mov	r4, r2
 8006b80:	460e      	mov	r6, r1
 8006b82:	b921      	cbnz	r1, 8006b8e <_realloc_r+0x14>
 8006b84:	4611      	mov	r1, r2
 8006b86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006b8a:	f7ff be0d 	b.w	80067a8 <_malloc_r>
 8006b8e:	b922      	cbnz	r2, 8006b9a <_realloc_r+0x20>
 8006b90:	f7ff fdbc 	bl	800670c <_free_r>
 8006b94:	4625      	mov	r5, r4
 8006b96:	4628      	mov	r0, r5
 8006b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b9a:	f000 f821 	bl	8006be0 <_malloc_usable_size_r>
 8006b9e:	42a0      	cmp	r0, r4
 8006ba0:	d20f      	bcs.n	8006bc2 <_realloc_r+0x48>
 8006ba2:	4621      	mov	r1, r4
 8006ba4:	4638      	mov	r0, r7
 8006ba6:	f7ff fdff 	bl	80067a8 <_malloc_r>
 8006baa:	4605      	mov	r5, r0
 8006bac:	2800      	cmp	r0, #0
 8006bae:	d0f2      	beq.n	8006b96 <_realloc_r+0x1c>
 8006bb0:	4631      	mov	r1, r6
 8006bb2:	4622      	mov	r2, r4
 8006bb4:	f7ff fab6 	bl	8006124 <memcpy>
 8006bb8:	4631      	mov	r1, r6
 8006bba:	4638      	mov	r0, r7
 8006bbc:	f7ff fda6 	bl	800670c <_free_r>
 8006bc0:	e7e9      	b.n	8006b96 <_realloc_r+0x1c>
 8006bc2:	4635      	mov	r5, r6
 8006bc4:	e7e7      	b.n	8006b96 <_realloc_r+0x1c>

08006bc6 <__ascii_wctomb>:
 8006bc6:	b149      	cbz	r1, 8006bdc <__ascii_wctomb+0x16>
 8006bc8:	2aff      	cmp	r2, #255	; 0xff
 8006bca:	bf85      	ittet	hi
 8006bcc:	238a      	movhi	r3, #138	; 0x8a
 8006bce:	6003      	strhi	r3, [r0, #0]
 8006bd0:	700a      	strbls	r2, [r1, #0]
 8006bd2:	f04f 30ff 	movhi.w	r0, #4294967295
 8006bd6:	bf98      	it	ls
 8006bd8:	2001      	movls	r0, #1
 8006bda:	4770      	bx	lr
 8006bdc:	4608      	mov	r0, r1
 8006bde:	4770      	bx	lr

08006be0 <_malloc_usable_size_r>:
 8006be0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006be4:	1f18      	subs	r0, r3, #4
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	bfbc      	itt	lt
 8006bea:	580b      	ldrlt	r3, [r1, r0]
 8006bec:	18c0      	addlt	r0, r0, r3
 8006bee:	4770      	bx	lr

08006bf0 <fmodf>:
 8006bf0:	b5d0      	push	{r4, r6, r7, lr}
 8006bf2:	ed2d 8b02 	vpush	{d8}
 8006bf6:	b08a      	sub	sp, #40	; 0x28
 8006bf8:	eef0 8a40 	vmov.f32	s17, s0
 8006bfc:	eeb0 8a60 	vmov.f32	s16, s1
 8006c00:	f000 f852 	bl	8006ca8 <__ieee754_fmodf>
 8006c04:	4b26      	ldr	r3, [pc, #152]	; (8006ca0 <fmodf+0xb0>)
 8006c06:	f993 4000 	ldrsb.w	r4, [r3]
 8006c0a:	1c63      	adds	r3, r4, #1
 8006c0c:	d035      	beq.n	8006c7a <fmodf+0x8a>
 8006c0e:	eeb4 8a48 	vcmp.f32	s16, s16
 8006c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c16:	d630      	bvs.n	8006c7a <fmodf+0x8a>
 8006c18:	eef4 8a68 	vcmp.f32	s17, s17
 8006c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c20:	d62b      	bvs.n	8006c7a <fmodf+0x8a>
 8006c22:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c2a:	d126      	bne.n	8006c7a <fmodf+0x8a>
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	9300      	str	r3, [sp, #0]
 8006c30:	4b1c      	ldr	r3, [pc, #112]	; (8006ca4 <fmodf+0xb4>)
 8006c32:	9301      	str	r3, [sp, #4]
 8006c34:	ee18 0a90 	vmov	r0, s17
 8006c38:	2300      	movs	r3, #0
 8006c3a:	9308      	str	r3, [sp, #32]
 8006c3c:	f7f9 fca4 	bl	8000588 <__aeabi_f2d>
 8006c40:	4606      	mov	r6, r0
 8006c42:	460f      	mov	r7, r1
 8006c44:	ee18 0a10 	vmov	r0, s16
 8006c48:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006c4c:	f7f9 fc9c 	bl	8000588 <__aeabi_f2d>
 8006c50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c54:	b9ac      	cbnz	r4, 8006c82 <fmodf+0x92>
 8006c56:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006c5a:	4668      	mov	r0, sp
 8006c5c:	f000 f8ac 	bl	8006db8 <matherr>
 8006c60:	b1c8      	cbz	r0, 8006c96 <fmodf+0xa6>
 8006c62:	9b08      	ldr	r3, [sp, #32]
 8006c64:	b11b      	cbz	r3, 8006c6e <fmodf+0x7e>
 8006c66:	f7fd ff55 	bl	8004b14 <__errno>
 8006c6a:	9b08      	ldr	r3, [sp, #32]
 8006c6c:	6003      	str	r3, [r0, #0]
 8006c6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c72:	f7f9 ffd9 	bl	8000c28 <__aeabi_d2f>
 8006c76:	ee00 0a10 	vmov	s0, r0
 8006c7a:	b00a      	add	sp, #40	; 0x28
 8006c7c:	ecbd 8b02 	vpop	{d8}
 8006c80:	bdd0      	pop	{r4, r6, r7, pc}
 8006c82:	2200      	movs	r2, #0
 8006c84:	2300      	movs	r3, #0
 8006c86:	4610      	mov	r0, r2
 8006c88:	4619      	mov	r1, r3
 8006c8a:	f7f9 fdff 	bl	800088c <__aeabi_ddiv>
 8006c8e:	2c02      	cmp	r4, #2
 8006c90:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006c94:	d1e1      	bne.n	8006c5a <fmodf+0x6a>
 8006c96:	f7fd ff3d 	bl	8004b14 <__errno>
 8006c9a:	2321      	movs	r3, #33	; 0x21
 8006c9c:	6003      	str	r3, [r0, #0]
 8006c9e:	e7e0      	b.n	8006c62 <fmodf+0x72>
 8006ca0:	200001e4 	.word	0x200001e4
 8006ca4:	08007890 	.word	0x08007890

08006ca8 <__ieee754_fmodf>:
 8006ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006caa:	ee10 6a90 	vmov	r6, s1
 8006cae:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 8006cb2:	ee10 3a10 	vmov	r3, s0
 8006cb6:	d009      	beq.n	8006ccc <__ieee754_fmodf+0x24>
 8006cb8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006cbc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8006cc0:	ee10 7a10 	vmov	r7, s0
 8006cc4:	da02      	bge.n	8006ccc <__ieee754_fmodf+0x24>
 8006cc6:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8006cca:	dd0a      	ble.n	8006ce2 <__ieee754_fmodf+0x3a>
 8006ccc:	ee07 3a90 	vmov	s15, r3
 8006cd0:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8006cd4:	eec0 7aa0 	vdiv.f32	s15, s1, s1
 8006cd8:	ee17 3a90 	vmov	r3, s15
 8006cdc:	ee00 3a10 	vmov	s0, r3
 8006ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ce2:	42a9      	cmp	r1, r5
 8006ce4:	dbfa      	blt.n	8006cdc <__ieee754_fmodf+0x34>
 8006ce6:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 8006cea:	d105      	bne.n	8006cf8 <__ieee754_fmodf+0x50>
 8006cec:	4a30      	ldr	r2, [pc, #192]	; (8006db0 <__ieee754_fmodf+0x108>)
 8006cee:	0fe3      	lsrs	r3, r4, #31
 8006cf0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	e7f1      	b.n	8006cdc <__ieee754_fmodf+0x34>
 8006cf8:	4b2e      	ldr	r3, [pc, #184]	; (8006db4 <__ieee754_fmodf+0x10c>)
 8006cfa:	4299      	cmp	r1, r3
 8006cfc:	dc3e      	bgt.n	8006d7c <__ieee754_fmodf+0xd4>
 8006cfe:	020a      	lsls	r2, r1, #8
 8006d00:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8006d04:	2a00      	cmp	r2, #0
 8006d06:	dc36      	bgt.n	8006d76 <__ieee754_fmodf+0xce>
 8006d08:	429d      	cmp	r5, r3
 8006d0a:	dc3a      	bgt.n	8006d82 <__ieee754_fmodf+0xda>
 8006d0c:	022b      	lsls	r3, r5, #8
 8006d0e:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8006d12:	005b      	lsls	r3, r3, #1
 8006d14:	f102 32ff 	add.w	r2, r2, #4294967295
 8006d18:	d5fb      	bpl.n	8006d12 <__ieee754_fmodf+0x6a>
 8006d1a:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8006d1e:	bfbb      	ittet	lt
 8006d20:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8006d24:	1a1b      	sublt	r3, r3, r0
 8006d26:	f3c7 0116 	ubfxge	r1, r7, #0, #23
 8006d2a:	4099      	lsllt	r1, r3
 8006d2c:	bfa8      	it	ge
 8006d2e:	f441 0100 	orrge.w	r1, r1, #8388608	; 0x800000
 8006d32:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8006d36:	bfb5      	itete	lt
 8006d38:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8006d3c:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 8006d40:	1a9b      	sublt	r3, r3, r2
 8006d42:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 8006d46:	bfb8      	it	lt
 8006d48:	409d      	lsllt	r5, r3
 8006d4a:	1a80      	subs	r0, r0, r2
 8006d4c:	1b4b      	subs	r3, r1, r5
 8006d4e:	b9d8      	cbnz	r0, 8006d88 <__ieee754_fmodf+0xe0>
 8006d50:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8006d54:	bf28      	it	cs
 8006d56:	460b      	movcs	r3, r1
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d0c7      	beq.n	8006cec <__ieee754_fmodf+0x44>
 8006d5c:	4915      	ldr	r1, [pc, #84]	; (8006db4 <__ieee754_fmodf+0x10c>)
 8006d5e:	428b      	cmp	r3, r1
 8006d60:	dd1a      	ble.n	8006d98 <__ieee754_fmodf+0xf0>
 8006d62:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8006d66:	db1a      	blt.n	8006d9e <__ieee754_fmodf+0xf6>
 8006d68:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8006d6c:	4323      	orrs	r3, r4
 8006d6e:	327f      	adds	r2, #127	; 0x7f
 8006d70:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8006d74:	e7b2      	b.n	8006cdc <__ieee754_fmodf+0x34>
 8006d76:	3801      	subs	r0, #1
 8006d78:	0052      	lsls	r2, r2, #1
 8006d7a:	e7c3      	b.n	8006d04 <__ieee754_fmodf+0x5c>
 8006d7c:	15c8      	asrs	r0, r1, #23
 8006d7e:	387f      	subs	r0, #127	; 0x7f
 8006d80:	e7c2      	b.n	8006d08 <__ieee754_fmodf+0x60>
 8006d82:	15ea      	asrs	r2, r5, #23
 8006d84:	3a7f      	subs	r2, #127	; 0x7f
 8006d86:	e7c8      	b.n	8006d1a <__ieee754_fmodf+0x72>
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	da02      	bge.n	8006d92 <__ieee754_fmodf+0xea>
 8006d8c:	0049      	lsls	r1, r1, #1
 8006d8e:	3801      	subs	r0, #1
 8006d90:	e7dc      	b.n	8006d4c <__ieee754_fmodf+0xa4>
 8006d92:	d0ab      	beq.n	8006cec <__ieee754_fmodf+0x44>
 8006d94:	0059      	lsls	r1, r3, #1
 8006d96:	e7fa      	b.n	8006d8e <__ieee754_fmodf+0xe6>
 8006d98:	005b      	lsls	r3, r3, #1
 8006d9a:	3a01      	subs	r2, #1
 8006d9c:	e7df      	b.n	8006d5e <__ieee754_fmodf+0xb6>
 8006d9e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006da2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006da6:	3282      	adds	r2, #130	; 0x82
 8006da8:	4113      	asrs	r3, r2
 8006daa:	4323      	orrs	r3, r4
 8006dac:	e796      	b.n	8006cdc <__ieee754_fmodf+0x34>
 8006dae:	bf00      	nop
 8006db0:	08007898 	.word	0x08007898
 8006db4:	007fffff 	.word	0x007fffff

08006db8 <matherr>:
 8006db8:	2000      	movs	r0, #0
 8006dba:	4770      	bx	lr

08006dbc <_init>:
 8006dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dbe:	bf00      	nop
 8006dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dc2:	bc08      	pop	{r3}
 8006dc4:	469e      	mov	lr, r3
 8006dc6:	4770      	bx	lr

08006dc8 <_fini>:
 8006dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dca:	bf00      	nop
 8006dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dce:	bc08      	pop	{r3}
 8006dd0:	469e      	mov	lr, r3
 8006dd2:	4770      	bx	lr
